<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Python深拷贝浅拷贝]]></title>
      <url>/2017/12/18/Python/Python%E5%A4%9A%E7%BA%BF%E7%A8%8B_&amp;_%E5%A4%9A%E8%BF%9B%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h1 id="Python多线程-多进程-amp-协程"><a href="#Python多线程-多进程-amp-协程" class="headerlink" title="Python多线程 多进程 &amp; 协程"></a>Python多线程 多进程 &amp; 协程</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="进程（process）-程序是指令、数据及其组织形式的描述，进程是程序的真正运行实例。包含：（程序的可执行机器码、内存、资源的操作系统描述符、安全特性、处理器状态）等。"><a href="#进程（process）-程序是指令、数据及其组织形式的描述，进程是程序的真正运行实例。包含：（程序的可执行机器码、内存、资源的操作系统描述符、安全特性、处理器状态）等。" class="headerlink" title="进程（process）:  程序是指令、数据及其组织形式的描述，进程是程序的真正运行实例。包含：（程序的可执行机器码、内存、资源的操作系统描述符、安全特性、处理器状态）等。"></a>进程（process）:  程序是指令、数据及其组织形式的描述，进程是程序的真正运行实例。包含：（程序的可执行机器码、内存、资源的操作系统描述符、安全特性、处理器状态）等。</h3><blockquote>
<p>Each process provides the resources needed to execute a program. A process has a virtual address space, executable code, open handles to system objects, a security context, a unique process identifier, environment variables, a priority class, minimum and maximum working set sizes, and at least one thread of execution. Each process is started with a single thread, often called the primary thread, but can create additional threads from any of its threads.</p>
</blockquote>
<h3 id="线程（thread）-是操作系统能够进行运算调度的最小单元。被包含在进程之中，是进程中的实际运算单位。同一进程中的多条线程将共享该进程中的全部系统资源，如虚拟地址空间，文件描述符和信号处理等等。但同一进程中的多个线程有各自的调用栈（call-stack），自己的寄存器环境（register-context），自己的线程本地存储（thread-local-storage）"><a href="#线程（thread）-是操作系统能够进行运算调度的最小单元。被包含在进程之中，是进程中的实际运算单位。同一进程中的多条线程将共享该进程中的全部系统资源，如虚拟地址空间，文件描述符和信号处理等等。但同一进程中的多个线程有各自的调用栈（call-stack），自己的寄存器环境（register-context），自己的线程本地存储（thread-local-storage）" class="headerlink" title="线程（thread）: 是操作系统能够进行运算调度的最小单元。被包含在进程之中，是进程中的实际运算单位。同一进程中的多条线程将共享该进程中的全部系统资源，如虚拟地址空间，文件描述符和信号处理等等。但同一进程中的多个线程有各自的调用栈（call stack），自己的寄存器环境（register context），自己的线程本地存储（thread-local storage）"></a>线程（thread）: 是操作系统能够进行运算调度的最小单元。被包含在进程之中，是进程中的实际运算单位。同一进程中的多条线程将共享该进程中的全部系统资源，如虚拟地址空间，<a href="https://zh.wikipedia.org/wiki/%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6" title="文件描述符" target="_blank" rel="noopener">文件描述符</a>和<a href="https://zh.wikipedia.org/wiki/%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86" title="信号处理" target="_blank" rel="noopener">信号处理</a>等等。但同一进程中的多个线程有各自的<a href="https://zh.wikipedia.org/wiki/%E8%B0%83%E7%94%A8%E6%A0%88" title="调用栈" target="_blank" rel="noopener">调用栈</a>（call stack），自己的寄存器环境（register context），自己的线程本地存储（thread-local storage）</h3><blockquote>
<p>A thread is an entity within a process that can be scheduled for execution. All threads of a process share its virtual address space and system resources. In addition, each thread maintains exception handlers, a scheduling priority, thread local storage, a unique thread identifier, and a set of structures the system will use to save the thread context until it is scheduled. The thread context includes the thread’s set of machine registers, the kernel stack, a thread environment block, and a user stack in the address space of the thread’s process. Threads can also have their own security context, which can be used for impersonating clients.</p>
</blockquote>
<a id="more"></a>
<p>这里还需要明确两个概念 并行和并发。 </p>
<h3 id="并行concurreny"><a href="#并行concurreny" class="headerlink" title="并行concurreny"></a>并行concurreny</h3><blockquote>
<p>when two or more tasks can start, run, and complete in overlapping time periods. It doesn’t necessarily mean they’ll ever both be running at the same instant. Eg. multitasking on a single-core machine.</p>
</blockquote>
<h3 id="并发parallelism"><a href="#并发parallelism" class="headerlink" title="并发parallelism"></a>并发parallelism</h3><blockquote>
<p>when two or more taks are exceted simultaneously</p>
</blockquote>
<p>这里我们是想要通过多线程 或者 多进程 实现多个任务同时处理，也就是并发</p>
<h2 id="实现多进程"><a href="#实现多进程" class="headerlink" title="实现多进程"></a>实现多进程</h2><h3 id="multiprocessing库"><a href="#multiprocessing库" class="headerlink" title="multiprocessing库"></a>multiprocessing库</h3><p>Doc：<a href="https://docs.python.org/2/library/multiprocessing.html" target="_blank" rel="noopener">https://docs.python.org/2/library/multiprocessing.html</a></p>
<ul>
<li>Process子模块：用于创建进程</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from multiprocessing import Process</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">def run_proc(name):</span><br><span class="line">    print(&quot;Run child process &#123;0&#125;(&#123;1&#125;)&quot;.format(name, os.getpid()))</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    print(&quot;Parent process &#123;0&#125;&quot;.format(os.getpid()))</span><br><span class="line">    p = Process(target=run_proc, args=(&quot;test&quot;, ))</span><br><span class="line">    p.start()</span><br><span class="line">    p.join()</span><br><span class="line">    print(&quot;Child process end.&quot;)</span><br></pre></td></tr></table></figure>
<ul>
<li>Pool子模块:  用于管理进程池</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">from multiprocessing import Pool</span><br><span class="line">import os, time, random</span><br><span class="line"></span><br><span class="line">def task(name):</span><br><span class="line">    print &quot;Run task &#123;0&#125;(&#123;1&#125;)&quot;.format(name, os.getpid())</span><br><span class="line">    start = time.time()</span><br><span class="line">    time.sleep(random.random()*3)</span><br><span class="line">    end = time.time()</span><br><span class="line">    print &quot;Task &#123;0&#125; runs &#123;1&#125; seconds&quot;.format(name, (end-start))</span><br><span class="line"></span><br><span class="line">if __name__==&apos;__main__&apos;:</span><br><span class="line">    print &apos;Parent process &#123;0&#125;&apos;.format(os.getpid())</span><br><span class="line">    p = Pool(3)</span><br><span class="line">    for i in range(5):</span><br><span class="line">        p.apply_async(task, args=(i,))</span><br><span class="line">    print &apos;Waiting for all subprocesses done...&apos;</span><br><span class="line">    p.close()</span><br><span class="line">    p.join()</span><br><span class="line">    print &apos;All subprocesses done.&apos;</span><br></pre></td></tr></table></figure>
<ul>
<li>Queue子模块： 用于进程之间通信</li>
<li>Manager子模块：可用于分布多进程</li>
</ul>
<h2 id="实现多线程"><a href="#实现多线程" class="headerlink" title="实现多线程"></a>实现多线程</h2><h3 id="multiprocessing-dummy库"><a href="#multiprocessing-dummy库" class="headerlink" title="multiprocessing.dummy库"></a>multiprocessing.dummy库</h3><p>Doc: <a href="https://docs.python.org/2/library/multiprocessing.html#module-multiprocessing.dummy" target="_blank" rel="noopener">https://docs.python.org/2/library/multiprocessing.html#module-multiprocessing.dummy</a></p>
<p>用法与multiprocessing基本无异，只是在import的时候加上.dummy即可 </p>
<h3 id="threading库"><a href="#threading库" class="headerlink" title="threading库"></a>threading库</h3><p>Doc:<a href="https://docs.python.org/2/library/threading.html" target="_blank" rel="noopener">https://docs.python.org/2/library/threading.html</a></p>
<p>python自带的多线程模块，可以通过继承threading类，或者使用threading.Thread两种啊是创建多线程</p>
<h3 id="threadpool库"><a href="#threadpool库" class="headerlink" title="threadpool库"></a>threadpool库</h3><p>Doc : <a href="https://chrisarndt.de/projects/threadpool/" target="_blank" rel="noopener">https://chrisarndt.de/projects/threadpool/</a></p>
<p>不过这个已经不维护了, 不推荐使用</p>
<h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><p>由于多线程中所有线程均共享变量，所以线程之间就存在多个线程同时修改一个变量造成未知后果的情况 eg:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import time, threading</span><br><span class="line"></span><br><span class="line"># 假定这是你的银行存款:</span><br><span class="line">balance = 0</span><br><span class="line"></span><br><span class="line">def change_it(n):</span><br><span class="line">    # 先存后取，结果应该为0:</span><br><span class="line">    global balance</span><br><span class="line">    balance = balance + n</span><br><span class="line">    balance = balance - n</span><br><span class="line"></span><br><span class="line">def run_thread(n):</span><br><span class="line">    for i in range(100000):</span><br><span class="line">        change_it(n)</span><br><span class="line"></span><br><span class="line">t1 = threading.Thread(target=run_thread, args=(5,))</span><br><span class="line">t2 = threading.Thread(target=run_thread, args=(8,))</span><br><span class="line">t1.start()</span><br><span class="line">t2.start()</span><br><span class="line">t1.join()</span><br><span class="line">t2.join()</span><br><span class="line">print balance</span><br></pre></td></tr></table></figure>
<p>运行结果会发现，加加减减之后 balance并不等于0了，原因就是两个线程同时修改了balance变量，解决这一问题可以使用<a href="https://docs.python.org/2/library/threading.html#lock-objects" target="_blank" rel="noopener">threading.lock</a></p>
<h3 id="However"><a href="#However" class="headerlink" title="However"></a>However</h3><p>Python解释器在执行代码时，有一个GIL锁（<a href="https://wiki.python.org/moin/GlobalInterpreterLock" target="_blank" rel="noopener">Global Interpreter Lock</a>）, 任何Python线程执行前必须先获得GIL锁，然后，每执行100条字节码，解释器就自动释放GIL锁，让别的线程有机会执行。这个GIL全局锁实际上把所有线程的执行代码都给上了锁，所以，多线程在Python中只能交替执行，即使100个线程跑在100核CPU上，也只能用到1个核。</p>
<p>既然由于GIL的存在，python多线程并不能起到并发的效果，那threading库这些多线程库的存在有什么意义呢？ </p>
<p>对于Network-bound 或者IO-bound类型的程序，python解释器经常在等待来自网络上或用户输入的数据，这个时候多线程就有了用武之地，例如爬虫程序中，每个线程下载一个html页面，而不必等待之前页面下载完毕。</p>
<h2 id="多进程-vs-多线程"><a href="#多进程-vs-多线程" class="headerlink" title="多进程 vs. 多线程"></a>多进程 vs. 多线程</h2><h3 id="多线程-gt-多进程"><a href="#多线程-gt-多进程" class="headerlink" title="多线程 &gt; 多进程:"></a>多线程 &gt; 多进程:</h3><ol>
<li>多进程模式创建进程的代价很大</li>
<li>进程间通信(IPC)比较麻烦</li>
</ol>
<h3 id="多线程-lt-多进程"><a href="#多线程-lt-多进程" class="headerlink" title="多线程 &lt; 多进程"></a>多线程 &lt; 多进程</h3><ol>
<li>多进程稳定性高，一个子进程崩溃 不会影响主进程和其他子进程。 而由于线程共享进程的内存，任何一个线程挂掉都会直接造成整个进程的崩溃</li>
<li>多进程是并发的，而由于GIL的存在，python多进程并不能起到并发的作用</li>
</ol>
<h3 id="IO密集型任务"><a href="#IO密集型任务" class="headerlink" title="IO密集型任务"></a>IO密集型任务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">#coding=utf-8</span><br><span class="line">from multiprocessing import Pool</span><br><span class="line">import threading</span><br><span class="line">import datetime</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">def count_time(func):</span><br><span class="line">    def wrapper(*args, **kwargs):</span><br><span class="line">        start = datetime.datetime.now()</span><br><span class="line">        res = func(*args, **kwargs)</span><br><span class="line">        end = datetime.datetime.now()</span><br><span class="line">        print(&quot;--&gt; &#123;0&#125; s&quot;.format(end - start))</span><br><span class="line">        return res</span><br><span class="line"></span><br><span class="line">    return wrapper</span><br><span class="line"></span><br><span class="line">def task(url):</span><br><span class="line">    try:</span><br><span class="line">        requests.get(url)</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(e)</span><br><span class="line"></span><br><span class="line">@count_time</span><br><span class="line">def single_thread(urls):</span><br><span class="line">    for url in urls:</span><br><span class="line">        task(url)</span><br><span class="line">    </span><br><span class="line">@count_time</span><br><span class="line">def multi_processing(urls):</span><br><span class="line">    p = Pool(10)</span><br><span class="line">    for url in urls:</span><br><span class="line">        p.apply_async(task, args=(url, ))</span><br><span class="line">    p.close()</span><br><span class="line">    p.join()</span><br><span class="line"></span><br><span class="line">@count_time</span><br><span class="line">def multi_thread(urls):</span><br><span class="line">    a = []</span><br><span class="line">    for url in urls:</span><br><span class="line">        t = threading.Thread(target=task, args=(url,))</span><br><span class="line">        a.append(t)</span><br><span class="line">    for i in a:</span><br><span class="line">        i.start()</span><br><span class="line">        i.join()</span><br><span class="line"></span><br><span class="line">def coroutine(urls):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">if __name__==&quot;__main__&quot;:</span><br><span class="line">    # urls = [&quot;http://www.baidu.com&quot;, &quot;http://www.sina.com&quot;] * 100</span><br><span class="line">    urls = []</span><br><span class="line">    for i in range(100):</span><br><span class="line">        urls.append(&quot;http://www.baidu.com/&#123;0&#125;/&quot;.format(i+1))</span><br><span class="line">    print(&quot;single-thread&quot;)</span><br><span class="line">    single_thread(urls)</span><br><span class="line">    print(&quot;multi-processing&quot;)</span><br><span class="line">    multi_processing(urls)</span><br><span class="line">    print(&quot;multi-thread&quot;)</span><br><span class="line">    multi_thread(urls)</span><br></pre></td></tr></table></figure>
<p>运行结果：<br>10次  ：   单线程0.319s，多进程0.248s，多线程0.309s<br>100次：   单线程6.026s，多进程0.955s，多线程5.054s<br>1000次： 单线程30.50s，多进程9.452s，多线程36.53s</p>
<p>如果把task换成time.sleep(1)类似的任务也可以得到类似的结果</p>
<h3 id="CPU密集型任务"><a href="#CPU密集型任务" class="headerlink" title="CPU密集型任务"></a>CPU密集型任务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">#coding=utf-8</span><br><span class="line">from multiprocessing import Pool</span><br><span class="line">import threading</span><br><span class="line">import datetime</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">def count_time(func):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">        计算时间用的decorator</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def wrapper(*args, **kwargs):</span><br><span class="line">        start = datetime.datetime.now()</span><br><span class="line">        res = func(*args, **kwargs)</span><br><span class="line">        end = datetime.datetime.now()</span><br><span class="line">        print(&quot;--&gt; &#123;0&#125; s&quot;.format(end - start))</span><br><span class="line">        return res</span><br><span class="line"></span><br><span class="line">    return wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def task():</span><br><span class="line">    sum(range(10000000))</span><br><span class="line"></span><br><span class="line">@count_time</span><br><span class="line">def single_thread(times):</span><br><span class="line">    for _ in range(times):</span><br><span class="line">        task()</span><br><span class="line">    </span><br><span class="line">@count_time</span><br><span class="line">def multi_processing(times):</span><br><span class="line">    p = Pool(10)</span><br><span class="line">    for _ in range(times):</span><br><span class="line">        p.apply_async(task, args=())</span><br><span class="line">    p.close()</span><br><span class="line">    p.join()</span><br><span class="line"></span><br><span class="line">@count_time</span><br><span class="line">def multi_thread(times):</span><br><span class="line">    a = []</span><br><span class="line">    for _ in range(times):</span><br><span class="line">        t = threading.Thread(target=task, args=())</span><br><span class="line">        a.append(t)</span><br><span class="line">    for i in a:</span><br><span class="line">        i.start()</span><br><span class="line">        i.join()</span><br><span class="line"></span><br><span class="line">def coroutine(urls):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">if __name__==&quot;__main__&quot;:</span><br><span class="line">    times = 100</span><br><span class="line">    print(&quot;single-thread&quot;)</span><br><span class="line">    single_thread(times)</span><br><span class="line">    print(&quot;multi-processing&quot;)</span><br><span class="line">    multi_processing(times)</span><br><span class="line">    print(&quot;multi-thread&quot;)</span><br><span class="line">    multi_thread(times)</span><br></pre></td></tr></table></figure>
<p>运行结果：<br>10次  ：   单线程11.7s，多进程6.74s，多线程11.16s<br>100次：   单线程124s，多进程60s，多线程117s<br>1000次： 单线程9m49s，多进程4m15s，多线程9m21s</p>
<p>可见一些博主做的比较 <a href="https://nathangrigg.com/images/2015/futures.html" target="_blank" rel="noopener">processing &amp; thread</a></p>
<p>So， 对于IO密集型的程序，多线程是更优选择，对于计算密集型的程序，多进程是更优选择</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://thief.one/2017/02/17/Python%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%B8%A1%E5%B9%B4%E4%B8%8D%E9%B8%A1%E8%82%8B/" target="_blank" rel="noopener">python多线程鸡年不鸡肋</a></li>
<li><a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431927781401bb47ccf187b24c3b955157bb12c5882d000" target="_blank" rel="noopener">廖雪峰的官方网站</a></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Binary Tree Traversal]]></title>
      <url>/2017/10/22/LeetCode/BinaryTreeTraversal/</url>
      <content type="html"><![CDATA[<h2 id="有关二叉树的遍历"><a href="#有关二叉树的遍历" class="headerlink" title="有关二叉树的遍历"></a>有关二叉树的遍历</h2><p>二叉树的常用遍历有: 前序遍历，中序遍历，后序遍历和层次遍历。</p>
<a id="more"></a>
<blockquote>
<p>以下代码中TreeNode的定义为<br>class TreeNode:<br>    def <strong>init</strong>(self,val):<br>        self.val = val<br>        self.left, self.right = None,None</p>
</blockquote>
<h2 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h2><p>前序遍历即先访问当前节点本身，再访问它的左子树，最后访问右子树</p>
<p>LintCode题目：<a href="http://lintcode.com/problem/binary-tree-preorder-traversal" target="_blank" rel="noopener">http://lintcode.com/problem/binary-tree-preorder-traversal</a></p>
<h3 id="递归实现："><a href="#递归实现：" class="headerlink" title="递归实现："></a>递归实现：</h3><p>三种遍历的递归实现都类似</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 36 ms</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">preorderTraversal</span><span class="params">(root)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> root <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    <span class="keyword">return</span> [root.val] + preorderTraversal(root.left) + preorderTraversal(root.right)</span><br></pre></td></tr></table></figure>
<h3 id="非递归方法实现："><a href="#非递归方法实现：" class="headerlink" title="非递归方法实现："></a>非递归方法实现：</h3><p>(上述递归算法属于尾递归，很容易转变成非递归方法)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 35 ms</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">preorderTraversal</span><span class="params">(root)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> root <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    ans = []</span><br><span class="line">    stack = [root] <span class="comment"># 在py中用list来代替stack</span></span><br><span class="line">    <span class="keyword">while</span>(stack!=[]):</span><br><span class="line">        x = stack.pop()</span><br><span class="line">        ans.append(x.val)</span><br><span class="line">        <span class="keyword">if</span> x.right</span><br><span class="line">            stack.append(x.right)</span><br><span class="line">        <span class="keyword">if</span> x.left:</span><br><span class="line">            stack.append(x.left)</span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure></p>
<h2 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h2><p>中序遍历即先访问当前节点的左子树，再访问当前节点本身，最后访问右子树<br>LintCode题目：<a href="http://lintcode.com/zh-cn/problem/binary-tree-inorder-traversal/" target="_blank" rel="noopener">http://lintcode.com/zh-cn/problem/binary-tree-inorder-traversal/</a><br>官方solution: <a href="https://leetcode.com/problems/binary-tree-inorder-traversal/solution/" target="_blank" rel="noopener">https://leetcode.com/problems/binary-tree-inorder-traversal/solution/</a></p>
<h3 id="非递归实现"><a href="#非递归实现" class="headerlink" title="非递归实现"></a>非递归实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 39 ms</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inorderTraversal</span><span class="params">(root)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> root <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    ans = []</span><br><span class="line">    stack = []</span><br><span class="line">    x = root</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">True</span>):</span><br><span class="line">        goAlongLeftBranch(x, stack)</span><br><span class="line">        <span class="keyword">if</span> stack == []:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        ans.append(stack.pop().val)</span><br><span class="line">        x = stack.pop()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">goAlongLeftBranch</span><span class="params">(x ,stack)</span>:</span></span><br><span class="line">    <span class="keyword">while</span>(x):</span><br><span class="line">        <span class="comment"># if x.right: 不判断也无妨</span></span><br><span class="line">        stack.append(x.right)</span><br><span class="line">        stack.append(x)</span><br><span class="line">        x = x.left</span><br></pre></td></tr></table></figure>
<h2 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h2><p>后续遍历先访问左子树，再访问右子树，最后访问当前节点<br>这里可以考虑到后序遍历和前序遍历的关系，前序遍历是 中-左-右，而后序遍历是 左-右-中。所以可以修改前序遍历代码中的left和right，最后返回ans[::-1]即可<br>LintCode题目 <a href="http://lintcode.com/zh-cn/problem/binary-tree-postorder-traversal/" target="_blank" rel="noopener">http://lintcode.com/zh-cn/problem/binary-tree-postorder-traversal/</a></p>
<h3 id="非递归实现-1"><a href="#非递归实现-1" class="headerlink" title="非递归实现"></a>非递归实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">postorderTraversal</span><span class="params">(root)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> root <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    ans = []</span><br><span class="line">    stack = [root] </span><br><span class="line">    <span class="keyword">while</span>(stack!=[]):</span><br><span class="line">        x = stack.pop()</span><br><span class="line">        ans.append(x.val)</span><br><span class="line">        <span class="keyword">if</span> x.left</span><br><span class="line">            stack.append(x.left)</span><br><span class="line">        <span class="keyword">if</span> x.right:</span><br><span class="line">            stack.append(x.right)</span><br><span class="line">    <span class="keyword">return</span> ans[::<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>
<h3 id="通用框架"><a href="#通用框架" class="headerlink" title="通用框架"></a>通用框架</h3><p>在Leetcode(<a href="https://discuss.leetcode.com/topic/30632/preorder-inorder-and-postorder-iteratively-summarization" target="_blank" rel="noopener">https://discuss.leetcode.com/topic/30632/preorder-inorder-and-postorder-iteratively-summarization</a><br>)上看到一个很简洁的算法，简单修改就可以适合与这三种遍历， 特此摘抄下来<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 32ms</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">preorderTraversal</span><span class="params">(root)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> root <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    ans = []</span><br><span class="line">    stack = []</span><br><span class="line">    x = root</span><br><span class="line">    <span class="keyword">while</span>(stack!=[] <span class="keyword">or</span> x!=<span class="keyword">None</span>):</span><br><span class="line">        <span class="comment"># 不断向左,把沿途结点都入栈之后顺便访问，遇到None之后，出栈&amp;右转</span></span><br><span class="line">        <span class="keyword">if</span>(x):</span><br><span class="line">            ans.append(x.val) <span class="comment"># add before going to children</span></span><br><span class="line">            stack.append(x)</span><br><span class="line">            x = x.left</span><br><span class="line">        <span class="keyword">else</span>: </span><br><span class="line">            x = stack.pop()</span><br><span class="line">            x = x.right</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"><span class="comment"># 29 ms</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inorderTraversal</span><span class="params">(root)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> root <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    ans = []</span><br><span class="line">    stack = []</span><br><span class="line">    x = root</span><br><span class="line">    <span class="keyword">while</span>(stack!=[] <span class="keyword">or</span> x!=<span class="keyword">None</span>):</span><br><span class="line">        <span class="comment"># 不断向左，把沿途的结点都入栈，遇到None, 出栈&amp;访问尽头的结点，再出栈&amp;右转</span></span><br><span class="line">        <span class="keyword">if</span>(x):</span><br><span class="line">            stack.append(x)</span><br><span class="line">            x = x.left</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            x = stack.pop()</span><br><span class="line">            ans.append(x.val) <span class="comment">#  add after all left children</span></span><br><span class="line">            x = x.right</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">postorderTravel</span><span class="params">(root)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span> <span class="comment"># 可根据pre-order修改得到</span></span><br></pre></td></tr></table></figure></p>
<h2 id="层次遍历"><a href="#层次遍历" class="headerlink" title="层次遍历"></a>层次遍历</h2><p>层次遍历即一层一层的遍历，有很多变体<br><a href="https://lintcode.com/problem/binary-tree-level-order-traversal" target="_blank" rel="noopener">https://lintcode.com/problem/binary-tree-level-order-traversal</a><br><a href="http://lintcode.com/zh-cn/problem/binary-tree-zigzag-level-order-traversal/" target="_blank" rel="noopener">http://lintcode.com/zh-cn/problem/binary-tree-zigzag-level-order-traversal/</a></p>
<h3 id="代码实现-用level和pre-level"><a href="#代码实现-用level和pre-level" class="headerlink" title="代码实现(用level和pre_level)"></a>代码实现(用level和pre_level)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 49 ms</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">levelOrder</span><span class="params">(self, root)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> root <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    ans = [[root.val]]</span><br><span class="line">    pre_level = [root] <span class="comment"># pre_level是上一层的结点list</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">True</span>):</span><br><span class="line">        level = [] <span class="comment"># level是当前层的结点list</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> pre_level:</span><br><span class="line">            <span class="keyword">if</span> item.left:</span><br><span class="line">                level.append(item.left)</span><br><span class="line">            <span class="keyword">if</span> item.right:</span><br><span class="line">                level.append(item.right)</span><br><span class="line">         <span class="keyword">if</span> level == []:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        pre_level = level</span><br><span class="line">        ans.append([i.val <span class="keyword">for</span> i <span class="keyword">in</span> level])</span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>
<h3 id="代码实现-用queue"><a href="#代码实现-用queue" class="headerlink" title="代码实现(用queue)"></a>代码实现(用queue)</h3><p>因为该层次遍历是先进后出的方式，所以可以使用queue<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 59 ms</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">levelOrder</span><span class="params">(self,root)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> root <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    queue = [root]</span><br><span class="line">    ans = []</span><br><span class="line">    <span class="keyword">while</span>(queue != []):</span><br><span class="line">        level = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(queue)):</span><br><span class="line">            <span class="keyword">if</span> queue[<span class="number">0</span>].left:</span><br><span class="line">                queue.append(queue[<span class="number">0</span>].left)</span><br><span class="line">            <span class="keyword">if</span> queue[<span class="number">0</span>].right:</span><br><span class="line">                queue.append(queue[<span class="number">0</span>].right)</span><br><span class="line">            level.append( queue.pop(<span class="number">0</span>).val )</span><br><span class="line">        ans.append(level)</span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure></p>
<h2 id="More"><a href="#More" class="headerlink" title="More"></a>More</h2><p>还有更多的问题 <a href="https://leetcode.com/problemset/all/?search=traversal" target="_blank" rel="noopener">https://leetcode.com/problemset/all/?search=traversal</a></p>
]]></content>
      
        <categories>
            
            <category> 厚积薄发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Tree </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python深拷贝浅拷贝]]></title>
      <url>/2017/10/22/Python/Python%E6%B7%B1%E6%8B%B7%E8%B4%9D%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
      <content type="html"><![CDATA[<h2 id="Python中的深拷贝与浅拷贝"><a href="#Python中的深拷贝与浅拷贝" class="headerlink" title="Python中的深拷贝与浅拷贝"></a>Python中的深拷贝与浅拷贝</h2><a id="more"></a>
<blockquote>
<p>深拷贝: 对对象资源的拷贝 ； 浅拷贝：对引用的拷贝</p>
<h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2></blockquote>
<h3 id="修改不可变对象-string-tuple-需要开辟新的空间"><a href="#修改不可变对象-string-tuple-需要开辟新的空间" class="headerlink" title="修改不可变对象(string, tuple)需要开辟新的空间"></a>修改不可变对象(string, tuple)需要开辟新的空间</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;a=<span class="string">"hello"</span></span><br><span class="line">&gt;&gt;&gt;id(a)</span><br><span class="line"><span class="number">74243288L</span></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;a=<span class="string">"world"</span></span><br><span class="line">&gt;&gt;&gt;id(a)</span><br><span class="line"><span class="number">101377648L</span></span><br></pre></td></tr></table></figure>
<h3 id="修改可变对象-list等-不需要开辟新空间"><a href="#修改可变对象-list等-不需要开辟新空间" class="headerlink" title="修改可变对象(list等) 不需要开辟新空间"></a>修改可变对象(list等) 不需要开辟新空间</h3><p>当对数组进行赋值的时候 b = a[:] 仅仅复制了容器中元素的地址,也就是说</p>
<p>如果a中元素是不可变元素的话，对a中元素的修改<strong>不会</strong>影响到b</p>
<p>如果a中的元素是可变元素的话，对a中元素的修改<strong>会</strong>影响到b</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">&gt;&gt;&gt;b=a[:]</span><br><span class="line">&gt;&gt;&gt;id(a),id(b)</span><br><span class="line">(<span class="number">101391816L</span>, <span class="number">74828616L</span>)</span><br><span class="line">&gt;&gt;&gt;[id(x) <span class="keyword">for</span> x <span class="keyword">in</span> a]</span><br><span class="line">[<span class="number">38560888L</span>, <span class="number">38560864L</span>, <span class="number">38560840L</span>]</span><br><span class="line">&gt;&gt;&gt;[id(x) <span class="keyword">for</span> x <span class="keyword">in</span> b]</span><br><span class="line">[<span class="number">38560888L</span>, <span class="number">38560864L</span>, <span class="number">38560840L</span>]</span><br><span class="line">&gt;&gt;&gt;a[<span class="number">0</span>]=<span class="number">0</span></span><br><span class="line">&gt;&gt;&gt;<span class="keyword">print</span> a</span><br><span class="line">[<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">&gt;&gt;&gt;<span class="keyword">print</span> b</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">## case 2</span></span><br><span class="line">&gt;&gt;&gt;a=[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]]</span><br><span class="line">&gt;&gt;&gt;b=a[:]</span><br><span class="line">&gt;&gt;&gt;a[<span class="number">0</span>].append(<span class="number">4</span>)</span><br><span class="line">&gt;&gt;&gt;<span class="keyword">print</span> a</span><br><span class="line">[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]]</span><br><span class="line">&gt;&gt;&gt;<span class="keyword">print</span> b</span><br><span class="line">[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]]</span><br></pre></td></tr></table></figure>
<p>从上述例子可以看出，未修改之前a和b中元素的地址相同，修改a中不可变元素的时候，元素地址发生了变化，而b中仍是原来的地址，故b仍与变化前的a相同。而修改a中可变元素的时候，该元素在原来的地址上发生变化，b也随之变化。</p>
<h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><p>完全拷贝了一个副本，容器内部元素地址都不一样<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## case1 修改其中不可变元素时，结果与浅拷贝一样</span></span><br><span class="line">&gt;&gt;&gt;<span class="keyword">from</span> copy <span class="keyword">import</span> deepcopy</span><br><span class="line">&gt;&gt;&gt;a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">&gt;&gt;&gt;b=deepcopy(a)</span><br><span class="line">&gt;&gt;&gt;[id(x) <span class="keyword">for</span> x <span class="keyword">in</span> a]</span><br><span class="line">[<span class="number">38560888L</span>, <span class="number">38560864L</span>, <span class="number">38560840L</span>]</span><br><span class="line">&gt;&gt;&gt;[id(x) <span class="keyword">for</span> x <span class="keyword">in</span> b]</span><br><span class="line">[<span class="number">38560888L</span>, <span class="number">38560864L</span>, <span class="number">38560840L</span>]</span><br><span class="line">&gt;&gt;&gt;a[<span class="number">0</span>]=<span class="number">0</span></span><br><span class="line">&gt;&gt;&gt;<span class="keyword">print</span> a</span><br><span class="line">[<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">&gt;&gt;&gt;<span class="keyword">print</span> b</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">## case 2</span></span><br><span class="line">&gt;&gt;&gt;a=[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]]</span><br><span class="line">&gt;&gt;&gt;b=deepcopy(a)</span><br><span class="line">&gt;&gt;&gt;[id(x) <span class="keyword">for</span> x <span class="keyword">in</span> a]</span><br><span class="line">[<span class="number">74725064L</span>]</span><br><span class="line">&gt;&gt;&gt;[id(x) <span class="keyword">for</span> x <span class="keyword">in</span> b]</span><br><span class="line">[<span class="number">101137544L</span>]</span><br><span class="line">&gt;&gt;&gt;a[<span class="number">0</span>].append(<span class="number">4</span>)</span><br><span class="line">&gt;&gt;&gt;<span class="keyword">print</span> a</span><br><span class="line">[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]]</span><br><span class="line">&gt;&gt;&gt;<span class="keyword">print</span> b</span><br><span class="line">[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]]</span><br></pre></td></tr></table></figure></p>
<p>从这里可以看出，b是一个完全的副本，元素地址与a均不相同，a修改不影响b</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>深拷贝和浅拷贝，对不可变变量效果无异，因为修改不可变变量对象相当于修改了元素地址。而对于可变变量(list)，深拷贝浅拷贝的差异就体现出来了，浅拷贝只复制了元素地址，即<strong>新的容器指向了旧的元素</strong>，而深拷贝是新开辟了地址，其值与旧元素的相同，<strong>新的容器指向了新的元素</strong>.</p>
]]></content>
      
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[List,Dict,Set]]></title>
      <url>/2017/07/01/Python/List,Dict,Tuple/</url>
      <content type="html"><![CDATA[<p>读python源码剖析,认识List Dict Set是如何实现的</p>
<a id="more"></a>
<h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p>python中的list对象可以有效的支持元素的插入添加和删除，它与C++中的STL的vector是类似的。首先来看一下PyListObject的定义</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">  PyObject_VAR_HEAD</span><br><span class="line">  PyObject **ob_item; <span class="comment">//指向元素列表的指针</span></span><br><span class="line">  <span class="keyword">int</span> allocated;</span><br><span class="line">&#125;PyListObject;</span><br></pre></td></tr></table></figure>
<p>在Pyobject_VAR_HEAD中有一个ob_size,它和allocated的关系是什么？</p>
<p>这两个变量和PyListObject对象的内存管理有关，她并不是存了多少东西就申请对应大小的内存，每次需要申请内存的时候PyListObject总会申请一大块内存，这时候申请的总内存的大小记录在allocated中，而实际使用的内存数量记录在ob_size中</p>
<blockquote>
<p>这里ob_size和allocated的关系就像C++中vector的size和capacity的关系</p>
</blockquote>
<h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><p>Python提供了唯一的途径PyList_New来创建列表</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">PyObject * <span class="title">PyList_New</span><span class="params">(<span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">  PyListObject *op;</span><br><span class="line">  <span class="keyword">size_t</span> nbytes;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//内存数量计算，溢出检查</span></span><br><span class="line">  nbytes = size * <span class="keyword">sizeof</span>(PyObject*);</span><br><span class="line">  <span class="keyword">if</span>(nbytes/<span class="keyword">sizeof</span>(PyObject *) != (<span class="keyword">size_t</span>)size)</span><br><span class="line">    <span class="keyword">return</span> PyErr_NoMemory();</span><br><span class="line">	</span><br><span class="line">  <span class="comment">//为PyListObject对象申请空间</span></span><br><span class="line">  <span class="keyword">if</span>(num_free_lists)&#123; <span class="comment">//缓冲池可用</span></span><br><span class="line">    num_free_lists--;</span><br><span class="line">    op = free_lists[num_free_lists];</span><br><span class="line">    _Py_NewReference((PyObject *)op);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123; <span class="comment">//缓冲池不可用</span></span><br><span class="line">    op = PyObject_GC_New(PyListObject, &amp; PyList_Type);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//为PyListObject对象中维护的元素列表申请空间</span></span><br><span class="line">  <span class="keyword">if</span>(size&lt;=<span class="number">0</span>)</span><br><span class="line">    op-&gt;ob_item = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    op-&gt;ob.item = (PyObject **)PyMem_MALLOC(nbytes);</span><br><span class="line">    <span class="built_in">memset</span>(op-&gt;op_item,<span class="number">0</span>,nbytes);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  op-&gt;ob_size = size;</span><br><span class="line">  op-&gt;allocated = size;</span><br><span class="line">  <span class="keyword">return</span> (PyObject *)op;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="设置元素"><a href="#设置元素" class="headerlink" title="设置元素"></a>设置元素</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">PyList_SetItem</span><span class="params">(<span class="keyword">register</span> PyObject *op, <span class="keyword">register</span> <span class="keyword">int</span> i, <span class="keyword">register</span> PyObject *newitem)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">register</span> PyObject *olditem;</span><br><span class="line">  <span class="keyword">register</span> PyObject ** p;</span><br><span class="line">  </span><br><span class="line"> <span class="comment">//检查索引</span></span><br><span class="line">  <span class="keyword">if</span>(i&lt;<span class="number">0</span> ||i &gt;= (PyListObject*)op)-&gt;ob_size )&#123;</span><br><span class="line">    PyErr_SetString(PyExc_indexError,<span class="string">"list assignment index out of range"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//设置元素</span></span><br><span class="line">  p = ((PyListObject *)op) -&gt; ob_item + i;</span><br><span class="line">  olditem = *p;</span><br><span class="line">  *p =  newitem;</span><br><span class="line">  Py_XDECRTF(olditem);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="插入元素"><a href="#插入元素" class="headerlink" title="插入元素"></a>插入元素</h3><p>设置元素和插入元素动作是不同的，设置元素不会导致ob_item指向的内存发生变化，而插入元素的动作则很有可能使得ob_item指向的内存发生变化。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">PyList_Insert</span><span class="params">(PyObject *op, Py_ssize_t where, PyObject *newitem</span></span></span><br><span class="line"><span class="function"><span class="params">&#123;</span></span></span><br><span class="line"><span class="function"><span class="params"> 	....<span class="comment">//类型检查</span></span></span></span><br><span class="line">  return ins1((PyListObject *)op, where, newitem);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ins1</span><span class="params">(PyListObject *self, Py_ssize_t where, PyObject *v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Py_ssize_t i, n=self-&gt;ob.size;</span><br><span class="line">  PyObject **items;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//调整列表容量</span></span><br><span class="line">  <span class="keyword">if</span>(list_resize(self,n+<span class="number">1</span>) == <span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  <span class="comment">//确定插入点</span></span><br><span class="line">  <span class="keyword">if</span>(where &lt; <span class="number">0</span>)&#123;</span><br><span class="line">    where += n;</span><br><span class="line">    <span class="keyword">if</span>(where &lt; <span class="number">0</span>)</span><br><span class="line">      where=<span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(where &gt;n)</span><br><span class="line">    where = n;</span><br><span class="line">  </span><br><span class="line">  items = self-&gt;ob_item;</span><br><span class="line">  <span class="keyword">for</span>(i = n; --i&gt; where;)</span><br><span class="line">	items[i+<span class="number">1</span>]=item[i];</span><br><span class="line">	Py_INCREF(v);</span><br><span class="line">  items[where]=v;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过list_resize来调整PyListObject对象所维护的列表的内存时，Python分两种情况处理：</p>
<ol>
<li><code>newsize&lt;allocated &amp;&amp; newsize&gt;allocated/2</code> : 简单调整ob_size的值</li>
<li>其他情况，调用realloc重新分配空间</li>
</ol>
<p>还有另一种广泛使用的插入操作append，它与insert操作很类似，类型检查等操作之后通过 <code>PyList_SET_ITEM(self,n,v)</code>来把要添加的元素放在第ob_size+1位置上</p>
<h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><p>当python执行list.remove(3)时，PyListObject中的listremove操作会被激活</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> PyObject * <span class="title">listremove</span><span class="params">(PyListObject *self, PyObject *v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;self-&gt;ob_size;i++)&#123;</span><br><span class="line">    <span class="keyword">int</span> cmp = PyObjct_RichCompareBool(self-&gt;ob.item[i],v,Py_EQ);</span><br><span class="line">    <span class="keyword">if</span>(cmp&gt;<span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span>(list_ass_slice(self,i,i+<span class="number">1</span>,(PyObject *)<span class="literal">NULL</span>)==<span class="number">0</span>)</span><br><span class="line">        Py_RETURN_NONE;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">NULL</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(cmp&lt;<span class="number">0</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  PyErr_SetString(PyExc_ValueError, <span class="string">"list.remove(x):x not in list"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">NULL</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Python会对整个列表进行遍历，将待删除的元素与list中每个元素意义比较，如果发现匹配的元素就调用list_ass_slice删除该元素</p>
<p>函数原型为</p>
<p><code>int list_ass_slice(PyListObject *a,Py_ssize_t ilow,Py_ssize_t ihigh,pyObject *v)</code> </p>
<p>它并不是一个专用与删除操作的函数，完整功能是：</p>
<ol>
<li>a[ilow:ihigh] = v if v !=NULL.</li>
<li>del a[ilow:ihigh] if v == NULL</li>
</ol>
<p>当执行lst[1:3]=[‘a’,’b’]时，Python内部就调用了该函数。 在list_ass_slice中当进行元素删除工作时，实际上是通过memmove简单搬移内存来实现的，这意味着当调用list的remove操作删除元素时，一定会触发内存搬移的动作。</p>
<h3 id="PyListObject对象缓冲池"><a href="#PyListObject对象缓冲池" class="headerlink" title="PyListObject对象缓冲池"></a>PyListObject对象缓冲池</h3><p>之前在创建list对象时候用到了free_lists缓冲池，那这个缓冲池是从哪里获得的呢？答案就是在PyListObject被销毁的过程中</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">list_dealloc</span><span class="params">(PyListObject *op)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  <span class="comment">//销毁PyListObject对象维护的元素列表</span></span><br><span class="line">  <span class="keyword">if</span>(op-ob_item!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">    i = op-&gt;ob_size;</span><br><span class="line">    <span class="keyword">while</span>(--i&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">      Py_XDECREF(op-&gt;ob_item[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    PyMem_FREE(op-&gt;ob_item);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//释放PyListObject自身内存</span></span><br><span class="line">  <span class="keyword">if</span>(num_free_lists&lt;MAXFREELISTS &amp;&amp; PYLIST_CheckExact(op))</span><br><span class="line">    free_lists[num_free_lists++] = op;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    op-&gt;ob_type-&gt;tp_free((PyObkect*)op);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在创建List的时候我们分为两步，首先创建PyListObject对象，然后创建对象所维护的元素列表ob_item，与之对应在销毁的时候先销毁ob_item再销毁PyListObject对象。 而在释放自身内存的时候，python会先查看缓冲池free_lists是否已经满了，如果没有就把待删除的PyListObject对象放到缓冲池中以备后用。</p>
<p>在Python下次创建新的list时候，这个PyListObject·对象会被重新唤醒，重新分配PyObject*元素列表占用的内存。</p>
<h2 id="Dict"><a href="#Dict" class="headerlink" title="Dict"></a>Dict</h2><p>PyDictObject没有像C++的STL中的map一样使用平衡二元树，而是采用了散列表（hash table），在最优情况下散列表能提供O(1)复杂度的搜索效率。用于映射的函数成为散列函数（hash function），而映射后的值成为元素的散列值（hash value）在散列表的实现中，所选择的散列函数的优劣将直接决定所实现的散列表的搜索效率的高低。</p>
<p>在使用三列表的过程中，不同对象经过连列函数的作用可能映射为相同的散列值，而且随着所需要存储的数据的增多，这样的冲突就会发生的越来越频繁。散列冲突是散列技术与生俱来的问题。这里需要用到<strong>装载率</strong>的概念，装载率是散列表中已经使用的空间和总空间的比值。研究表明当散列表的装载率大于2/3时，散列冲突发生的几率会大大增加。 Python中采用开放定址法来解决散列冲突的问题。</p>
<p>关联容器的entry，我们把关联容器中的一个（键，值）元素称为一个entry，在Python中entry的定义如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">  Py_ssize_t me_hash;</span><br><span class="line">  PyObject *me_key;</span><br><span class="line">  PyObject *me_value;</span><br><span class="line">&#125;PyDictEntry;</span><br></pre></td></tr></table></figure>
<p>me_hash域存放的是me_key的散列值，利用一个域来记录这个散列值可以避免每次查询的时候都重新计算一遍散列值。</p>
<p>entry一共有三种状态ununsed ，active，dummy</p>
<ul>
<li>Unused态：me_key和me_value都是NULL</li>
<li>Active态：entry中存储了一个（key，value）对</li>
<li>dummy态：当entry中存储的（key，value）被删除后，不能直接从active转为unused态，否则会导致冲突探测链的中断。相反，entry中的me_key指向dummy对象，可以实现“伪删除”技术</li>
</ul>
<h3 id="关联容器的实现"><a href="#关联容器的实现" class="headerlink" title="关联容器的实现"></a>关联容器的实现</h3><p>在Python中关联容器是通过PyDictObject对象来实现的。而一个PyDictObject对象实际上是一大堆entry的集合</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PyDict_MINSIZE 8</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">dictobject</span> <span class="title">PyDictObject</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">dictobject</span>&#123;</span></span><br><span class="line">  PyObject_HEAD</span><br><span class="line">  Py_ssize_t ma_fill; <span class="comment">//元素个数 active+dummy</span></span><br><span class="line">  Py_ssize_t ma_used; <span class="comment">//元素个数 active</span></span><br><span class="line">  Py_ssize_t ma_mask; <span class="comment">//记录了PyDictObject对象所拥有的所有entry数量</span></span><br><span class="line">  PyDictEntry *ma_table;</span><br><span class="line">  PyDictEntry *(*ma_lookup)(PyDictObject *mp, PyObject *key, <span class="keyword">long</span> hash);</span><br><span class="line">  PyDictEntry ma_smalltable[PyDict_MINSIZE];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在定义的最后有一个给ma_smalltable的PyDictObject数组，这个数组意味着当创建一个PyDictObject对象时至少有PyDict_MINSIZE个entry被创建，这个值在dictobject.h中被设定为8，是通过大量实验得出的最佳值。而ma_table是关联对象的关键所在，他指向一个PyDictEntry集合的开始位置。当entry数小于8时，ma_table指向ma_smalltable.当entry数超过8时，Python会认为这是个大dict，将会申请额外的内存空间并将ma_table指向它。</p>
<h3 id="PyDictObject对象的创建"><a href="#PyDictObject对象的创建" class="headerlink" title="PyDictObject对象的创建"></a>PyDictObject对象的创建</h3><p>Python内部通过PyDict_New来创建一个新的Dict对象</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> PyDictEntry dictentry</span><br><span class="line"><span class="keyword">typedef</span> PyDictObject dictobject</span><br><span class="line"><span class="comment">// 将ma_table指向smalltable</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INIT_NONZERO_DICT_SLOTS(mp) do&#123;    \</span></span><br><span class="line">	(mp)-&gt;ma_table = (mp)-&gt;ma_smalltable;  \</span><br><span class="line">    (mp)-&gt;ma_mask = PyDict_MINSIZE<span class="number">-1</span>;      \</span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="number">0</span>)</span><br><span class="line"><span class="comment">// 将ma_smalltable清零，设置ma_size和ma_fill</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ENPTY_TO_MINSIZE(mp) do&#123;</span></span><br><span class="line">	<span class="built_in">memset</span>((mp)-&gt;ma_smalltable, <span class="number">0</span> ,<span class="keyword">sizeof</span>((mp)-&gt;ma_smalltable)); \</span><br><span class="line">    (mp)-&gt;ma_used = (mp)-&gt;ma_fill = <span class="number">0</span>;  \</span><br><span class="line">    INIT_NONZERO_DICT_SLOTS(mp);</span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function">PyObject* <span class="title">PyDict_New</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">	<span class="keyword">register</span> dictobject *mp;</span><br><span class="line">    <span class="comment">//自动创建dummy对象</span></span><br><span class="line">    <span class="keyword">if</span>(dummy == <span class="literal">NULL</span>)&#123;</span><br><span class="line">    	dummy = PyString_FromString(*&lt;dummy key&gt;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(num_free_dicts)&#123;</span><br><span class="line">    <span class="comment">//使用缓冲池</span></span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">    	<span class="comment">//创建PyDictObject对象</span></span><br><span class="line">        mp = PyObject_GC_NEW(dictobject, &amp;PyDict_Type);</span><br><span class="line">        EMPTY_TO_MINSIZE(mp);</span><br><span class="line">    &#125;</span><br><span class="line">    mp-&gt;ma_lookup = lookdict_string;</span><br><span class="line">    <span class="keyword">return</span> (PyObject*) mp;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从该定义可以看出dummy是一个PyStirngObject对象，它仅仅作为一个指示该entry被使用过的标志。ma_lookup制定了PyDictObject在entry集合中搜索某一个特定entry时需要进行的动作，其中包含了散列函数和发生二次冲突时探测函数的具体实现。</p>
<h3 id="Dict元素搜索"><a href="#Dict元素搜索" class="headerlink" title="Dict元素搜索"></a>Dict元素搜索</h3><p>Python提供两种搜索策略，一个是lookdict，一个是lookdict_string，因为使用string做键比较常用且重要，所以lookdict_string就陈伟给了默认采用的搜索策略略</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> dictentry* <span class="title">lookdict</span><span class="params">(dictobject *mp , PyObject *key, <span class="keyword">register</span> <span class="keyword">long</span> hash)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">register</span> <span class="keyword">size_t</span> i;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">size_t</span> perturb;</span><br><span class="line">    <span class="keyword">register</span> dictentry *freeslot;</span><br><span class="line">    dictentry *ep0 = mp-&gt;ma_table;</span><br><span class="line">    <span class="keyword">register</span> dictentry *ep;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//散列，定位冲突探测连的第一个entry</span></span><br><span class="line">    i = hash &amp; mask;</span><br><span class="line">    ep = &amp;ep0·[i];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//entry处于unused或entry中的key与带搜索的key匹配</span></span><br><span class="line">    <span class="keyword">if</span>（ep-&gt;me_key ==<span class="literal">NULL</span> || ep-&gt;me_key == key）</span><br><span class="line">    	<span class="keyword">return</span> ep;</span><br><span class="line">     </span><br><span class="line">     <span class="comment">//entry处于dummy态，设置freeslot</span></span><br><span class="line">     <span class="keyword">if</span>(ep-&gt;me_key == dummy)</span><br><span class="line">     	freeslot = ep;</span><br><span class="line">     <span class="keyword">else</span>&#123;</span><br><span class="line">     	<span class="comment">//检查active态entry</span></span><br><span class="line">        <span class="keyword">if</span>(ep-&gt;me_hash == hash)</span><br><span class="line">        &#123;</span><br><span class="line">     		startkey = ep-&gt;me_key;</span><br><span class="line">            cmp = PyObject_RichCompareBool(startkey,key,Py_EQ);</span><br><span class="line">            <span class="keyword">if</span>(cmp &gt; <span class="number">0</span>)</span><br><span class="line">            	<span class="keyword">return</span> ep;</span><br><span class="line">        &#125;</span><br><span class="line">        freeslot = <span class="literal">NULL</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里只列出了python对冲突链上的第一个entry进行的操作。PyDictObject中维护的entry是有限的，但是传入参数的key的hash值却不一定在这个范围内，这就要求lookdict将hash映射到某个entry上。python 采取的策略直接把hash值和mask做与操作。（这也是为什么这个变量命名微ma_mask而不是ma_size）</p>
<p>freeslot变量的作用是：如果探测连中某个位置上entry属于Dummy态，那么如果在这个序列搜索不成功，就会返回这个处于dummy态的entry，这是一个me_value为NULL，可以立即被使用的entry。</p>
<p>在Dict中相同这个概念包含两层含义 1.引用相同（两个符号引用的是内存同一个地址，这个由ep-&gt;me_key==key完成） 2.值相同（是说两个PyObject×指向了不同的内存地址的对象，但这两个对象的值相同，这个由ep-&gt;me_hash == hash + RichCompare联合完成）</p>
<ol>
<li>根据hash值获得entry索引，这是冲突探测连上第一个entry的索引</li>
<li>在两种情况下搜索结束：<ol>
<li>entry处于unsued态，搜索失败</li>
<li>e-&gt;me_key == key 表明entry的key与带搜索的key匹配，搜索成功</li>
</ol>
</li>
<li>若当前entyr处于dummy态，设置freeslot</li>
<li>检查active态entry中的key与待查找的key是否“值相同”，若成立搜索成功 </li>
</ol>
<p>如果冲突探测连上第一个entry的key与待查找的key不匹配，那么很自然的lookdict会沿着探测连一次比较<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">   <span class="comment">//便利冲突链，检查每一个entry</span></span><br><span class="line"><span class="keyword">for</span>(perturb = hash ;; perturb &gt;&gt;= PERTURB_SHIFT)&#123;</span><br><span class="line">   	<span class="comment">//寻找下一个entry</span></span><br><span class="line">       i = (i&lt;&lt;<span class="number">2</span>) + i +perturb +<span class="number">1</span>;</span><br><span class="line">       ep = &amp;ep0[i &amp; mask];</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//到达unused态的entry 搜索失败</span></span><br><span class="line">       <span class="keyword">if</span>(ep-&gt;me_key == <span class="literal">NULL</span>)</span><br><span class="line">       	<span class="keyword">return</span> freeslot = <span class="literal">NULL</span>? ep :freeslot</span><br><span class="line">       <span class="comment">//检查引用相同是否成立</span></span><br><span class="line">       <span class="keyword">if</span>(ep-&gt;me_key == key)</span><br><span class="line">       	<span class="keyword">return</span> ep;</span><br><span class="line">       <span class="keyword">if</span>(ep-&gt;me_hash == hash &amp;&amp; ep-&gt;me_key!=dummy)&#123;</span><br><span class="line">       	startkey = ep-&gt;me_key;</span><br><span class="line">           cmp = PyObject_RichCompareBool(startkey, key, py_EQ);</span><br><span class="line">           <span class="keyword">if</span>( cmp&gt;<span class="number">0</span> )</span><br><span class="line">           	<span class="keyword">return</span> ep;</span><br><span class="line">       &#125;<span class="keyword">else</span> <span class="keyword">if</span>(ep-&gt;me_key == dummy &amp;&amp; freeslot ==<span class="literal">NULL</span>)</span><br><span class="line">       	freeslot = ep;</span><br><span class="line">   &#125;</span><br><span class="line">   ...</span><br></pre></td></tr></table></figure></p>
<p>如果搜索成功，一定会返回一个有效的entry，如果搜索失败，会返回一个可被立即利用的entry</p>
<h3 id="Dict插入元素"><a href="#Dict插入元素" class="headerlink" title="Dict插入元素"></a>Dict插入元素</h3><pre><code>PydictObject对象中元素的插入动作建立在搜索的基础之上，理解了PyDictObject对象还搜索策略，对于插入动作很好理解。
</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertdict</span><span class="params">(<span class="keyword">register</span> dictobject *mp, PyObject *key, <span class="keyword">long</span> hash, PyObject *value)</span></span>&#123;</span><br><span class="line">	ep = mp-&gt;ma_loopup(mp, key ,hash);</span><br><span class="line">    <span class="comment">//搜索成功直接替换old——value</span></span><br><span class="line">    <span class="keyword">if</span>(ep-&gt;me_value != <span class="literal">NULL</span>)&#123;</span><br><span class="line">    	old_value = ep-&gt;me_value;</span><br><span class="line">        ep-&gt;me_value = value;</span><br><span class="line">        py_DECREF(old_value);</span><br><span class="line">        py_DECREF(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//搜索失败 完整的设置key hash value</span></span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">    	<span class="keyword">if</span>(ep-&gt;me_key == <span class="literal">NULL</span>)</span><br><span class="line">        	mp-&gt;ma_fill++;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        	Py_DECREF(ep-&gt;my_key)</span><br><span class="line">        ep-&gt;me_key = key;</span><br><span class="line">        ep-&gt;me_hash = hash;</span><br><span class="line">    	ep-&gt;me_value = value;</span><br><span class="line">        mp-&gt;ma_used++:</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中的参数hash是在PyDict_SetItem函数中获得的，<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">PyDict_SetItem</span><span class="params">(...)</span></span>&#123;</span><br><span class="line">	<span class="comment">//计算哈希值</span></span><br><span class="line">    <span class="keyword">if</span>(PyString_CheckExact(key))&#123;</span><br><span class="line">    	hash = ((PyStringObejct*)key)-&gt; ob_shash;</span><br><span class="line">        <span class="keyword">if</span>(hash ==<span class="number">-1</span>)</span><br><span class="line">        	hash =PyObejct_Hash(key);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    	hash = PyObject_Hash(key);</span><br><span class="line">        <span class="keyword">if</span>(hash == <span class="number">-1</span>)</span><br><span class="line">        	reurn <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    insertdict(mp,keyhash,value)</span><br><span class="line">    <span class="comment">//必要时调整dict空间</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Dict删除元素"><a href="#Dict删除元素" class="headerlink" title="Dict删除元素"></a>Dict删除元素</h3><pre><code>与插入元素类似，先搜索entry，如果搜索失败，说明entry不存在，返回-1.。如果搜索成功则删除该entry维护的元素 ，把entry变成dummy状态。
</code></pre><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><pre><code>集合Set与Dict的实现非常相似，同样不可以放入可变对象做key，惟一的区别是set只有key没有value。set是有序的，需要使用列表或元组做初始化
</code></pre><h2 id="效率相关"><a href="#效率相关" class="headerlink" title="效率相关"></a>效率相关</h2><p>关于python内置数据结构的一些方法的时间复杂度：</p>
<p><a href="http://www.orangecube.net/python-time-complexity" target="_blank" rel="noopener">http://www.orangecube.net/python-time-complexity</a></p>
]]></content>
      
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python内建对象]]></title>
      <url>/2017/07/01/Python/Python%E5%86%85%E5%BB%BA%E5%AF%B9%E8%B1%A1/</url>
      <content type="html"><![CDATA[<h2 id="Python对象类型初探"><a href="#Python对象类型初探" class="headerlink" title="Python对象类型初探"></a>Python对象类型初探</h2><p>首先要明白的是:<strong>在Python中，任何一个东西都是对象，而每个对象都对应一种类型</strong></p>
<a id="more"></a>
<p>对象类型的基石是PyObject，其定义为：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">object</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> ob_refcnt; <span class="comment">//引用计数</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">typeobject</span> *<span class="title">ob_type</span>;</span> <span class="comment">//类型信息</span></span><br><span class="line">&#125;PyObject;</span><br></pre></td></tr></table></figure>
<p>其中ob_refcnt是计数引用，ob_type是一个指向_typeobject结构体的指针，这个结构体对应着Python内部的一种特殊对象，它是用来<strong>指定一个对象类型的类型对象</strong>，在PyObject的基础扩展，可以得到PyVarObject，来表示变长对象</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> ob_refcnt; </span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">typeobject</span> *<span class="title">ob_type</span>;</span></span><br><span class="line">  <span class="keyword">int</span> obsize;</span><br><span class="line">&#125;PyVarObject</span><br></pre></td></tr></table></figure>
<p>也就是说在python中任何一个对象都拥有相同的对象头，所以我们只需要一个PyObject<em> 指针就可以引用任意一个对象，可以很方便的实现<em>*多态机制</em></em>。</p>
<p>在PyObject中定义了每个Python对象都必须有的内容，初次之外还应该有一些额外的内存来放置其他内容</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">  PyObject_HEAD <span class="comment">//这是PyObject头的宏定义</span></span><br><span class="line">  <span class="keyword">long</span> ob_ival;</span><br><span class="line">&#125;PyIntObject;</span><br></pre></td></tr></table></figure>
<p>同样，Python中的字符串对象，list，dict，等其他对象，都在PyObject之外保存了属于自己的特殊的信息</p>
<p>什么是类型对象？ </p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">typeobject</span>&#123;</span></span><br><span class="line">  PyObject_VAR_HEAD</span><br><span class="line">  <span class="keyword">char</span> *tp_name;<span class="comment">//类型名</span></span><br><span class="line">  <span class="keyword">int</span> tp_basicsize,tp_itemsize;<span class="comment">//创建该类型对象时候分配内存空间的大小信息</span></span><br><span class="line">  </span><br><span class="line">  destrcutor tp_dealloc;</span><br><span class="line">  printfunc ty_prnt; <span class="comment">//与该类型对象关联的操作信息</span></span><br><span class="line">&#125;PyTypeObject;</span><br></pre></td></tr></table></figure>
<h2 id="Python中的整数对象"><a href="#Python中的整数对象" class="headerlink" title="Python中的整数对象"></a>Python中的整数对象</h2><h3 id="初识PyIntObject对象"><a href="#初识PyIntObject对象" class="headerlink" title="初识PyIntObject对象"></a>初识PyIntObject对象</h3><p>Python中整数的概念是通过PyIntObject对象来完成的。Python中的对象可以分为<strong>定长对象</strong>和<strong>变长对象</strong>，或者分为<strong>可变对象(mutable)</strong>和<strong>不可变对象(immutable)</strong>。</p>
<p>静态的整数对象的定义–PyIntObject</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">  PyObject_HEAD</span><br><span class="line">  <span class="keyword">long</span> ob_ival;</span><br><span class="line">&#125;PyIntObject;</span><br></pre></td></tr></table></figure>
<p>对于Python中的对象，与对象相关的元信息实际上保存在与对象对应的类型对象中，对于PyIntObject，这个类型对象是PyInt_Type，PyInt_Type中保存了关于PyIntObject对象的丰富元信息，其中包括PyIntObject对象应该占用的内存大小、文档信息、支持的操作等。</p>
<blockquote>
<p>对象和类型对象关系？</p>
</blockquote>
<p>PyIntObject是一个immutable的对象，在加减法操作完成后原来参与操作的任何对象都没有发生改变，取而代之的是一个全新的PyIntObject对象</p>
<h2 id="Python中的字符串对象"><a href="#Python中的字符串对象" class="headerlink" title="Python中的字符串对象"></a>Python中的字符串对象</h2><p>在Python中字符串对象是通过PyStringObject实现的，这是一个拥有可变长度内存的对象</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">  PyObject_VAR_HEAD</span><br><span class="line">  <span class="keyword">long</span> ob_shash;<span class="comment">// 缓存该对象的hash值，在dict中非常有用</span></span><br><span class="line">  <span class="keyword">int</span> ob_sstate;<span class="comment">// 标记该对象是否已经经过intern机制的护理</span></span><br><span class="line">  <span class="keyword">char</span> ob_sval[<span class="number">1</span>]; <span class="comment">//指向一段内存，这段内存保存着字符串对象所维护的字符串</span></span><br><span class="line">  <span class="comment">//这段内存的实际长度是由PyObject_VAR_HEAD中的ob_size来维护的</span></span><br><span class="line">&#125;PyStringObject;</span><br></pre></td></tr></table></figure>
<h3 id="PyStringObject效率相关"><a href="#PyStringObject效率相关" class="headerlink" title="PyStringObject效率相关"></a>PyStringObject效率相关</h3><p>Python对于字符串提供了利用+连接字符串的功能，但是这个功能效率非常低下。原因在于PyStringObject是不可变对象，这意味进行字符串连接实际上要新建一个PyStringObject对象然后进行内存申请和搬运工作，这严重影响Python的执行效率。官方的做法是利用PystringObejct对象的join操作来对存储在list或tuple的一组PyStringObject对象进行连接操作。（+操作每次都需要申请一次内存，join操作会先统计有多少个PyStringObject,只申请一次内存）</p>
]]></content>
      
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[我的大学]]></title>
      <url>/2017/06/29/Life/%E6%88%91%E7%9A%84%E5%A4%A7%E5%AD%A6/</url>
      <content type="html"><![CDATA[<h1 id="我的大学"><a href="#我的大学" class="headerlink" title="我的大学"></a>我的大学</h1><p>2017-6-29 考完了计算机网络，结束了大学最后一门课，虽然还有名义上的1/4，但是老老实实上课学习的日子已经到头，所以特意写下这篇文章来纪念我的大学生活。<br><a id="more"></a></p>
<h2 id="Freshman"><a href="#Freshman" class="headerlink" title="Freshman"></a>Freshman</h2><blockquote>
<p>乖，青涩，幼稚</p>
</blockquote>
<p>大一刚入学，带着高中的稚嫩、高考失利的不甘、第一次离家远行的不安与激动、带着从高二一起走来虽然受到各方阻挠但一直坚持陪伴彼此的女朋友，走进了这所全国最好的师范类院校。高考之前从来都没有想过自己会来北师大，对北师的印象还停留在初中高中经常使用的“北师大版”的课本。虽然当时看来很可惜没能去到更好的学校，但是现在再有人问我会不会后悔当时没有选择复读时我会说：<strong>高考只能决定你们未来会遇到哪些的人哪些的风景。它们都是独特而又可爱的并只属于你自己的</strong>。在北师大的这段经历也是我的青春最美好、最深刻的一段记忆。</p>
<p>刚来学校一天，还没有和室友混熟就被拉去顺义军训基地军训，当时关系最好的丁丁，一个从头到脚都是喜感的东北汉子，那时军训基地网不好，晚上只能偶尔发出一两条消息，第一次感觉到不能再靠爸妈了，有事需要自己解决了。不避讳地说我是一个恋家的人，作为我爸家里唯一一个男孩，从小收到了太多家人的宠爱，所以不是很成熟，总是以一个小孩子的角度去思考问题。大学这几年也的确让我渐渐变得独立，变得成熟，这些改变是比学到的知识更加有价值的东西。</p>
<p>刚来到大学，我还是保持了高中以来一贯认真的学习态度。也就是“乖”吧，一直是一个认真学习的“好学生”，但事实却让我知道了这种学习方法并不一定是最适合大学的学习，成绩并不等于能力，而到了社会上没有人会在意你的GPA是多少，有能力的人总会脱颖而出。当然我不否认成绩对于奖学金、保研、出国确实是很重要的，只是想说明成绩绝对不应该是我们大学唯一关注的方面。大一很多数学课，对我来说还算轻松吧，学习态度也很好，所以成绩还不错。当时还每天都能保证晚上12点之前睡觉，七点多起床吃早饭，到后来越高年级越浪啦~ 现在回想觉得大一的时候其实更多的是应该去了解这个学院，这个学科，培养对这个学科的整体认识，才能知道自己是不是真的喜欢电子这个专业。那时候我还是太专注于知识本身了，而忽视了更高更长远的视角。先定下目标再专注眼前的路，这才是更合适的选择吧。感觉在大学中遇到的牛逼的人往往是一开始就有很明确的目标，然后朝着这个目标不断努力的人，我就是比较缺少明确目标的人吧。</p>
<p>大一我也加入了很多社团：学生会新闻部，第一次看到学生会78个部门的名字时并没有特别想要加入哪个，后来看到了新闻部的招新宣传语，记不得具体说什么，反正可以学摄影、PS啥的，就报了这个部门，然后笔试面试就过啦，据说在北师大男生报什么部都会要的，因为男生太少了，记得当时新闻部四十多个人也就三四个男生。 白鸽爱心志愿者中心：一直都觉得应该做一个有爱心得人，所以报了志愿者中心，每周三的下午和三个小伙伴一起到海淀区残联陪听障儿童玩，现在还清晰得记得第一次到那去的时候孩子们激动期待的神情，他们中很多人的父母都因为各种各样的原因没时间陪他们，所以当有一群大哥哥大姐姐出现的时候，他们才会那么开心。很遗憾的是只去了一个学期，但还是真心希望这些孩子能有一个幸福的未来，希望听力上的缺陷不影响他们感受这个美丽的世界。 学院分团委组织部：之前其实是没有打算加入学院的学生会或者分团委的，后来因为觉得应该多认识一些学院的师兄师姐，所以就问了副书记砚宇师姐还有没有部门缺人，然后就“走后门”进了分团委组织部，很奇妙的是，分团委最后竟然是我投入感情最多的一个组织。</p>
<p>之后说说感情吧，高中时候对大学无比期待，不仅仅是因为可以摆脱高考的压力，还有就是可以光明正大得和女朋友在一起了，这个愿望也是支撑我们度过高中最艰难的一段日子的力量源泉。然而我们似乎习惯了在高中那种压力的环境下挤出的甜蜜和幸福，当有大片可支配的时间、无限多的选择摆在面前时候却觉得无所适从，我们各自也在自己的小圈子中努力地适应着，我们俩都是很在意别人看法的人，很小心地经营地自己的人际圈，表面上大度乐观，却会把自己的一些不好的情绪留给最亲近的人。大一的自己对待感情很幼稚，只知道拉着她去自习，只知道在感情出现问题的时候冷战或争吵，只会想她为什么理解我怎么怎么样。现在想起来我才渐渐觉得自己很多方面做得不好，如果能够多些情调，给生活装点些惊喜，如果能多带她出去吃吃玩玩，如果能成熟些，如果能多为两人的未来考虑考虑，如果能多培养些共同话题，如果能早些把她介绍给自己的大学朋友们，如果能让两个人的圈子更近些，如果能少些冲动，是不是就不会分手了，毕竟我们多么幸运才到一个学校的，毕竟我们多么不容易才走过了1000天。但是都只是如果了。</p>
<p>In Conclusion，用几个词来总结大一生活就是乖，青涩，幼稚。</p>
<h2 id="Sophomore"><a href="#Sophomore" class="headerlink" title="Sophomore"></a>Sophomore</h2><blockquote>
<p>改变，坚持</p>
</blockquote>
<p>大一的暑假的支教和泰山行让我认识了三个挚友：肖老师，婷婷姐，昊姐。和他们三个做朋友让我不由得想让自己成为更好的自己，成为能让他们很骄傲的小白。泰山、黄山、新疆，我们的足迹会一直延续下去，遍布全中国吧。</p>
<p>大二把很多精力投入到了学生工作之中，上大学之前一直没有想过自己会成为一个学生组织的头头，我妈也告诉我学生工作适度就可以了，要以学业为重，但是还是“阴差阳错”得被师姐忽悠得成了分团委副书记。虽然是阴差阳错，这个经历的的确确也让我有了很大改变，<strong>做没做过的事情叫成长,做不愿意做的事情叫改变,做不敢做的事情叫突破</strong>，这句话说的挺对。我不是一个严格的“领导”，很多事都是和部长们商量着来，但是有时候就很浪费时间，也很没有效率，后来还是昊姐给了很多建议，我也渐渐适应了领导者而不是执行者的角色。学生工作也占用了很多的的时间，不像大一的时候学习时间比较充足，而且上课时候经常会有人找我，我原来是一个心里放不下事的人，有一些任务就会很焦虑，整堂课心里都会想着这事儿，所以最开始还是蛮不适应的（大概也是那个时候对学习渐渐放了点水把） 第一个期末的时候每天晚上刷夜到两三点复习，早上再七八点起来，杯子里经常装了咖啡。我现在还觉得大二上学期是我状态最好的时候，无论对学生工作、对学习都充满了激情。刚上任，对学生工作充满新鲜感和昂扬的斗志，以改变分团委的面貌，让学院知名度更高为己任，还记得信誓旦旦得把拿下红旗团委这个目标记在手机的记事本上，元旦之前的半期总结会上还很慷慨激昂得说了一段话，大致是“我们总说信科是个小院，但是实际上我们的人数并不比地遥、心理这些传统的大院人数少，是我们自己总以小院自居，我们要自己把自己当成一个大院，不要拿人数作为自己某些成绩不好的接口”。巴拉巴拉扯了一通，现在想想还真是个热血青年啊，项目、挑战杯、建模，这些事也都没有拉下，那种浑身充满干劲的感觉真的非常棒。自己大一时候在分团委待的一年其实并没有感觉出团委和学生会的差别，刚接手的时候就有点不知所措，所以各个方面都在向学生工作很棒的经管看齐，虽然离他们还有很大差距，但是我们也一直在努力，当时可算是没少麻烦肖老师了，经常晚上找他聊学生工作的事。 下半学期还下了很大的决心对部门进行了改革，加了社会实践部，把外联改成了学术竞赛，撤销了啦啦队，想想觉得也是蛮有成就感的一件事吧，把团委改成了一个合理的部门配置。虽然最后快要换届的时候和新闻部闹得不太愉快，但是还好还是留下了。其实实话说我觉得邓依伊说得对，新闻部归到学生会中更合适一些，但是确实我比较爱面子，如果留给小雨一个“残缺”的分团委心里会很过意不去。2016年5月，是换届前的最后一段日子，也是20岁之前的最后一个月了， 每天熬夜熬得经常调侃自己不知道还能不能活到20岁了，但是真到了换届的那天心里只有不舍，看着分团委在自己的努力下变好了，真心开心，也真心的祝福下一届更优秀的你们能把它做得更好，you are the future 啊。这一年另一个收获就是，主席团那四只啊，和他们共事很开心，四个风格迥异但是同样负责、优秀、可爱的人，换了届见得就少了， 但是还是很想你们啊，很想念我们一起骑三轮车，一起熬夜做事吐槽稀奇的日子。到毕业时候要骑三轮车带你们拍个照啊。</p>
<p>说到师弟师妹们，也是大一到大二的角色变化。自己也是师兄啦，认识了很多很棒的年轻人，把他们拉进团学，给他们选课、生活上的建议，觉得他们就是自己的亲弟弟妹妹一样。虽然自己也还是有什么事喜欢问师兄师姐建议，但是在大一小孩面前就总是摆出一副老油条的样子指点一番，他们得到答案心满意足地走了，我心里也偷着乐。路上经常有人跟我打招呼说师兄好也是满骄傲的。</p>
<p>但是这年10月，丢了女朋友。当初的争执和不理解都随时间淡去，留在记忆中的都是美好的回忆。哎，现在想想好像有点后悔了。但是只能祝她过的很好吧</p>
<h2 id="Junior"><a href="#Junior" class="headerlink" title="Junior"></a>Junior</h2><blockquote>
<p>抉择，醒悟</p>
</blockquote>
<p>卸下分团委副书记的职位，16年的暑假，我坐上了飞往美国的飞机，到伯克利去参加summer school，第一次走出国门，看看外面的世界，认识认识外面的人，了解生活的多种可能性。在伯克利的事能说一天，这里就不再写啦，总之是一段很长见识很难忘的经历。</p>
<p>因为大二下失误挂掉了一门英语课，必须得考虑未来的路了，是否能保研还说不准，按学院这个速度要到大四上才能出来新的保研条例，所以等是不明智的，所以我大三上开始准备托福，但是并没有下定决心出国。到大三的寒假，又和老师确认保研的事，才最后综合自己情况和家里的条件下定决心去香港。</p>
<p>其实觉得自己还是没有想清楚未来想要什么样的生活，感觉像肖老师他们都对未来有很明确的规划，对自己想要的生活很清楚。但是我却是浑浑噩噩的，并不知道自己想要什么，或者说我比较在意父母和别人看法，没有勇气去追逐自己的想法。其实渐渐觉得，还是应该为了自己活着，爱父母不一定意味着要一切都顺着他们的意，父母不应该成为我们前进的负担，而应该是我们为理想奋斗累了的时候的港湾。 所以也开始慢慢思考，理想中的生活的样子，做一个非典型的程序员，在一个环境不错的二线城市，工资够自己浪再加上给点孝敬父母的就好，有个性格合得来和我一样爱玩的女朋友，再养只狗。每年能有假期回家看看，能有时间出去旅旅游，平时可以和那群哥们喝喝酒吹吹牛逼，再往后生个萌萌的胖儿子，教他打篮球下棋弹吉他，他妈同意的话可以再加个王者荣耀，让他做个高情商的男孩，就蛮好的了哈哈哈。那么以后就要朝着这个方向好好努力咯，找个女朋友，找个好工作，好好度过每一天啦。</p>
<p>又到了毕业季，和自己最亲的师兄师姐都毕业了，祝他们前程似锦，一切安好！</p>
<h2 id="Senior"><a href="#Senior" class="headerlink" title="Senior"></a>Senior</h2><p>希望能如愿，希望能申请到自己想去的学校，希望能有人陪我毕业旅行，希望我爱的人和爱我的人都能心想事成。</p>
]]></content>
      
        
        <tags>
            
            <tag> Life </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[arrayNesting]]></title>
      <url>/2017/06/05/LeetCode/565-arrayNesting/</url>
      <content type="html"><![CDATA[<h2 id="LeetCode565-arrayNesting题解"><a href="#LeetCode565-arrayNesting题解" class="headerlink" title="LeetCode565-arrayNesting题解"></a>LeetCode565-arrayNesting题解</h2><a id="more"></a>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>A zero-indexed array A consisting of N different integers is given. The array contains all integers in the range [0, N - 1].</p>
<p>Sets S[K] for 0 &lt;= K &lt; N are defined as follows:</p>
<p>S[K] = { A[K], A[A[K]], A[A[A[K]]], … }.</p>
<p>Sets S[K] are finite for each K and should NOT contain duplicates.</p>
<p>Write a function that given an array A consisting of N integers, return the size of the largest set S[K] for this array.</p>
<p><strong>Example</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input: A = [5,4,0,3,1,6,2]</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: </span><br><span class="line">A[0] = 5, A[1] = 4, A[2] = 0, A[3] = 3, A[4] = 1, A[5] = 6, A[6] = 2.</span><br><span class="line"></span><br><span class="line">One of the longest S[K]:</span><br><span class="line">S[0] = &#123;A[0], A[5], A[6], A[2]&#125; = &#123;5, 6, 2, 0&#125;</span><br></pre></td></tr></table></figure>
<h2 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h2><p>尝试暴力破解 即遍历从0到length每个数都作为起点，计算最大的回环长度，结果是time-limit-error，因为时间复杂度是O(n^2) 。比如[1,2,3,4,5,0] 这样的数组复杂度就是O(N^2)</p>
<h2 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h2><p>相对于暴力破解，首先想到的改进是把遍历过的点都存在ans中，以后再碰到它就跳过，但是还是time-limit-error,后来想到可能是list的<code>__contains__()</code>方法太耗时，就把ans设置成了set类型，就通过了。</p>
<h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>O(n)×contains函数的复杂度   因为每个节点最多访问过1次</p>
<h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">arrayNesting</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        length = len(nums)</span><br><span class="line">        maxlen = <span class="number">0</span></span><br><span class="line">        ans = set()</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; length:</span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">in</span> ans:</span><br><span class="line">                i = i +<span class="number">1</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            this_len = <span class="number">0</span></span><br><span class="line">            j = i</span><br><span class="line">            <span class="keyword">while</span> <span class="keyword">not</span> j <span class="keyword">in</span> ans:</span><br><span class="line">                ans.add(j)</span><br><span class="line">                j=nums[j]</span><br><span class="line">                this_len = this_len +<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> maxlen &lt; this_len:</span><br><span class="line">                maxlen = this_len </span><br><span class="line">            i = i+<span class="number">1</span></span><br><span class="line">        <span class="keyword">print</span> maxlen</span><br><span class="line">        <span class="keyword">return</span> maxlen</span><br></pre></td></tr></table></figure>
<p>程序时间是132ms，<strong>注意这里 判断一个集合是否包含一个元素应该用x in set</strong></p>
<h2 id="思路三"><a href="#思路三" class="headerlink" title="思路三"></a>思路三</h2><p>一个改进是：可以避免使用contains函数 每次j=nums[j]执行了之后，把原本j的位置的值设为-1 ,时间复杂度为O(n)空间复杂度为O(1)</p>
<p>（或者另开一个数组存储是否访问过这个位置，这种方法叫visited array[<a href="https://leetcode.com/articles/array-nesting/" target="_blank" rel="noopener">https://leetcode.com/articles/array-nesting/</a>] 这种方法时间空间复杂度都是O(n)）</p>
<h3 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h3><p>这个运行时间只有35ms</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">arrayNesting</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">size_t</span> maxsize = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">size_t</span> size = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = i; a[k] &gt;= <span class="number">0</span>; size++) &#123;</span><br><span class="line">                <span class="keyword">int</span> ak = a[k];</span><br><span class="line">                a[k] = <span class="number">-1</span>; <span class="comment">// mark a[k] as visited;</span></span><br><span class="line">                k = ak;</span><br><span class="line">            &#125;</span><br><span class="line">            maxsize = max(maxsize, size);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxsize;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>## </p>
<h2 id="Python中内置数据结构的插入、查询、删除的复杂度"><a href="#Python中内置数据结构的插入、查询、删除的复杂度" class="headerlink" title="Python中内置数据结构的插入、查询、删除的复杂度"></a>Python中内置数据结构的插入、查询、删除的复杂度</h2><p>由这道题也让我想到了去看一看python内置数据结构的实现方式，各种常用操作的时间复杂度</p>
]]></content>
      
        <categories>
            
            <category> 厚积薄发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Array </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[findUnsortedSubarray]]></title>
      <url>/2017/06/03/LeetCode/581-findUnsortedSubarray/</url>
      <content type="html"><![CDATA[<h2 id="LeetCode581-findUnsortedSubarray题解"><a href="#LeetCode581-findUnsortedSubarray题解" class="headerlink" title="LeetCode581- findUnsortedSubarray题解"></a>LeetCode581- findUnsortedSubarray题解</h2><a id="more"></a>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Given an integer array, you need to find one <strong>continuous subarray</strong> that if you only sort this subarray in ascending order, then the whole array will be sorted in ascending order, too.</p>
<p>You need to find the <strong>shortest</strong> such subarray and output its length.</p>
<p><strong>Examples:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: [2, 6, 4, 8, 10, 9, 15]</span><br><span class="line">Output: 5</span><br><span class="line">Explanation: You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order.</span><br></pre></td></tr></table></figure>
<h2 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h2><p>数组需要递增则：<strong>最后一个元素是数组最大值，数组第一个元素是数组最小值</strong>，则从外往内收缩直到找到不满足该条件的数组就是最短的unsorted continuous subarray</p>
<h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>每次用max(nums)查找数组元素最大或最小复杂度都是$O(n)$,则总的时间复杂度是$O(n^2)$</p>
<p>代码用时1102ms</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">findUnsortedSubarray</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">      <span class="string">"""</span></span><br><span class="line"><span class="string">      :type nums: List[int]</span></span><br><span class="line"><span class="string">      :rtype: int</span></span><br><span class="line"><span class="string">      """</span></span><br><span class="line">      length=len(nums)</span><br><span class="line">      <span class="keyword">if</span> length&lt;=<span class="number">1</span>:</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">      <span class="keyword">if</span> nums == sorted(nums):</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">      </span><br><span class="line">      <span class="keyword">while</span>(max(nums)==nums[len(nums)<span class="number">-1</span>]):</span><br><span class="line">          nums.pop()</span><br><span class="line">      <span class="keyword">while</span>(min(nums)==nums[<span class="number">0</span>]):</span><br><span class="line">          nums.remove(nums[<span class="number">0</span>])</span><br><span class="line">      <span class="comment">#print nums</span></span><br><span class="line">      <span class="keyword">return</span> len(nums)</span><br></pre></td></tr></table></figure>
<h2 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h2><p>首先 从外往内收缩，排除已经递增的序列。（我原本也考虑过这个方法，但是没有想到这样做之后还是有可能不是满足条件的subarray，比如<code>[1,3,2,2,2]</code>，用这种收缩的方法的到结果是1，而正确结果应该是4 ）</p>
<p>之后要找到判断中间剩下的序列中的最大最小值，然后根据最大最小值和两端已经排好序的数组比较，重新更新subarray的长度</p>
<h3 id="时间复杂度-1"><a href="#时间复杂度-1" class="headerlink" title="时间复杂度:"></a>时间复杂度:</h3><p>第一遍收缩的过程复杂度为$O(n)$，查找最大最小值复杂度$O(n)$,最后更新操作复杂度也是$O(n)$ 代码运行时间102ms</p>
<h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findUnsortedSubarray</span><span class="params">(self,nums)</span>:</span></span><br><span class="line">       length = len(nums)</span><br><span class="line">       <span class="keyword">if</span> length&lt;=<span class="number">1</span>:</span><br><span class="line">           <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">       <span class="keyword">if</span> nums == sorted(nums):</span><br><span class="line">           <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">       </span><br><span class="line">       i=<span class="number">0</span></span><br><span class="line">       <span class="keyword">while</span>(i &lt;=length<span class="number">-1</span> <span class="keyword">and</span> nums[i]&lt;=nums[i+<span class="number">1</span>]):</span><br><span class="line">           i=i+<span class="number">1</span></span><br><span class="line">       j=length<span class="number">-1</span></span><br><span class="line">       <span class="keyword">while</span>(j&gt;=<span class="number">0</span> <span class="keyword">and</span> nums[j]&gt;=nums[j<span class="number">-1</span>]):</span><br><span class="line">           j=j<span class="number">-1</span></span><br><span class="line">       </span><br><span class="line">       j=j+<span class="number">1</span></span><br><span class="line">       <span class="comment">#print i,j</span></span><br><span class="line">       <span class="comment">#print nums[i:j]</span></span><br><span class="line">       min_num = min(nums[i:j])</span><br><span class="line">       max_num = max(nums[i:j])</span><br><span class="line">       <span class="comment">#print min_num,max_num</span></span><br><span class="line">       </span><br><span class="line">       <span class="keyword">while</span>(i<span class="number">-1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> nums[i<span class="number">-1</span>]&gt;min_num):</span><br><span class="line">           i=i<span class="number">-1</span></span><br><span class="line">       <span class="keyword">while</span>(j &lt; length <span class="keyword">and</span> nums[j]&lt;max_num):</span><br><span class="line">           j=j+<span class="number">1</span></span><br><span class="line">        </span><br><span class="line">       <span class="keyword">return</span> len(nums[i:j])</span><br></pre></td></tr></table></figure>
<h2 id="思路三"><a href="#思路三" class="headerlink" title="思路三"></a>思路三</h2><p>还有一个很巧妙的方法，把nums和已经排好序的nums对比，排除两端相同的序列，剩下的序列就是所求的subarray</p>
<h3 id="时间复杂度-2"><a href="#时间复杂度-2" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>zip这个方法复杂度应该是O(n)，最后代码用时122ms</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findUnsortedSubarray</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        is_same = [a == b <span class="keyword">for</span> a, b <span class="keyword">in</span> zip(nums, sorted(nums))]</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> all(is_same) <span class="keyword">else</span> len(nums) - is_same.index(<span class="keyword">False</span>) - is_same[::<span class="number">-1</span>].index(<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 厚积薄发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> Array </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[端午-坝上草原]]></title>
      <url>/2017/05/31/Life/%E7%AB%AF%E5%8D%88-%E5%9D%9D%E4%B8%8A%E8%8D%89%E5%8E%9F/</url>
      <content type="html"><![CDATA[<h1 id="端午-坝上草原"><a href="#端午-坝上草原" class="headerlink" title="端午-坝上草原"></a>端午-坝上草原</h1><p>不出去玩玩哪对得起端午节这么多天假？</p>
<a id="more"></a>
<p>到的时候已经凌晨1点左右了，虽然不是露营，但是还是能看到星星巨多，像上次在泰山上看到的那样，很想拍下来，但是相机没那么好，所以还是好好欣赏，把景色记在心里吧。</p>
<p>第一天上午在草原上骑马，上一次骑马还是小学毕业那年去内蒙，那时候还能骑小马驹，现在小马驹八成背不动我了吧哈哈</p>
<p>草原没有上次去内蒙时候的好看，以后还是要再去一次真正的草原的。</p>
<p><img src="/images/坝上/坝上.jpg" alt=""></p>
<p>骑马的路上还看到了彩云</p>
<p><img src="/images/坝上/彩云.jpg" alt=""></p>
<p>下午去了千松坝森林公园，人很少，走在山间小路上，可以体会到很久没有体验过的宁静。捕捉到一只九尾妖狐</p>
<p><img src="/images/坝上/妖狐.jpg" alt=""></p>
<p>晚上还放了孔明灯，小时候家里挺常见的，后来市里禁止了就再没见过了，这次还是我第一次放。</p>
<p>第二天天有点阴，原以为会影响景色，但是闪电湖景色意外的美，像水墨画一般</p>
<p><img src="/images/坝上/闪电湖.jpg" alt=""></p>
<p>很适合拍装逼的照片</p>
<p>旅行一定要有会拍照会修图的人，放几张我自己的照片吧哈哈</p>
<p><img src="/images/坝上/飞翔.jpg" alt=""></p>
<p><img src="/images/坝上/摄影师.jpg" alt=""></p>
<p>最后给草履虫打一波广告，虽然有点小贵，但是玩的特别开心，领队人很nice很周到，行程安排也很好。</p>
<p>多出去走走，读万卷书，行万里路。</p>
]]></content>
      
        
        <tags>
            
            <tag> Life </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git]]></title>
      <url>/2017/05/24/Git/</url>
      <content type="html"><![CDATA[<p>实习的第一个任务，arc diff之后发现自己提交的与origin文件有很多在格式上的不一样，mentor让我把格式调了一下，再次提交的时候发现有一个我第一次删除过得文件还是出现在了上面，觉得Git还是不太会用啊，于是就又去学了下Git</p>
<a id="more"></a>
<p><img src="http://www.techug.com/wordpress/wp-content/uploads/2015/12/bg2015120901-1000x290.png" alt=""><br>几个专用名词：</p>
<ol>
<li>Workspace 工作区</li>
<li>Index/State 暂存区</li>
<li>Repository 仓库</li>
<li>Remote 远程仓库</li>
</ol>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="新建代码库"><a href="#新建代码库" class="headerlink" title="新建代码库"></a>新建代码库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 在当前目录新建一个Git代码库</span><br><span class="line"><span class="meta">$</span> git init</span><br><span class="line"><span class="meta">#</span> 下载一个项目和他的整个代码历史</span><br><span class="line"><span class="meta">$</span> git clone [url]</span><br></pre></td></tr></table></figure>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 设置在提交代码时候的用户信息</span><br><span class="line"><span class="meta">$</span> git config [--global] user.name "[name]"</span><br><span class="line"><span class="meta">$</span> git config [--global] user.email "[email address]"</span><br></pre></td></tr></table></figure>
<h3 id="添加或删除文件"><a href="#添加或删除文件" class="headerlink" title="添加或删除文件"></a>添加或删除文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 添加指定文件到暂存区</span><br><span class="line"><span class="meta">$</span> git add file1 ...</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 添加当前目录的所有文件到暂存区</span><br><span class="line"><span class="meta">$</span> git add .</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 删除工作区文件，并且将这次删除放入暂存区</span><br><span class="line"><span class="meta">$</span> git rm [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 停止追踪指定文件，但该文件会保留在工作区</span><br><span class="line"><span class="meta">$</span> git rm --cached [file]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 改名文件，并且将这个改名放入暂存区</span><br><span class="line"><span class="meta">$</span> git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure>
<h3 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 提交暂存区到仓库区</span><br><span class="line"><span class="meta">$</span> git commit -m [message]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 提交暂存区的指定文件到仓库区</span><br><span class="line"><span class="meta">$</span> git commit [file1] [file2] ... -m [message]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 提交工作区自上次commit之后的变化，直接到仓库区</span><br><span class="line"><span class="meta">$</span> git commit -a</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 提交时显示所有diff信息</span><br><span class="line"><span class="meta">$</span> git commit -v</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 使用一次新的commit，替代上一次提交</span><br><span class="line"><span class="meta">#</span> 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span><br><span class="line"><span class="meta">$</span> git commit --amend -m [message]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 重做上一次commit，并包括指定文件的新变化</span><br><span class="line"><span class="meta">$</span> git commit --amend   ...</span><br></pre></td></tr></table></figure>
<h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 新建一个分支 并切换</span><br><span class="line"><span class="meta">$</span> git checkout -b [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 切换到指定分支，并更新工作区</span><br><span class="line"><span class="meta">$</span> git checkout [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 建立追踪关系，在现有分支与指定的远程分支之间</span><br><span class="line"><span class="meta">$</span> git branch --set-upstream [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 合并指定分支到当前分支</span><br><span class="line"><span class="meta">$</span> git merge [branch]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 选择一个commit，合并进当前分支</span><br><span class="line"><span class="meta">$</span> git cherry-pick [commit]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 删除分支</span><br><span class="line"><span class="meta">$</span> git branch -d [branch-name]</span><br></pre></td></tr></table></figure>
<h3 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 显示工作区与当前分支最新commit之间的差异</span><br><span class="line"><span class="meta">$</span> git diff HEAD</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 显示两次提交之间的差异</span><br><span class="line"><span class="meta">$</span> git diff [first-branch]...[second-branch]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 显示某次提交的元数据和内容变化</span><br><span class="line"><span class="meta">$</span> git show [commit]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 显示当前分支的最近几次提交</span><br><span class="line"><span class="meta">$</span> git reflog</span><br></pre></td></tr></table></figure>
<h3 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 下载远程仓库的所有变动</span><br><span class="line"><span class="meta">$</span> git fetch [remote]</span><br><span class="line"><span class="meta">#</span> git fetch [remote] 从远程获取最新版本到本地，不会自动merge </span><br><span class="line"><span class="meta">#</span> git pull [remove] [branch] 从远程获取最新版本并merge到本地</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 显示所有远程仓库</span><br><span class="line"><span class="meta">$</span> git remote -v</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 显示某个远程仓库的信息</span><br><span class="line"><span class="meta">$</span> git remote show [remote]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 增加一个新的远程仓库，并命名</span><br><span class="line"><span class="meta">$</span> git remote add [shortname] [url]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 取回远程仓库的变化，并与本地分支合并</span><br><span class="line"><span class="meta">$</span> git pull [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 上传本地指定分支到远程仓库</span><br><span class="line"><span class="meta">$</span> git push [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 强行推送当前分支到远程仓库，即使有冲突</span><br><span class="line"><span class="meta">$</span> git push [remote] --force</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 推送所有分支到远程仓库</span><br><span class="line"><span class="meta">$</span> git push [remote] --all</span><br></pre></td></tr></table></figure>
<h2 id="分支策略"><a href="#分支策略" class="headerlink" title="分支策略"></a>分支策略</h2><p>在实际开发中通常要采用一定的分支策略，master分支应该是稳定地，开发要在dev分支上完成，团队合作的分支看起来就是<img src="http://www.liaoxuefeng.com/files/attachments/001384909239390d355eb07d9d64305b6322aaf4edac1e3000/0" alt=""></p>
<p>需要将dev分支合并到master分支的命令：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 切换到master分支</span><br><span class="line">git checkout master</span><br><span class="line"><span class="meta">#</span>对dev分支进行合并</span><br><span class="line">git merge --no-ff dev</span><br></pre></td></tr></table></figure>
<p>这里–no-ff参数是，git中默认的是fast-farward merge，会直接将Master分支指向dev分支，二者的区别如下图</p>
<p><img src="http://image.beekka.com/blog/201207/bg2012070505.png" alt="Fast-farward merge"></p>
<p><img src="http://image.beekka.com/blog/201207/bg2012070506.png" alt="no-ff merge"></p>
<p>这种方法可以保证版本演进的清晰</p>
<h2 id="把remote-master上的内容merge到自己的开发分支上"><a href="#把remote-master上的内容merge到自己的开发分支上" class="headerlink" title="把remote master上的内容merge到自己的开发分支上"></a>把remote master上的内容merge到自己的开发分支上</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git pull</span><br><span class="line">git checkout dev_XXX</span><br><span class="line">git merge master</span><br></pre></td></tr></table></figure>
<h2 id="合并commit"><a href="#合并commit" class="headerlink" title="合并commit"></a>合并commit</h2><p>分支开发完成后很可能有一堆commit，但是合并到主干时候往往希望只有一个commit，这样清晰且易于管理</p>
<p>使用git rebase命令就可以合并多个commit，这里i参数表示interactive</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git rebase -i origin/master</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="[http://blog.csdn.net/hudashi/article/details/7664631/](http://blog.csdn.net/hudashi/article/details/7664631/">rebase和merge的区别</a></p>
<p><a href="http://www.ruanyifeng.com/blog/2014/06/git_remote.html" target="_blank" rel="noopener">Git远程操作详解</a></p>
]]></content>
      
        
        <tags>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Rest & django-rest-framework]]></title>
      <url>/2017/05/19/Python/REST&amp;Django-Rest-Framework/</url>
      <content type="html"><![CDATA[<h1 id="什么是REST"><a href="#什么是REST" class="headerlink" title="什么是REST"></a>什么是REST</h1><p>来自百度的定义：REST即表述性状态传递（英文：Representational State Transfer，简称REST）是Roy Fielding博士在2000年他的博士论文中提出来的一种<a href="http://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84" target="_blank" rel="noopener">软件架构</a>风格。它是一种针对<a href="http://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8" target="_blank" rel="noopener">网络应用</a>的设计和开发方式，可以降低开发的复杂性，提高系统的可伸缩性。</p>
<a id="more"></a>
<p>先用一个简单的采购方案例子来感受一下：</p>
<p><img src="/images/django/traditional.jpg" alt=""></p>
<p>可以看到，例子中定义了两个服务程序（没有包含任何实现细节）。这些服务程序的接口都是为了完成任务（正是我们讨论的OrderManagement和CustomerManagement服务）而定制的。如果客户端程序试图使用这些服务，那它必须针对这些特定接口进行编码——不可能在这些接口定义之前，使用客户程序去有目的地和接口协作。这些接口定义了服务程序的应用协议（application protocol）</p>
<p>而在REST的设计模式中，将通过组成HTTP应用协议的通用接口访问服务程序</p>
<p><img src="/images/django/rest.jpg" alt=""></p>
<p>可以看到，服务程序中的特定操作被映射成为标准的HTTP方法——为了消除歧义，我创建了一组全新的资源。标识一个顾客的URI上的GET方法正好相当于getCustomerDetails操作。有人用三角形形象化地说明了这一点：</p>
<p><img src="/images/django/rest1.jpg" alt=""></p>
<p>可以看到在第一种方法中，你拥有许多操作，许多种类的数据以及固定数量的“实例”（本质上和你拥有的服务程序数量一致）。在第二种方法中，你拥有固定数量的操作，许多种类的数据和许多调用固定方法的对象。它的意义在于，证明了通过这两种方式，你基本上可以表示任何你喜欢的事情。</p>
<h2 id="设计原则："><a href="#设计原则：" class="headerlink" title="设计原则："></a>设计原则：</h2><h3 id="显式的使用HTTP方法"><a href="#显式的使用HTTP方法" class="headerlink" title="显式的使用HTTP方法"></a>显式的使用HTTP方法</h3><p>​    REST 要求开发人员显式地使用 HTTP 方法，并且使用方式与协议定义一致。 这个基本 REST 设计原则建立了创建、读取、更新和删除（create, read, update, and delete，CRUD）操作与 HTTP 方法之间的一对一映射<strong>（且在URL中不应该使用动词）</strong>。 根据此映射：</p>
<ul>
<li>若要在服务器上创建资源，应该使用 POST 方法。</li>
<li>若要检索某个资源，应该使用 GET 方法。</li>
<li>若要更改资源状态或对其进行更新，应该使用 PUT 方法。</li>
<li>若要删除某个资源，应该使用 DELETE 方法。</li>
</ul>
<p>e.g1：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /adduser?name=Robert HTTP/1.1</span><br><span class="line">这是一个不好的设计，因为通过GET进行了更改操作, GET应该仅适用于检索</span><br><span class="line">，正确的方法是使用POST:</span><br><span class="line"></span><br><span class="line">POST /users HTTP/1.1</span><br><span class="line">Host: myserver</span><br><span class="line">Content-Type: application/xml</span><br><span class="line">&lt;?xml version="1.0"?&gt;</span><br><span class="line">&lt;user&gt;</span><br><span class="line">  &lt;name&gt;Robert&lt;/name&gt;</span><br><span class="line">&lt;/user&gt;</span><br></pre></td></tr></table></figure>
<p>e.g.2</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET /updateuser?name=Robert&amp;newname=Bob HTTP/1.1</span><br><span class="line">通过HTTP GET进行了更新，正确做法是使用PUT</span><br><span class="line"></span><br><span class="line">PUT /users/Robert HTTP/1.1</span><br><span class="line">Host: myserver</span><br><span class="line">Content-Type: application/xml</span><br><span class="line">&lt;?xml version="1.0"?&gt;</span><br><span class="line">&lt;user&gt;</span><br><span class="line">  &lt;name&gt;Bob&lt;/name&gt;</span><br><span class="line">&lt;/user&gt;</span><br></pre></td></tr></table></figure>
<h3 id="无状态"><a href="#无状态" class="headerlink" title="无状态"></a>无状态</h3><p>​    无状态意味着 完整、独立的请求不要求服务器在处理请求时检索任何类型的应用程序上下文或状态。 REST Web 服务应用程序（或客户端）在 HTTP Header 和请求正文中包括服务器端组件生成响应所需要的所有参数、上下文和数据。</p>
<p>eg:</p>
<p><img src="/images/django/youzhuangtai.jpg" alt="有状态的设计"></p>
<p>而无状态的服务器端组件不那么复杂，很容易跨进行负载平衡的服务器进行设计、编写和分布。 无状态的服务不仅性能更好，而且还将大部分状态维护职责转移给客户端应用程序。 在基于 REST 的 Web 服务中，服务器负责生成响应，并提供使客户端能够独自维护应用程序状态的接口。 例如，在针对多页结果集的请求中，客户端应该包括要检索的实际页编号，而不是简单地要求检索<em>下一页</em>（请参见图 2）</p>
<p><img src="/images/django/wuzhuangtai.jpg" alt="无状态的设计"></p>
<h3 id="公开目录结构式的URI"><a href="#公开目录结构式的URI" class="headerlink" title="公开目录结构式的URI"></a>公开目录结构式的URI</h3><p><strong>从对资源寻址的客户端应用程序的角度看，URI 决定了 REST Web 服务将具有的直观程度，以及服务是否将以设计人员能够预测的方式被使用</strong>。 基于 REST 的 Web 服务的第三个特征完全与 URI 相关。</p>
<p>REST Web 服务 URI 的直观性应该达到很容易猜测的程度。 将 URI 看作是自身配备文档说明的接口，开发人员只需很少（如果有的话）的解释或参考资料即可了解它指向什么，并获得相关的资源。 为此，URI 的结构应该简单、可预测且易于理解。</p>
<p>实现这种级别的可用性的方法之一是定义目录结构式的 URI。 此类 URI 具有层次结构，其根为单个路径，从根开始分支的是公开服务的主要方面的子路径。 根据此定义，URI 并不只是斜杠分隔的字符串，而是具有在节点上连接在一起的下级和上级分支的树。 例如，在一个收集从 Java 到报纸的各种主题的讨论线程服务中，您可能定义类似如下的结构化 URI 集合：<br><code>http://www.myservice.org/discussion/topics/{topic}</code></p>
<p>根 <code>/discussion</code> 之下有一个 <code>/topics</code> 节点。 该节点之下有一系列主题名称，例如闲谈、技术等等，每个主题名称指向某个讨论线程。 在此结构中，只需在 /topics/ 后面输入某个内容即可容易地收集讨论线程。</p>
<p>在某些情况下，指向资源的路径尤其适合于目录式结构。 例如，以按日期进行组织的资源为例，这种资源非常适合于使用层次结构语法。</p>
<p>此示例非常直观，因为它基于规则：<br><code>http://www.myservice.org/discussion/2008/12/10/{topic}</code></p>
<p>第一个路径片段是四个数字的年份，第二个路径片断是两个数字的日期，第三个片段是两个数字的月份。 这样解释它可能有点愚蠢，但这就是我们追求的简单级别。 人类和计算机能够容易地生成类似如此的结构化 URI，因为这些 URI 基于规则。 在语法的空隙中填入路径部分就大功告成了，因为存在用于组合 URI 的明确模式：<br><code>http://www.myservice.org/discussion/{year}/{day}/{month}/{topic}</code></p>
<p>在考虑基于 REST 的 Web 服务的 URI 结构时，需要指出的一些附加指导原则包括：</p>
<ul>
<li>隐藏服务器端脚本技术文件扩展名（.jsp、.php、.asp）——如果有的话，以便您能够移植到其他脚本技术而不用更改 URI。</li>
<li>将所有内容保持小写。</li>
<li>将空格替换为连字符或下划线（其中一种或另一种）。</li>
<li>尽可能多地避免查询字符串。</li>
<li>如果请求 URI 用于部分路径，与使用 404 Not Found 代码不同，应该始终提供缺省页面或资源作为响应。</li>
</ul>
<p>URI 还应该是静态的，以便在资源发生更改或服务的实现发生更改时，链接保持不变。 这可以实现书签功能。 URI 中编码的资源之间的关系与在存储资源的位置表示资源关系的方式无关也是非常重要的。</p>
<h3 id="传输XML或者JSON"><a href="#传输XML或者JSON" class="headerlink" title="传输XML或者JSON"></a>传输XML或者JSON</h3><h2 id="In-Conclusion"><a href="#In-Conclusion" class="headerlink" title="In Conclusion"></a>In Conclusion</h2><p>REST除了给我们带来了一个崭新的架构以外，还有一个重要的贡献是在开发系统过程中的一种新的思维方式：通过url来设计系统的结构。根据REST，每个url都代表一个resource<strong>（URL中不能带有动词）</strong>，而整个系统就是由这些resource组成的。因此，如果url是设计良好的，那么系统的结构就也应该是设计良好的。</p>
<h1 id="Django-Rest-Framework"><a href="#Django-Rest-Framework" class="headerlink" title="Django Rest Framework"></a>Django Rest Framework</h1><p>waiting …</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm" target="_blank" rel="noopener">Architectural Styles andthe Design of Network-based Software Architectures</a></li>
<li><a href="http://baike.baidu.com/item/rest/6330506" target="_blank" rel="noopener">百度知道REST</a></li>
<li><a href="https://www.ibm.com/developerworks/cn/webservices/ws-restful/" target="_blank" rel="noopener">基于REST的WEB服务</a></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> django </tag>
            
            <tag> rest </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[longestPalindrome]]></title>
      <url>/2017/05/06/LeetCode/5-longestPalindrome/</url>
      <content type="html"><![CDATA[<h2 id="LeetCode5-longestPalindrome题解"><a href="#LeetCode5-longestPalindrome题解" class="headerlink" title="LeetCode5- longestPalindrome题解"></a>LeetCode5- longestPalindrome题解</h2><a id="more"></a>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Given a string <strong>s</strong>, find the longest palindromic substring in <strong>s</strong>. You may assume that the maximum length of <strong>s</strong> is 1000.</p>
<p><strong>Examples:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;babad&quot;</span><br><span class="line"></span><br><span class="line">Output: &quot;bab&quot;</span><br><span class="line"></span><br><span class="line">Note: &quot;aba&quot; is also a valid answer.</span><br></pre></td></tr></table></figure>
<h2 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h2><p>首先判断字符串长度是否为0或1，满足条件直接返回</p>
<p>回文可以分为两类，一类长度是奇数，一类长度是偶数。奇数情况下以任意一个字符<code>s[i]</code>为中心向两边拓展，直到到达边界或遇到<code>s[i-j]!=s[i+j]</code>止。偶数情况下以两个字符<code>s[i],s[i+1]</code>为中心扩展，直到到达边界或遇到<code>s[i-j]!=s[i+j+1]</code>为止</p>
<h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>外层循环为O(n)复杂度，内层循环最坏情况下(abababababa这样的字符串)是O(n/2),所以总的时间复杂度是$O(n^2)$,按这个算法跑下来用时398ms</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">longestPalindrome</span><span class="params">(self, s)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    :type s: str</span></span><br><span class="line"><span class="string">    :rtype: str</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    ans=<span class="string">""</span></span><br><span class="line">    length=len(s)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(length&lt;=<span class="number">1</span> <span class="keyword">or</span> s==s[::<span class="number">-1</span>]):<span class="comment">#如果字符串长度为1直接返回</span></span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,length<span class="number">-1</span>): <span class="comment">#最大回文字符串长度为偶数</span></span><br><span class="line">        j=<span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span>(i&gt;=j <span class="keyword">and</span> i+j+<span class="number">1</span>&lt;length <span class="keyword">and</span> s[i-j]==s[i+j+<span class="number">1</span>]):</span><br><span class="line">            j=j+<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="number">2</span>*j&gt;len(ans)):</span><br><span class="line">            <span class="comment">#print "here",i,j</span></span><br><span class="line">            ans=s[i-(j<span class="number">-1</span>):i+j+<span class="number">1</span>]</span><br><span class="line">            <span class="comment">#print ans</span></span><br><span class="line"></span><br><span class="line">                </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,length<span class="number">-1</span>): <span class="comment">#最大回文字符串长度位奇数</span></span><br><span class="line">        j=<span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span>(i&gt;=j <span class="keyword">and</span> i+j&lt;length <span class="keyword">and</span> s[i-j]==s[i+j]):</span><br><span class="line">            j=j+<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="number">2</span>*j<span class="number">-1</span>&gt;=len(ans)):</span><br><span class="line">            <span class="comment">#print "there",i,j</span></span><br><span class="line">            ans=s[i-(j<span class="number">-1</span>):i+(j<span class="number">-1</span>)+<span class="number">1</span>]</span><br><span class="line">            <span class="comment">#print ans</span></span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>
<h2 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h2><p>可以证明，在任何一个字符串后面加上一个字符后，最长的回文子串的长度只可能不增加、或者增加1或2 (abab + a情况下长度增加2) (caba+c情况下长度增加1) 。 所以我们只用遍历s的每一个字符，每增加一个字符之后判断最长回文子串的长度是增加1还是2， python  中有一个非常方便的判断字符串是否是回文的方法s==s[::-1]复杂度是$O(n)$</p>
<h3 id="时间复杂度-1"><a href="#时间复杂度-1" class="headerlink" title="时间复杂度:"></a>时间复杂度:</h3><p>$O(n)$,运行时间只有82ms</p>
<h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Runtime: 82 ms</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestPalindrome2</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        length=len(s)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(length&lt;=<span class="number">1</span> <span class="keyword">or</span> s==s[::<span class="number">-1</span>]):<span class="comment">#如果字符串长度为1直接返回</span></span><br><span class="line">            <span class="keyword">return</span> s</span><br><span class="line">        </span><br><span class="line">        start=<span class="number">0</span></span><br><span class="line">        maxLen=<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,length):</span><br><span class="line">            <span class="comment">##注意s[1:3]表示的是第2个和第3个char</span></span><br><span class="line">            <span class="keyword">if</span> i-maxLen&gt;=<span class="number">1</span> <span class="keyword">and</span> s[i-maxLen<span class="number">-1</span>:i+<span class="number">1</span>]==s[i-maxLen<span class="number">-1</span>:i+<span class="number">1</span>][::<span class="number">-1</span>]:</span><br><span class="line">                start=i-maxLen<span class="number">-1</span></span><br><span class="line">                maxLen+=<span class="number">2</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> i-maxLen&gt;=<span class="number">0</span> <span class="keyword">and</span> s[i-maxLen:i+<span class="number">1</span>]==s[i-maxLen:i+<span class="number">1</span>][::<span class="number">-1</span>]:</span><br><span class="line">                start=i-maxLen</span><br><span class="line">                maxLen+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> s[start:start+maxLen]</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 厚积薄发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[字符集与编码]]></title>
      <url>/2017/05/04/Python/%E5%AD%97%E7%AC%A6%E9%9B%86%E4%B8%8E%E7%BC%96%E7%A0%81/</url>
      <content type="html"><![CDATA[<h1 id="字符集与编码"><a href="#字符集与编码" class="headerlink" title="字符集与编码"></a>字符集与编码</h1><p>编码问题一直以来都是很多程序员的噩梦，有时候好不容易写好一个带着详细注释的代码文件，保存一下再打开就发现注释全都乱码了。自己工作的时候还好，摸索一下弄对编码就好了。但是如果是多人协作或者发布产品时，没有统一好编码就会造成很大的问题，特别是对于来自不同国家使用不同语言的工作人员/用户来说。因此，统一编码是非常重要的，也就有了Unicode的出现。</p>
<a id="more"></a>
<blockquote>
<p>这里有几个概念需要先弄清楚</p>
<p><strong>Unicode是一个字符集，UTF-8是一种字符编码方案，UTF-8是最常使用的一种Unicode的编码方式</strong></p>
<ol>
<li>Character repertoire 字符集：一个系统所能支持的所有抽象字符，如ASCII标准的字符集，只包含西文字符和符号；或者Unicode标准的字符集</li>
<li>Character encoding scheme 字符编码方案：是指字符集和比特流之间的映射关系，给你一个字符如何把它转换成二进制比特流存储在计算机中，Unicode字符集的编码方式有UTF-8 UTF-16等，而ASCII、GB2312这些标准是一个字符集对应一种编码方案，所以通常我们说ASCII的时候既可以只编码，又可以指字符集</li>
</ol>
</blockquote>
<h2 id="为什么要进行编码？"><a href="#为什么要进行编码？" class="headerlink" title="为什么要进行编码？"></a>为什么要进行编码？</h2><p>对于计算机而言，一切信息都是01比特流，不同01组合表示不同的信息；但是01比特流对人来说就不那么友好了，所以如何用<strong>01比特流来表示自然语言</strong>就是编码产生的原因</p>
<h2 id="ASCII码"><a href="#ASCII码" class="headerlink" title="ASCII码"></a>ASCII码</h2><p>（<strong>American Standard Code for Information Interchange，美国信息互换标准代码</strong>）</p>
<p>我们知道，在计算机内部，所有的信息最终都表示为一个二进制的字符串。每一个二进制位（bit）有0和1两种状态，因此八个二进制位就可以组合出256种状态，这被称为一个字节（byte）。也就是说，一个字节一共可以用来表示256种不同的状态，每一个状态对应一个符号，就是256个符号，从0000000到11111111。</p>
<p>上个世纪60年代，美国制定了一套字符编码，对英语字符与二进制位之间的关系，做了统一规定。这被称为ASCII码，一直沿用至今。</p>
<p>ASCII码一共规定了128个字符的编码，比如空格”SPACE”是32（二进制00100000），大写的字母A是65（二进制01000001）。这128个符号（包括32个不能打印出来的控制符号），只占用了一个字节的后面7位，最前面的1位统一规定为0。</p>
<h2 id="非ASCII码"><a href="#非ASCII码" class="headerlink" title="非ASCII码"></a>非ASCII码</h2><p>英语用128个符号编码就够了，但是用来表示其他语言，128个符号是不够的。比如，在法语中，字母上方有注音符号，它就无法用ASCII码表示。于是，一些欧洲国家就决定，利用字节中闲置的最高位编入新的符号。比如，法语中的é的编码为130（二进制10000010）。这样一来，这些欧洲国家使用的编码体系，可以表示最多256个符号。</p>
<p>但是，这里又出现了新的问题。不同的国家有不同的字母，因此，哪怕它们都使用256个符号的编码方式，代表的字母却不一样。比如，130在法语编码中代表了é，在希伯来语编码中却代表了字母Gimel (ג)，在俄语编码中又会代表另一个符号。但是不管怎样，所有这些编码方式中，0–127表示的符号是一样的，不一样的只是128–255的这一段。</p>
<p>至于亚洲国家的文字，使用的符号就更多了，汉字就多达10万左右。一个字节只能表示256种符号，肯定是不够的，就必须使用多个字节表达一个符号。比如，简体中文常见的编码方式是GB2312，使用两个字节表示一个汉字，所以理论上最多可以表示256x256=65536个符号。</p>
<p>##Unicode</p>
<p>正如上一节所说，世界上存在着多种编码方式，同一个二进制数字可以被解释成不同的符号。因此，要想打开一个文本文件，就必须知道它的编码方式，否则用错误的编码方式解读，就会出现乱码。为什么电子邮件常常出现乱码？就是因为发信人和收信人使用的编码方式不一样。</p>
<p>可以想象，如果有一种编码，将世界上所有的符号都纳入其中。每一个符号都给予一个独一无二的编码，那么乱码问题就会消失。这就是Unicode，就像它的名字都表示的，这是一种所有符号的编码。</p>
<p>Unicode当然是一个很大的集合，现在的规模可以容纳100多万个符号。每个符号的编码都不一样，比如，U+0639表示阿拉伯字母Ain，U+0041表示英语的大写字母A，U+4E25表示汉字”严”。具体的符号对应表，可以查询<a href="http://www.unicode.org/" target="_blank" rel="noopener">unicode.org</a>，或者专门的<a href="http://www.chi2ko.com/tool/CJK.htm" target="_blank" rel="noopener">汉字对应表</a>。</p>
<h3 id="Unicode存在的问题："><a href="#Unicode存在的问题：" class="headerlink" title="Unicode存在的问题："></a>Unicode存在的问题：</h3><p>需要注意的是，Unicode只是一个符号集，它只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储。</p>
<p>比如，汉字”严”的unicode是十六进制数4E25，转换成二进制数足足有15位（100111000100101），也就是说这个符号的表示至少需要2个字节。表示其他更大的符号，可能需要3个字节或者4个字节，甚至更多。</p>
<p>这里就有两个严重的问题，第一个问题是，如何才能区别Unicode和ASCII？计算机怎么知道三个字节表示一个符号，而不是分别表示三个符号呢？第二个问题是，我们已经知道，英文字母只用一个字节表示就够了，如果Unicode统一规定，每个符号用三个或四个字节表示，那么每个英文字母前都必然有二到三个字节是0，这对于存储来说是极大的浪费，文本文件的大小会因此大出二三倍，这是无法接受的。</p>
<p>它们造成的结果是：1）出现了Unicode的多种存储方式，也就是说有许多种不同的二进制格式，可以用来表示Unicode。2）Unicode在很长一段时间内无法推广，直到互联网的出现。</p>
<h2 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h2><p>互联网的普及，强烈要求出现一种统一的编码方式。<strong>UTF-8就是在互联网上使用最广的一种Unicode的实现方式</strong></p>
<p>UTF-8最大的一个特点，就是它是<strong>一种变长的编码方式</strong>。它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度。</p>
<p>UTF-8的编码规则很简单，只有二条：</p>
<p>1）对于单字节的符号，字节的第一位设为0，后面7位为这个符号的unicode码。因此对于英语字母，UTF-8编码和ASCII码是相同的。</p>
<p>2）对于n字节的符号（n&gt;1），第一个字节的前n位都设为1，第n+1位设为0，后面字节的前两位一律设为10。剩下的没有提及的二进制位，全部为这个符号的unicode码。</p>
<p>下表总结了编码规则，字母x表示可用编码的位。</p>
<p>Unicode符号范围 | UTF-8编码方式<br>(十六进制) | （二进制）<br>——————–+———————————————<br>0000 0000-0000 007F | 0xxxxxxx<br>0000 0080-0000 07FF | 110xxxxx 10xxxxxx<br>0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx<br>0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</p>
<p>跟据上表，解读UTF-8编码非常简单。如果一个字节的第一位是0，则这个字节单独就是一个字符；如果第一位是1，则连续有多少个1，就表示当前字符占用多少个字节。</p>
<p>下面，还是以汉字”严”为例，演示如何实现UTF-8编码。</p>
<p>已知”严”的unicode是4E25（100111000100101），根据上表，可以发现4E25处在第三行的范围内（0000 0800-0000 FFFF），因此”严”的UTF-8编码需要三个字节，即格式是”1110xxxx 10xxxxxx 10xxxxxx”。然后，从”严”的最后一个二进制位开始，依次从后向前填入格式中的x，多出的位补0。这样就得到了，”严”的UTF-8编码是”11100100 10111000 10100101”，转换成十六进制就是E4B8A5。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;b=<span class="string">u"严"</span></span><br><span class="line">&gt;&gt;&gt;b</span><br><span class="line"><span class="string">u'\u4e25'</span></span><br><span class="line">&gt;&gt;&gt;a=<span class="string">"严"</span></span><br><span class="line">&gt;&gt;&gt;a</span><br><span class="line"><span class="string">'\xe4\xb8\a5'</span></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;b.encode(<span class="string">"utf-8"</span>)</span><br><span class="line"><span class="string">'\xe4\xb8\xa5'</span></span><br><span class="line">&gt;&gt;&gt;b.encode(<span class="string">'ascii'</span>)</span><br><span class="line">UnicodeEncodeError: <span class="string">'ascii'</span> codec can<span class="string">'t encode character u'</span>\u4e25<span class="string">' in position 0: ordinal not in range(128)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt;&gt;&gt;'</span>\xe4\xb8\xa5<span class="string">'.decode('</span>utf<span class="number">-8</span><span class="string">')</span></span><br><span class="line"><span class="string">u'</span>\u4e25<span class="string">'</span></span><br></pre></td></tr></table></figure>
<h2 id="Python的字符串与编码"><a href="#Python的字符串与编码" class="headerlink" title="Python的字符串与编码"></a>Python的字符串与编码</h2><h3 id="Py文件中的编码"><a href="#Py文件中的编码" class="headerlink" title="Py文件中的编码"></a>Py文件中的编码</h3><p>Python默认脚本文件都是ANSCII编码，当文件中包含中文字符的时候就需要在第一行加上编码声明</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br></pre></td></tr></table></figure>
<p>第一行注释是为了告诉Linux/OS X系统，这是一个Python可执行程序，Windows系统会忽略这个注释；</p>
<p>第二行注释是为了告诉Python解释器，按照UTF-8编码读取源代码，否则，你在源代码中写的中文输出可能会有乱码。</p>
<h3 id="Python中的编码与解码"><a href="#Python中的编码与解码" class="headerlink" title="Python中的编码与解码"></a>Python中的编码与解码</h3><p>因为Python的诞生比Unicode标准发布的时间还要早，所以最早的Python只支持ASCII编码，普通的字符串<code>&#39;ABC&#39;</code>在Python内部都是ASCII编码的。Python提供了ord()和chr()函数，可以把字母和对应的数字相互转换：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;ord(<span class="string">'A'</span>)</span><br><span class="line"><span class="number">65</span></span><br><span class="line">&gt;&gt;&gt;chr(<span class="number">65</span>)</span><br><span class="line"><span class="string">'A'</span></span><br></pre></td></tr></table></figure>
<p>Python后来添加了对Unicode的支持，以Unicode表示的字符串用<code>u&#39;...&#39;</code>来表示，比如</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="string">u'中文'</span></span><br><span class="line">中文</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">u'中'</span></span><br><span class="line"><span class="string">u'\u4e2d'</span></span><br></pre></td></tr></table></figure>
<p>写<code>u&#39;中&#39;</code>和<code>u&#39;\u4e2d&#39;</code>是一样的，<code>\u</code>后面是十六进制的Unicode码。因此，<code>u&#39;A&#39;</code>和<code>u&#39;\u0041&#39;</code>也是一样的。</p>
<p>把<code>u&#39;xxx&#39;</code>Unicode转换为UTF-8编码的<code>&#39;xxx&#39;</code>用<code>encode(&#39;utf-8&#39;)</code>方法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">u'ABC'</span>.encode(<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="string">'ABC'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">u'中文'</span>.encode(<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="string">'\xe4\xb8\xad\xe6\x96\x87'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Python当然也支持其他编码方式，比如把Unicode编码成GB2312, 这种方式纯属自找麻烦，如果没有特殊业务要求，请牢记仅使用Unicode和UTF-8这两种编码方式。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">u'中文'</span>.encode(<span class="string">'gb2312'</span>)</span><br><span class="line"><span class="string">'\xd6\xd0\xce\xc4'</span></span><br></pre></td></tr></table></figure>
<p>反过来，把UTF-8编码表示的字符串<code>&#39;xxx&#39;</code>转换为Unicode字符串<code>u&#39;xxx&#39;</code>用<code>decode(&#39;utf-8&#39;)</code>方法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'abc'</span>.decode(<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="string">u'abc'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'\xe4\xb8\xad\xe6\x96\x87'</span>.decode(<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="string">u'\u4e2d\u6587'</span></span><br><span class="line"><span class="comment">#这里u'\u4e2d\u6587'与u'中文'是一样的</span></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;<span class="string">'\xd6\xd0\xce\xc4'</span>.decode(<span class="string">'gb2312'</span>)</span><br><span class="line"><span class="string">u'\u4e2d\u6587'</span></span><br></pre></td></tr></table></figure>
<h3 id="非法字符"><a href="#非法字符" class="headerlink" title="非法字符"></a>非法字符</h3><p>对于一些非法字符，如全角空格，转码过程会出现异常。解决办法是：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.decode(<span class="string">"gbk"</span>,<span class="string">'ignore'</span>)</span><br></pre></td></tr></table></figure>
<p>因为decode函数原型是 <code>decode([encoding],[errors=&#39;strict&#39;])</code> 可以用第二个参数来控制错误处理的策略，默认的参数是strict，代表遇到非法字符时候抛出异常</p>
<ul>
<li>ignore：会忽略非法字符</li>
<li>replace：会用？取代非法字符</li>
<li>xmlcharreplace：使用XML的字符引用</li>
</ul>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>由于历史遗留问题，Python 2.x版本虽然支持Unicode，但在语法上需要<code>&#39;xxx&#39;</code>和<code>u&#39;xxx&#39;</code>两种字符串表示方式。</p>
<p>在Python 3.x版本中，把<code>&#39;xxx&#39;</code>和<code>u&#39;xxx&#39;</code>统一成Unicode编码，即写不写前缀<code>u</code>都是一样的，而以字节形式表示的字符串则必须加上<code>b</code>前缀：<code>b&#39;xxx&#39;</code>。</p>
<p>格式化字符串的时候，可以用Python的交互式命令行测试，方便快捷。</p>
<p>用代码说就是</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;a=<span class="string">"中文"</span></span><br><span class="line"><span class="comment"># Python 字符串之前不加u的话 默认使用UTF-8编码方法存储中文</span></span><br><span class="line">&gt;&gt;&gt;a</span><br><span class="line"><span class="string">'\xe4\xb8\xad\xe6\x96\x87'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果想让它能正常显示出来，需要按utf-8的方法解码成Unicode</span></span><br><span class="line">&gt;&gt;&gt;a.decode(<span class="string">"utf-8"</span>)</span><br><span class="line"><span class="string">u'\u4e2d\u6587'</span></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;a=<span class="string">u"中文"</span> </span><br><span class="line"><span class="comment">#字符串前加u的话 使用Unicode方式存储</span></span><br><span class="line">&gt;&gt;&gt;a</span><br><span class="line"><span class="string">u'\u4e2d\u6587'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#如果想让它保存成UTF-8的编码形式</span></span><br><span class="line">&gt;&gt;&gt;a.encode(<span class="string">"utf-8"</span>)</span><br><span class="line"><span class="string">'\xe4\xb8\xad\xe6\x96\x87'</span></span><br></pre></td></tr></table></figure>
<h2 id="Python的编码检测"><a href="#Python的编码检测" class="headerlink" title="Python的编码检测"></a>Python的编码检测</h2><p>使用chardet可以很方便的时间字符串/文本的检测</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="keyword">import</span> urllib</span><br><span class="line">&gt;&gt;&gt;rawdata = urllib.urlopen(<span class="string">'http://www.google.cn/'</span>).read()</span><br><span class="line">&gt;&gt;&gt;<span class="keyword">import</span> chardet</span><br><span class="line">&gt;&gt;&gt;chardet.detect(rawdata)</span><br><span class="line">&#123;<span class="string">'confidence'</span>: <span class="number">0.98999999999999999</span>, <span class="string">'encoding'</span>: <span class="string">'GB2312'</span>&#125;</span><br><span class="line">&gt;&gt;&gt;a=<span class="string">"中文说的好不好"</span></span><br><span class="line">&gt;&gt;&gt;chardet.detect(a)</span><br><span class="line">&#123;<span class="string">'confidence'</span>: <span class="number">0.98999999999999999</span>, <span class="string">'encoding'</span>: <span class="string">'utf-8'</span>&#125;</span><br><span class="line">&gt;&gt;&gt;chardet.detect(a.decode(<span class="string">"utf-8"</span>).encode(<span class="string">"gbk"</span>))</span><br><span class="line">&#123;<span class="string">'confidence'</span>: <span class="number">0.99</span>, <span class="string">'encoding'</span>: <span class="string">'GB2312'</span>&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考与感谢"><a href="#参考与感谢" class="headerlink" title="参考与感谢"></a>参考与感谢</h2><h3 id="廖雪峰python3教程"><a href="#廖雪峰python3教程" class="headerlink" title="廖雪峰python3教程"></a>廖雪峰python3教程</h3><ul>
<li><a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431664106267f12e9bef7ee14cf6a8776a479bdec9b9000" target="_blank" rel="noopener">字符串和编码</a></li>
</ul>
<h3 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h3><ul>
<li><a href="http://2wildkids.com/2016/10/12/%E5%AD%97%E7%AC%A6%E9%9B%86%E4%B8%8E%E7%BC%96%E7%A0%81%E7%9A%84%E6%81%A9%E6%80%A8%E6%83%85%E4%BB%87/" target="_blank" rel="noopener">字符集与编码的恩怨情仇</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html" target="_blank" rel="noopener">字符编码笔记：ASCII，Unicode和UTF-8 </a></li>
<li><a href="http://gitbook.cn/books/599d075614d1bc13375caeaf/index.html" target="_blank" rel="noopener">字符编码的前世今生</a></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> Unicode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SSID,BSSID,ESSID]]></title>
      <url>/2017/05/03/SSID&amp;BSSID/</url>
      <content type="html"><![CDATA[<h1 id="Understanding-the-Network-Terms-SSID-BSSID-and-ESSID"><a href="#Understanding-the-Network-Terms-SSID-BSSID-and-ESSID" class="headerlink" title="Understanding the Network Terms SSID, BSSID, and ESSID"></a>Understanding the Network Terms SSID, BSSID, and ESSID</h1><p>The terms BSSID, ESSID, and SSID are all used to describe sections of a wireless network (WLAN)—the three terms have slightly different meanings. As a wireless user you are concerned only with the broadcast SSIDs that let you connect to a wireless network. As an administrator, you also need to keep track of BSSIDs and, to a lesser degree, ESSIDs.</p>
<a id="more"></a>
<p>This topic describes:</p>
<ul>
<li><a href="http://www.juniper.net/techpubs/en_US/junos-space-apps12.3/network-director/topics/concept/wireless-ssid-bssid-essid.html#jd0e34" target="_blank" rel="noopener">An SSID is the Name of a Network</a></li>
<li><a href="http://www.juniper.net/techpubs/en_US/junos-space-apps12.3/network-director/topics/concept/wireless-ssid-bssid-essid.html#jd0e47" target="_blank" rel="noopener">BSSIDs Identify Access Points and Their Clients</a></li>
<li><a href="http://www.juniper.net/techpubs/en_US/junos-space-apps12.3/network-director/topics/concept/wireless-ssid-bssid-essid.html#jd0e72" target="_blank" rel="noopener">An ESS Consists of BSSs</a></li>
</ul>
<h2 id="An-SSID-is-the-Name-of-a-Network"><a href="#An-SSID-is-the-Name-of-a-Network" class="headerlink" title="An SSID is the Name of a Network"></a>An SSID is the Name of a Network</h2><p>Because multiple WLANs can coexist in one airspace, each WLAN needs a unique name—this name is the service set ID (SSID) of the network. Your wireless device can see the SSIDs for all available networks—therefore, when you click a wireless icon, the SSIDs recognized by device are listed. For example, suppose your wireless list consists of three SSIDs named Student, Faculty, and Voice. This means that an administrator has created three WLAN Service profiles and, as part of each WLAN service profile, provided the SSID name Student, Faculty, or Voice. (For directions to create a WLAN Service profile, see <a href="http://www.juniper.net/techpubs/en_US/junos-space-apps12.3/network-director/topics/task/configuration/WLAN-profile-managing-task.html" target="_blank" rel="noopener">Creating and Managing a WLAN Service Profile</a>.)</p>
<p>Figure 1: Radios can have up to 32 SSIDs</p>
<p><img src="http://www.juniper.net/techpubs/images/g041301.gif" alt="Radios can have up to 32 SSIDs"></p>
<p>As a WLAN user, you are concerned only with the SSIDs. You select one from the list on your laptop or other device, provide your username and a password, and use the SSID. You might not have access to all SSIDs—the authentication and access privileges are usually different for different WLANs and their associated SSIDs.</p>
<h2 id="BSSIDs-Identify-Access-Points-and-Their-Clients"><a href="#BSSIDs-Identify-Access-Points-and-Their-Clients" class="headerlink" title="BSSIDs Identify Access Points and Their Clients"></a>BSSIDs Identify Access Points and Their Clients</h2><p>Packets bound for devices within the WLAN need to go to the correct destination. The SSID keeps the packets within the correct WLAN, even when overlapping WLANs are present. However, there are usually multiple access points within each WLAN, and there has to be a way to identify those access points and their associated clients. This identifier is called a basic service set identifier (BSSID) and is included in all wireless packets.</p>
<p>Figure 2: Each Access Point Has Its Own BSS</p>
<p><img src="http://www.juniper.net/techpubs/images/g041300.gif" alt="Each Access Point Has Its Own BSS"></p>
<p>As a user, you are usually unaware of which basic service set (BSS) you currently belong to. When you physically move your laptop from one room to another, the BSS you use could change because you moved from the area covered by one access point to the area covered by another access point, but this does not affect the connectivity of your laptop.</p>
<p>As an administrator, you are interested in the activity within each BSS. This tells you what areas of the network might be overloaded, and it helps you locate a particular client. By convention, an access point’s MAC address is used as the ID of a BSS (BSSID). Therefore, if you know the MAC address, you know the BSSID—and, because all packets contain the originator’s BSSID, you can trace a packet. This works fine for an access point with one radio and one WLAN configured.</p>
<p>Most often, there are different BSSIDs on an access point for each WLAN configured on a radio. If you have an access point with 2 radios and 32 WLANs configured on each, you would have 64 BSSIDs plus the base access point BSSID. To accommodate the multiple BSSIDs, each access point is assigned a unique block of 64 MAC addresses. Each radio has 32 MAC addresses and supports up to 32 service set identifiers (SSIDs), with one MAC address assigned to each SSID as a basic service set identification (BSSID). All MAC addresses for an access point are assigned based on the base MAC address of the access point.</p>
<table>
<thead>
<tr>
<th><img src="http://www.juniper.net/techpubs/images/note.gif" alt="img"></th>
<th><strong>Note: </strong>The access point MAC address block is listed on a label on the back of the access point.</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<p>To view a list of SSIDs for a network, look at the list of WLAN Service Profiles in Network Director.</p>
<h3 id="Ad-Hoc-Networks-Do-Not-Have-a-MAC-Address"><a href="#Ad-Hoc-Networks-Do-Not-Have-a-MAC-Address" class="headerlink" title="Ad-Hoc Networks Do Not Have a MAC Address"></a>Ad-Hoc Networks Do Not Have a MAC Address</h3><p>Every BSS needs a BSSID, and using the access point’s MAC address works fine most of the time. However, an ad-hoc network, a network that forwards traffic from node to node, has no access point. When a BSS does not have a physical access point, in an ad-hoc network for example, the network generates a 48-bit string of numbers that looks and functions just like a MAC address, and that BSSID goes in every packet.</p>
<h2 id="An-ESS-Consists-of-BSSs"><a href="#An-ESS-Consists-of-BSSs" class="headerlink" title="An ESS Consists of BSSs"></a>An ESS Consists of BSSs</h2><p>An extended basic service set (ESS) consists of all of the BSSs in the network. For all practical purposes, the ESSID identifies the same network as the SSID does. The term SSID is used most often.</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[lengthOfLongestSubstring]]></title>
      <url>/2017/04/26/LeetCode/3-lengthOfLongestSubstring/</url>
      <content type="html"><![CDATA[<h2 id="LeetCode3-lengthOfLongestSubstring题解"><a href="#LeetCode3-lengthOfLongestSubstring题解" class="headerlink" title="LeetCode3- lengthOfLongestSubstring题解"></a>LeetCode3- lengthOfLongestSubstring题解</h2><a id="more"></a>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Given a string, find the length of the <strong>longest substring</strong> without repeating characters.</p>
<p><strong>Examples:</strong></p>
<p>Given <code>&quot;abcabcbb&quot;</code>, the answer is <code>&quot;abc&quot;</code>, which the length is 3.</p>
<p>Given <code>&quot;bbbbb&quot;</code>, the answer is <code>&quot;b&quot;</code>, with the length of 1.</p>
<p>Given <code>&quot;pwwkew&quot;</code>, the answer is <code>&quot;wke&quot;</code>, with the length of 3. Note that the answer must be a <strong>substring</strong>, <code>&quot;pwke&quot;</code> is a <em>subsequence</em> and not a substring.</p>
<h2 id="思路一："><a href="#思路一：" class="headerlink" title="思路一："></a>思路一：</h2><p>外层循环，遍历每个字符，计算以该字符为首的最长的substring</p>
<p>（可以定义个<code>boolean allUnique(String substring)</code>来判断这个substring中的所有char是否相互不同）</p>
<h3 id="时间复杂度："><a href="#时间复杂度：" class="headerlink" title="时间复杂度："></a>时间复杂度：</h3><p>对于每一个i，判断[i,j)中的字符串是否为substring，判断函数需要花费$O(j-i)$时间</p>
<p>所以总的时间复杂度是</p>
<p>$$O(\sum<em>{i=0}^{n-1}(\sum</em>{j=i+1}^n(j-i)))=O(\sum_{i=0}^{n-1} \frac{(1+n-i)(n-i)}{2})=O(n^3)$$</p>
<p>但是这种方法对于最后一个测试数据出现超时，所以必须用更有效的算法</p>
<h2 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h2><p>后来在题解中看到这种方法叫Silding Window 滑动窗</p>
<p>从思路一的基础上我想到，每次找到一个[i,j)之间的substring之后，如果判断[i,j+1)不是一个substring，<em>在思路一中程序会把i+1，然后把 j=i+1</em>,然而其实[i,j)是已经判断好的substring，只是加上了一个str[j]之后不满足substring的条件了，即[i+1,j)也是一个substring，那么我们完全不必更新j的值，只需要继续从当前位置对j继续循环判断即可。</p>
<h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度:"></a>时间复杂度:</h3><p>$$O(2*n)$$ 因为最坏情况下每个字符会被我们访问两次（by $i$ and $j$）</p>
<h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        lenth=[]</span><br><span class="line">        <span class="keyword">if</span>(s.__len__()==<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        i=<span class="number">0</span></span><br><span class="line">        j=i</span><br><span class="line">        substring=set()</span><br><span class="line">        <span class="keyword">while</span>(i&lt;s.__len__()<span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">while</span>(j&lt;s.__len__()):</span><br><span class="line">                <span class="keyword">if</span> substring.__contains__(s[j]):</span><br><span class="line">                    lenth.append(substring.__len__())</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    substring.add(s[j])</span><br><span class="line">                    j=j+<span class="number">1</span></span><br><span class="line">            lenth.append(substring.__len__()) <span class="comment">#lenth中存放了以s[i]开头的最常substring 的长度       </span></span><br><span class="line">            substring.remove(s[i])<span class="comment">#每次都把头一个清除掉 然后接着往下数</span></span><br><span class="line">            i=i+<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> max(lenth)</span><br><span class="line">    <span class="comment">#更简单的写法：</span></span><br><span class="line">    <span class="comment">#while(i&lt;s.__len__()-1 and j&lt;s.__len__()-1):</span></span><br><span class="line">    <span class="comment">#	if not substring.__contains__(s[j]):</span></span><br><span class="line">    <span class="comment">#		subsring.add(s[j])</span></span><br><span class="line">    <span class="comment">#		j=j+1</span></span><br><span class="line">    <span class="comment">#		ans=max(ans,j-i)</span></span><br><span class="line">    <span class="comment">#	else:</span></span><br><span class="line">    <span class="comment">#		subtring.remove(s[i])</span></span><br><span class="line">    <span class="comment">#		i=i+1</span></span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 厚积薄发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[托福备考心得]]></title>
      <url>/2017/04/08/%E6%89%98%E7%A6%8F%E5%A4%87%E8%80%83%E5%BF%83%E5%BE%97/</url>
      <content type="html"><![CDATA[<h2 id="托福备考总结"><a href="#托福备考总结" class="headerlink" title="托福备考总结"></a>托福备考总结</h2><p><strong>我的基础</strong></p>
<ol>
<li>开始准备托福是2016年9月，之前英语水平是6级533，去美国参加summer school 一个半月</li>
<li>因为是河南学生，高考英语不考听力和口语，所以这两项都比较弱</li>
</ol>
<p><strong>结果</strong></p>
<p>11.25日首考92分： 26 24 20 22</p>
<p>3.24日第二次考97分：27 22 24 24</p>
<p>*update 6.10第三次考103分：28 29 20 26</p>
<a id="more"></a>
<p>虽然还没有到100+，但是我自认为还是有一些”经验”可以说的，特别是对像我这样英语基础不是特别好的同学。下面就分不同学科来讲一下我备考的方法和一些感悟吧</p>
<h3 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h3><ol>
<li><strong>单词单词单词</strong>:自认为单词是阻碍我阅读拿高分的最大的障碍，如果文章中最主要的关键词或者有30%左右的单词都不认识，就算有再好的做题技巧也很难拿到高分。如果有意向出国的同学最好从大一大二就开始背单词，实际上我自己就不是一个很喜欢背单词的人，手机上背单词的APP装了很多，也试过背红宝书、自己拿本子记单词，也看过曲根老师的视频，但是都没能一直坚持下去。所以一直到第二次考试之前练TPO的时候也会错单词题。单词掌握得好另一个好处是遇到单词题你可以很快的选出来，这样可以节省出许多时间，而不必在某个单词题上纠结很久。</li>
<li><strong>做题速度</strong>：一定要计时练，从第一天复习TPO开始，我就一直用模考软件练习，虽然最开始20分钟内做不完一篇阅读题，最后一道5选3题很可能没有时间看，但是还是要计时做，到20分钟就停，看看自己能做到什么程度。没做完的题下来再看，这样考试的时候才能保证把题做完</li>
<li><strong>长难句</strong>：刚开始练托福的时候，经常碰到一句话里单词我都认识，但是却看不懂意思的情况，这是因为用了一些复杂的句式，后来我就把每篇阅读中遇到的比较难懂的句子摘抄下来有空看看，慢慢的再遇到比较长的句子的时候就能看出句子的结构，进而理解句子意思了</li>
<li><strong>复习资料</strong>：TPO, 如果你基础和我差不多的话，TPO完全够你用了，做完每套阅读一定要好好总结，总结每篇阅读中的生词、长难句，要充分利用TPO这个宝贵的资源。</li>
</ol>
<h3 id="听力"><a href="#听力" class="headerlink" title="听力"></a>听力</h3><p>实话说我第一次考完听力是觉得考的很好的（可能是因为遇到了经典加试把），虽然最后成绩并不是很理想。第二次3月25考或许是因为托福改革，没有遇到经典加试，听力很难，而且有很多多选题，考的是非常细节的内容，经常是五选三的题我只听出来了两个，所以还是只能猜一个了，做到后面心态有点乱了。但是我觉得备考过程中英语听力水平还是提高了不少的。</p>
<p>初期听力基础很弱的时候，我选择<strong>精听</strong>TPO的听力，做完之后一句一句听懂，我觉得也没有必要写下来吧，只要能复述出来就可以，写下来也比较费时间。这样精听虽然是很费时间的，但是确实非常有效。 后期大部分句子都能听明白的时候，重心就不再是把每句话听懂，而是要把意思能提炼出来了，所以后面我再静听的时候会一段一段听，听完之后想想这段讲的什么，如果大部分内容都能回忆起来这段就过了。</p>
<p><strong>笔记</strong>的话，我自己觉得像Conversation不是很有必要记笔记，一方面Con比较短，所以还是能记得住的，另一方面Conv语速非常快，我自己记笔记的时候，经常会漏掉正在说的信息，这样就有些得不偿失了。而且真心觉得，其实就算记了笔记，做题的时候也是凭记忆去选的，而不是看着笔记选的。所以记不记笔记还是看自己的情况啦。</p>
<p>后期我觉得听力遇到最大的问题就是<strong>注意力</strong>，一篇五分钟的Lecture，我往往听到三四分钟时候就要走神了，特别是遇到不是很熟悉的话题的时候，听不懂更容易走神.. 我自己也在努力解决这个问题。</p>
<p><strong>备考资料：</strong>TPO，精听，等到把TPO练完再去找其他材料吧。 另外平时可以看看CNN student news 练听力的同时可以看看新闻，比较轻松。</p>
<h3 id="口语"><a href="#口语" class="headerlink" title="口语"></a>口语</h3><p>口语似乎我就上了一个新东方的强化班，下来之后就没怎么练过了，每次考试之前会抽时间完整的练习一套。偶尔用奕欧英语说几篇1、2 题。第二次考试12题得了Good，觉得重要的还是回答的内容不在于有多深奥，要具体，比如说第二次考试口语第一题问</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">The university international office is going to hold a social event. Which one of the following choices do you think is the best?</span><br><span class="line"></span><br><span class="line">international food fair </span><br><span class="line">international music festival </span><br><span class="line">international film festival</span><br></pre></td></tr></table></figure>
<p>我印象特别深上新东方口语的时候第一次老师讲的就是你最喜欢吃的食物，火锅那个例子我都会背了。。于是就说了选择food fair，我最喜欢的是火锅，火锅多么好吃blabla~ 当时下来还以为有些跑题呢 哈哈，果然老外对于答案这种东西是比较随意的。后面3456题我每次都是fair 就不误导大家了。</p>
<h3 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h3><p>第一次考试因为备考时间比较短，基本没有准备写作，考试时候综合写作信息漏掉很多，独立写作时间没把握好，最后没有留下时间检查语法错误。 第二次考试提前半个多月就开始每周保持至少联系三次写作吧，然后把写过的独立写作题目的思路专门记到了一个word里，准备了一个综合写作的模板。然而成绩只提高了2分诶…希望第三次考的时候能高一点</p>
<ol>
<li>综合写作：模板+听力。首先你要能把听力中的信息捕捉下来，要不会再多句式也没用。考试前准备了一个综合写作的模板，尽量在250字之内用更多的句式呗，虽然我觉得第二次考试我的综合写作信息捕捉的很好，写的应该也不错，但是却只是fair。分析了一下可能是因为</li>
<li>独立写作：第二次考试独立写作题目比较简单，我写了将近500字，（之前在知乎上看到有人说独立写作字数多容易得高分，就也有意识的想试试） 但是结果只比上次高了2分，看来单纯追求字数并不是很合理的，还是要在句式、词汇上多下功夫吧。文章结构我比较喜欢<em>开头+2理由+1让步+结论</em> ，比较实用吧。平时要积累一下可以加分的词汇，然后争取用在文章中，我的文章就是全文都是比较平凡的词，估计是Good也是Good 的最低分。</li>
</ol>
<hr>
<p>本来是想着第二次可以考上100 再写一篇心得的，但是第二次有些遗憾，第三次考试加油啦！</p>
]]></content>
      
        
        <tags>
            
            <tag> TOEFL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[USB接口]]></title>
      <url>/2017/02/21/USB/</url>
      <content type="html"><![CDATA[<h2 id="USB接口"><a href="#USB接口" class="headerlink" title="USB接口"></a>USB接口</h2><p>今天拿我妈的OPPO R9的充电器发现和我的不是一种接口，于是就突发奇想查了了一下Oppo闪充是如何实现的，查的过程中又遇到了USB接口的问题，顺手就查了下这些个USB接口都有什么名堂。</p>
<a id="more"></a>
<p>首先上一个USB接口全家福的图</p>
<p><img src="/images/USB/USB全家福.jpg" alt=""></p>
<p>USB家族有1.0 1.1 2.0 3.0 3.1，不同传输协议有着不同的规格</p>
<table>
<thead>
<tr>
<th>版本</th>
<th>最大传输速率</th>
<th>代号</th>
<th>最大电流</th>
</tr>
</thead>
<tbody>
<tr>
<td>USB1.0</td>
<td>1.5Mbps</td>
<td>LowSpeed</td>
<td>500mA</td>
</tr>
<tr>
<td>USB1.1</td>
<td>12Mbps</td>
<td>FullSpeed</td>
<td>500mA</td>
</tr>
<tr>
<td>USB2.0</td>
<td>480Mbps</td>
<td>HighSpeed</td>
<td>500mA</td>
</tr>
<tr>
<td>USB3.0</td>
<td>5Gbps</td>
<td>SuperSpeed</td>
<td>900mA</td>
</tr>
<tr>
<td>USB3.1</td>
<td>10Gbps</td>
<td>SUperSpeed+</td>
<td>900mA</td>
</tr>
</tbody>
</table>
<p>  每个不同的传输协议下又会有 Standard-USB  Micro-USB 和Mini-USB三类，这三类下面又分Type-A 和Type-B（对于Mini和Micro两类，Type-B一般来说是Type-A的改良版本）</p>
<ul>
<li><p>USB3.1接口</p>
<p><img src="/images/USB/USB3.1.png" alt=""></p>
<p>Type-A就是标准USB接口， Type-B是常用的外设接口。其中的TypeC是在USB3.1协议中新加入的接口，最新的接口外形标准，既可以应用在PC主设备又可以应用在外部设备上。</p>
</li>
</ul>
<ul>
<li><p>Mini-USB2.0接口</p>
<p><img src="/images/USB/miniUSB.png" alt=""></p>
<p>主要应用在数码产品上，mp3 、数码相机、移动硬盘等。大家见到的Mini-USB接口绝大多数都是Mini-B型，这是因为Mini-A型就接口的防呆性较差，因此才有了取代它的Mini-B型。不过不用担心，即使是较老的配备Mini-A接口的设备仍然可以通用Mini-B型的数据线。</p>
</li>
<li><p>Micro-USB2.0接口</p>
<p><img src="/images/USB/microUSB.png" alt=""></p>
<p>  Micro-USB接口是Mini-USB接口的改良版，它再次缩小了体积，更适用于现在越来越轻薄的移动设备。目前我们所使用的便携设备，绝大多数都采用了Micro-USB接口，Mini-USB已基本被淘汰。另外，欧盟也规定到2017年，所有在加盟国销售的手机必须采用Micro-USB接口，足见其成功及广大覆盖率。同样的，Micro-USB接口的Type-B型也是Type-A型的改良版，从图中大家不难看出Micro-A接口形状为矩形，这大大增加了误插率。所以Micro-B出现后，Micro-A很快被淘汰了。</p>
</li>
<li><p>Micro-USB3.0接口</p>
<p><img src="/images/USB/microUSB3.png" alt=""></p>
<p>  由于USB3.0接口的传输速度相较USB2.0有了大幅度的提高，因此它的针脚也发生了变化。这样一来，Micro-USB3.0接口不得不在外观上做出改变。Micro-USB3.0接口在高度上与Micro-USB2.0无异，但是长度明显增长了。同样的，A型和B型也在Micro-USB3.0上出现了。 我们接触最多的Micro-USB3.0接口设备就要数高速移动硬盘了，其中绝大多数均为Type-B类型</p>
<hr>
<p>上面说了那么多可能比较绕，实际上我们最常用的就是以下三种。</p>
</li>
</ul>
<h2 id="常用的3种USB接口"><a href="#常用的3种USB接口" class="headerlink" title="常用的3种USB接口"></a>常用的3种USB接口</h2><p>###1. Type-A (Standard-A)标准版USB接口</p>
<p>​    Type-A是我们最常见的一种USB接口类型，在电脑上常用。但它有一些显著问题：有方向要求。必须从某个特定的方向才能将接头(公口)插入接口(母口)，但由于 USB 公口的两面外形非常接近，这个插入的过程经常出错。</p>
<p>###2. Type-B(Micro-B):移动设备的USB标准</p>
<p>​    当前大部分安卓手机中采用的是Micro USB 接口(即 USB Micro-B)，这种接口至今仍被广泛地应用在各种移动便携式设备上。（OPPO的VOOC闪充使用了不同的接口）</p>
<h3 id="3-Type-C"><a href="#3-Type-C" class="headerlink" title="3. Type-C:"></a>3. Type-C:</h3><p>​    Type-C 是USB 3.1标准的一部分，它是一种新型USB线缆及连接器的规范，是一整套全新的USB物理规格。它和iPhone手机中Lightning接口一样轻薄小巧，正反都能插，和其他介面一样支持USB标准的充电、数据传输、显 示输出等功能。可以扩展成电源/USB传输/VGA或HDMI三个接口，通过适配器，还可以兼容USB3.0、USB2.0等上一代接口。</p>
<p>Type-C作为一种新型的手机接口，其优势在与：</p>
<ul>
<li>无方向性</li>
<li>非常浅薄，约8.3*2.5mm 节省空间</li>
<li>功率传输是双向的</li>
</ul>
<hr>
<p>现在言归正传，Oppo的Vooc闪充是如何实现的呢？</p>
<ol>
<li><p>Vooc闪充不实用传统的5V 1A或者2A的电压电流充电器，而是将充电器的输出提升到5V 4A。并把传统的<strong>5Pin 充电接口增到7Pin</strong>,如下图。Oppo将自己的USB线的micro端改为了7针，中间5针与普通的USB线的micro端一致，可以相互通用，而在两段各增加了一个针脚</p>
<p><img src="/images/USB/pin.png" alt=""></p>
</li>
<li><p>为了防止电流过大电池承受不住<strong>，把手机电池触点增加到8个</strong></p>
<p> <img src="/images/USB/8.png" alt=""><br> 而三星等手机的金属触点只有4个：<br> <img src="/images/USB/4.png" alt=""></p>
</li>
<li><p>在电源配适器中加入了MCU来<strong>对电流实现精准调节</strong>，实现了分段恒流和变档技术。起步时，VOOC会挂上高速档（识别到VOOC充电），中间时，会自动跳到中速档，让你快速前行（大电流充电），结尾时又会切换成为低速档，让你平稳到站（涓流充电），防止电池过充和预防其他副作用。在实际充电过程中，我们也发现充电达到75%时，VOOC也进入涓流状态，以5V 2A的方式平稳充电。</p>
</li>
</ol>
<p>在查的过程中也发现，高通也有类似快速充电技术Quick Charge，而且速度上Vooc闪充稍好，但Vooc的可移植性差，只能在Oppo自己手机上用，这点不容Quick Charge。</p>
]]></content>
      
        
        <tags>
            
            <tag> USB </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[VPN vs. Proxy]]></title>
      <url>/2017/02/15/VPNvs.Proxy/</url>
      <content type="html"><![CDATA[<h2 id="VPN-vs-Proxy"><a href="#VPN-vs-Proxy" class="headerlink" title="VPN vs. Proxy"></a>VPN vs. Proxy</h2><p>大多数人都把VPN和Proxy当成一样的东西，实际上他们只是表现的功能一样了，本质功能并不相同。这篇文章分析了VPN和Proxy以及Smart DNS的区别。[原文链接]<a href="http://www.bestvpnanalysis.com/vpn-vs-proxy-vs-smart-dns/" target="_blank" rel="noopener">http://www.bestvpnanalysis.com/vpn-vs-proxy-vs-smart-dns/</a></p>
<a id="more"></a>
<h2 id="VPN-Virtual-Private-Network"><a href="#VPN-Virtual-Private-Network" class="headerlink" title="VPN Virtual Private Network"></a>VPN Virtual Private Network</h2><p>VPN是一个全面的privacy &amp; security工具，可以把你的地理位置（IP地址）移动到世界上所有区域包括受到访问限制的区域。VPN建立一个加密的私人隧道，使用Blowfish或AES128-bi或256bit加密协议，这个建立在你的PC和服务器之间的隧道用来传输数据并将你安全的连接到想到达的服务器上。 挑选VPN最重要的因素就是服务器要多，越多连接速度越快。</p>
<h3 id="优势："><a href="#优势：" class="headerlink" title="优势："></a>优势：</h3><ol>
<li>安全度高</li>
<li>允许用户选择VPN协议（protocol），例如PPTP L2TP SSTP等</li>
<li>VPN提供internet kill switch，在VPN链接慢时候会停止网络连接，帮助避免IPleaks</li>
</ol>
<h3 id="劣势："><a href="#劣势：" class="headerlink" title="劣势："></a>劣势：</h3><ol>
<li>速度慢</li>
<li>VPN连接有时候会挂掉，可能会导致原始身份original identity 泄露，未解决这个问题一些VPN提供了internet kill switch option</li>
</ol>
<h2 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h2><p>Proxy server通常是你和Internet之间的一台电脑。当你访问一个网站时，这个网站的服务器会接收到一个来自Proxy server的IP地址的请求，而不是来自你的电脑的请求。所以如果这个代理服务器在境外，那就可以正常访问境外的网站了。代理服务器并不加密你的数据。通常代理服务器使用两种互联网通信协议Internet protocol for communication。 <strong>HTTP和SOCKS</strong></p>
<h3 id="HTTP-Proxy-Server"><a href="#HTTP-Proxy-Server" class="headerlink" title="HTTP Proxy Server"></a>HTTP Proxy Server</h3><p>HTTP代理服务器只能解析以Http://或者Https://开头的地址，所以他只对web browsing sessions有效，通过连接你和HTTP服务器来提供安全的web browsing sessions。所以他要比Socks proxy和VPN都快。通常是免费的。但是只对internet browsing有效，不是所有网站都能访问，在每个浏览器上都需要设置</p>
<h3 id="SOCKS-Proxy-Server"><a href="#SOCKS-Proxy-Server" class="headerlink" title="SOCKS Proxy Server"></a>SOCKS Proxy Server</h3><p>可以处理所有类型的网络数据流，比如IRCchat SMTP POP3for emails, torrent files，FTP. 而不仅仅是browsing sessions.但比HTTP要慢，而且任何想要在Socks Proxy上运行的软件都需要要单独配置</p>
<h2 id="Smart-DNS"><a href="#Smart-DNS" class="headerlink" title="Smart DNS"></a>Smart DNS</h2><p>smart DNS就是一个代理系统，用来解锁因为地区原因无法访问的网站。不需要任何第三方软件，只需要订阅smartDNS 服务，当用户连接上一个Smart DNS《，会被引导到世界各地的的proxy server，这样他们就可以访问想要访问的网站了。Smart DNS没有加密，所以比VPN要快</p>
<p>总结</p>
<table>
<thead>
<tr>
<th>VPN</th>
<th>Proxy</th>
<th>Smart DNS</th>
</tr>
</thead>
<tbody>
<tr>
<td>Provides Encryptions of AES 128bit or 256bit</td>
<td>No Encryption</td>
<td>No Encryption</td>
</tr>
<tr>
<td>Unblock Websites with complete privacy</td>
<td>Unblock websites with limited privacy</td>
<td>Unblock websites without privacy</td>
</tr>
<tr>
<td>Secure internet protocols are used OpenVPN, SSTP, etc.</td>
<td>Less secure protocols used like HTTP, Socks, etc.</td>
<td>No security</td>
</tr>
<tr>
<td>Safe to use on public Wifi</td>
<td>No protection on public Wifi</td>
<td>No protection on public Wifi</td>
</tr>
<tr>
<td>Can affect the connection speed a little due to encryption</td>
<td>The speed is slow even when no encryption, due to higher latency issues</td>
<td>Faster than VPN and proxy, but extremely prone to attacks</td>
</tr>
</tbody>
</table>
<p>总的来说三者实现的功能是相近的，都是帮助我们访问受地区限制的网站。VPN速度最慢，但是安全性最高，Proxy介于二者之间，部分加密，而smartDNS速度最快但是非常容易泄露信息。</p>
]]></content>
      
        
        <tags>
            
            <tag> Proxy </tag>
            
            <tag> VPN </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[蓝牙模块(八)-Android与BT05蓝牙模块连接]]></title>
      <url>/2017/02/15/Android/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91-%E8%93%9D%E7%89%99%E6%A8%A1%E5%9D%97(%E5%85%AB)Android%E4%B8%8EBT-05%E8%93%9D%E7%89%99%E6%A8%A1%E5%9D%97%E8%BF%9E%E6%8E%A5/</url>
      <content type="html"><![CDATA[<h2 id="Android与BT05蓝牙模块连接"><a href="#Android与BT05蓝牙模块连接" class="headerlink" title="Android与BT05蓝牙模块连接"></a>Android与BT05蓝牙模块连接</h2><p>BT05蓝牙模块为低功耗蓝牙模块</p>
<a id="more"></a>
<p>模块状态：</p>
<ul>
<li><p>：AT模式</p>
</li>
<li><p>闪烁：正常模式</p>
</li>
<li><p>常亮：已经连接</p>
<p>​</p>
</li>
</ul>
<h2 id="用USB-to-UART模块设置蓝牙"><a href="#用USB-to-UART模块设置蓝牙" class="headerlink" title="用USB to UART模块设置蓝牙"></a>用USB to UART模块设置蓝牙</h2><p>连接USB转TTL模块和蓝牙模块，蓝牙模块的RX接TX，TX接RX，EN接3.3V，连接电脑后打开蓝牙串口助手即可。</p>
<h3 id="基础设置"><a href="#基础设置" class="headerlink" title="基础设置"></a>基础设置</h3><p>将BT05的波特率设置成38400（AT+BAUD），连接类型设置成无密码（AT+TYPE）</p>
<h3 id="Service设置"><a href="#Service设置" class="headerlink" title="Service设置"></a>Service设置</h3><h3 id="Characteristic设置"><a href="#Characteristic设置" class="headerlink" title="Characteristic设置"></a>Characteristic设置</h3><p>然后将蓝牙模块连接到Arduino上，烧录如下程序</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Serial.begin(<span class="number">38400</span>); </span><br><span class="line">  pinMode(<span class="number">13</span>,OUTPUT);</span><br><span class="line">  Serial.println(<span class="string">"Program start..."</span>);  </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(Serial.available()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">   <span class="keyword">char</span> c= Serial.read();</span><br><span class="line">   <span class="keyword">if</span>(c==<span class="string">'1'</span>)</span><br><span class="line">     &#123;</span><br><span class="line">       Serial.println(<span class="string">"Get 1"</span>);</span><br><span class="line">       Serial.write(<span class="string">"Serial--13--HIGH"</span>);</span><br><span class="line">       digitalWrite(<span class="number">13</span>,HIGH);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span>(c==<span class="string">'2'</span>)</span><br><span class="line">     &#123;</span><br><span class="line">       Serial.println(<span class="string">"Get 2"</span>);</span><br><span class="line">       Serial.write(<span class="string">"Serial--13--LOW"</span>);</span><br><span class="line">       digitalWrite(<span class="number">13</span>,LOW);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>即可使用淘宝店家送的BLE蓝牙串口助手实现通信。</p>
<hr>
<p><a href="">Arduino_BT_Android</a></p>
]]></content>
      
        <categories>
            
            <category> 开发笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Bluetooth </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[蓝牙模块(七)BLEdemo补充知识]]></title>
      <url>/2017/02/14/Android/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91-%E8%93%9D%E7%89%99%E6%A8%A1%E5%9D%97(%E4%B8%83)BLEDemo%E8%A1%A5%E5%85%85%E7%9F%A5%E8%AF%86/</url>
      <content type="html"><![CDATA[<p>下拉列表，bindService</p>
<a id="more"></a>
<h2 id="1-ExpandableListView"><a href="#1-ExpandableListView" class="headerlink" title="1 ExpandableListView"></a>1 ExpandableListView</h2><p>ExpandableListView是可扩展的下拉列表，它的可扩展性在于点击父item可以拉下或收起列表，适用于一些场景的使用</p>
<p>为了给给ExpandableListView提供数据，需要先初始化数据，这里使用一个Map来存放数据，类型为<string, list<string="">&gt;：</string,></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Map&lt;String, List&lt;String&gt;&gt; dataset = <span class="keyword">new</span> HashMap&lt;&gt;();  </span><br><span class="line"><span class="keyword">private</span> String[] parentList = <span class="keyword">new</span> String[]&#123;<span class="string">"first"</span>, <span class="string">"second"</span>, <span class="string">"third"</span>&#125;;  </span><br><span class="line"><span class="keyword">private</span> List&lt;String&gt; childrenList1 = <span class="keyword">new</span> ArrayList&lt;&gt;();  </span><br><span class="line"><span class="keyword">private</span> List&lt;String&gt; childrenList2 = <span class="keyword">new</span> ArrayList&lt;&gt;();  </span><br><span class="line"><span class="keyword">private</span> List&lt;String&gt; childrenList3 = <span class="keyword">new</span> ArrayList&lt;&gt;();  </span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initialData</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    childrenList1.add(parentList[<span class="number">0</span>] + <span class="string">"-"</span> + <span class="string">"first"</span>);  </span><br><span class="line">    childrenList1.add(parentList[<span class="number">0</span>] + <span class="string">"-"</span> + <span class="string">"second"</span>);  </span><br><span class="line">    childrenList1.add(parentList[<span class="number">0</span>] + <span class="string">"-"</span> + <span class="string">"third"</span>);  </span><br><span class="line">    childrenList2.add(parentList[<span class="number">1</span>] + <span class="string">"-"</span> + <span class="string">"first"</span>);  </span><br><span class="line">    childrenList2.add(parentList[<span class="number">1</span>] + <span class="string">"-"</span> + <span class="string">"second"</span>);  </span><br><span class="line">    childrenList2.add(parentList[<span class="number">1</span>] + <span class="string">"-"</span> + <span class="string">"third"</span>);  </span><br><span class="line">    childrenList3.add(parentList[<span class="number">2</span>] + <span class="string">"-"</span> + <span class="string">"first"</span>);  </span><br><span class="line">    childrenList3.add(parentList[<span class="number">2</span>] + <span class="string">"-"</span> + <span class="string">"second"</span>);  </span><br><span class="line">    childrenList3.add(parentList[<span class="number">2</span>] + <span class="string">"-"</span> + <span class="string">"third"</span>);  </span><br><span class="line">    dataset.put(parentList[<span class="number">0</span>], childrenList1);  </span><br><span class="line">    dataset.put(parentList[<span class="number">1</span>], childrenList2);  </span><br><span class="line">    dataset.put(parentList[<span class="number">2</span>], childrenList3);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后需要自己实现一个Adapt类，用于为用于为ExpandableListView提供数据，该类继承了BaseExpandableListAdapter</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyExpandableListViewAdapter</span> <span class="keyword">extends</span> <span class="title">BaseExpandableListAdapter</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//  获得某个父项的某个子项  </span></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getChild</span><span class="params">(<span class="keyword">int</span> parentPos, <span class="keyword">int</span> childPos)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> dataset.get(parentList[parentPos]).get(childPos);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//  获得父项的数量  </span></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getGroupCount</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> dataset.size();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//  获得某个父项的子项数目  </span></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getChildrenCount</span><span class="params">(<span class="keyword">int</span> parentPos)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> dataset.get(parentList[parentPos]).size();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//  获得某个父项  </span></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getGroup</span><span class="params">(<span class="keyword">int</span> parentPos)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> dataset.get(parentList[parentPos]);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//  获得某个父项的id  </span></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getGroupId</span><span class="params">(<span class="keyword">int</span> parentPos)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> parentPos;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//  获得某个父项的某个子项的id  </span></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getChildId</span><span class="params">(<span class="keyword">int</span> parentPos, <span class="keyword">int</span> childPos)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> childPos;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//  按函数的名字来理解应该是是否具有稳定的id，这个方法目前一直都是返回false，没有去改动过  </span></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasStableIds</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//  获得父项显示的view  </span></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">getGroupView</span><span class="params">(<span class="keyword">int</span> parentPos, <span class="keyword">boolean</span> b, View view, ViewGroup viewGroup)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> view;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//  获得子项显示的view  </span></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">getChildView</span><span class="params">(<span class="keyword">int</span> parentPos, <span class="keyword">int</span> childPos, <span class="keyword">boolean</span> b, View view, ViewGroup viewGroup)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> view;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//  子项是否可选中，如果需要设置子项的点击事件，需要返回true  </span></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isChildSelectable</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> i1)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>自定义的类中最重要的是getGroupView方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  获得父项显示的view  </span></span><br><span class="line"><span class="meta">@Override</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> View <span class="title">getGroupView</span><span class="params">(<span class="keyword">int</span> parentPos, <span class="keyword">boolean</span> b, View view, ViewGroup viewGroup)</span> </span>&#123;  </span><br><span class="line">  <span class="comment">//先判断view是否为空，如果view不为空，说明已经加载过一次parent_item布局，因此不需要重复加载以提高效率。如果view为空，那么加载parent_item布局</span></span><br><span class="line">    <span class="keyword">if</span> (view == <span class="keyword">null</span>) &#123;  </span><br><span class="line">        LayoutInflater inflater = (LayoutInflater) ExpandableListViewTestActivity  </span><br><span class="line">                .<span class="keyword">this</span>.getSystemService(Context.LAYOUT_INFLATER_SERVICE);  </span><br><span class="line">        view = inflater.inflate(R.layout.parent_item, <span class="keyword">null</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  <span class="comment">//定义父项的内容和行为，这里只需要定义父项的内容，先通过id获得parent_item布局中的TextView，然后通过方法提供的parentPos参数获取到存放在dataset中的内容，调用TextView的setText方法即可设置父项要显示的内容：</span></span><br><span class="line">    view.setTag(R.layout.parent_item, parentPos);  </span><br><span class="line">    view.setTag(R.layout.child_item, -<span class="number">1</span>);  </span><br><span class="line">    TextView text = (TextView) view.findViewById(R.id.parent_title);  </span><br><span class="line">    text.setText(parentList[parentPos]);  </span><br><span class="line">    <span class="keyword">return</span> view;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下来是getChildView方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  获得子项显示的view  </span></span><br><span class="line"><span class="meta">@Override</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> View <span class="title">getChildView</span><span class="params">(<span class="keyword">int</span> parentPos, <span class="keyword">int</span> childPos, <span class="keyword">boolean</span> b, View view, ViewGroup viewGroup)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (view == <span class="keyword">null</span>) &#123;  </span><br><span class="line">        LayoutInflater inflater = (LayoutInflater) ExpandableListViewTestActivity  </span><br><span class="line">                .<span class="keyword">this</span>.getSystemService(Context.LAYOUT_INFLATER_SERVICE);  </span><br><span class="line">        view = inflater.inflate(R.layout.child_item, <span class="keyword">null</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    view.setTag(R.layout.parent_item, parentPos);  </span><br><span class="line">    view.setTag(R.layout.child_item, childPos);  </span><br><span class="line">    TextView text = (TextView) view.findViewById(R.id.child_title);  </span><br><span class="line">    text.setText(dataset.get(parentList[parentPos]).get(childPos));  </span><br><span class="line">    text.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;  </span><br><span class="line">        <span class="meta">@Override</span>  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;  </span><br><span class="line">            Toast.makeText(ExpandableListViewTestActivity.<span class="keyword">this</span>, <span class="string">"点到了内置的textview"</span>, Toast.LENGTH_SHORT).show();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;);  </span><br><span class="line">    <span class="keyword">return</span> view;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>adapter类定义完之后通过声明一个Adapter，实例化后调用setAdapter方法即可</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> MyExpandableListViewAdapter adapter; </span><br><span class="line">adapter = <span class="keyword">new</span> MyExpandableListViewAdapter();  </span><br><span class="line">listview.setAdapter(adapter);</span><br></pre></td></tr></table></figure>
<p>更新ExpandableListView的方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateData</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    childrenList1.clear();  </span><br><span class="line">    childrenList1.add(parentList[<span class="number">0</span>] + <span class="string">"-new-"</span> + <span class="string">"first"</span>);  </span><br><span class="line">    childrenList1.add(parentList[<span class="number">0</span>] + <span class="string">"-new-"</span> + <span class="string">"second"</span>);  </span><br><span class="line">    childrenList1.add(parentList[<span class="number">0</span>] + <span class="string">"-new-"</span> + <span class="string">"third"</span>);  </span><br><span class="line">    childrenList2.clear();  </span><br><span class="line">    childrenList2.add(parentList[<span class="number">1</span>] + <span class="string">"-new-"</span> + <span class="string">"first"</span>);  </span><br><span class="line">    childrenList2.add(parentList[<span class="number">1</span>] + <span class="string">"-new-"</span> + <span class="string">"second"</span>);  </span><br><span class="line">    childrenList2.add(parentList[<span class="number">1</span>] + <span class="string">"-new-"</span> + <span class="string">"third"</span>);  </span><br><span class="line">    childrenList3.clear();  </span><br><span class="line">    childrenList3.add(parentList[<span class="number">2</span>] + <span class="string">"-new-"</span> + <span class="string">"first"</span>);  </span><br><span class="line">    childrenList3.add(parentList[<span class="number">2</span>] + <span class="string">"-new-"</span> + <span class="string">"second"</span>);  </span><br><span class="line">    childrenList3.add(parentList[<span class="number">2</span>] + <span class="string">"-new-"</span> + <span class="string">"third"</span>);  </span><br><span class="line">    adapter.notifyDataSetChanged();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Attention：子项列表在内存中的地址是不可以改变的，不能使用形如childrenList1 = new ArrayList&lt;&gt;();这样的方法来获的新列表，这样会使childrenList1在内存中的地址发生改变，导致调用adapter的notifyDataSetChanged()方法时不生效。所以如果想要清空这个列表项时，使用childrenList1.clear()方法，这样才能保证顺利更新列表。</p>
<hr>
<h2 id="BindService"><a href="#BindService" class="headerlink" title="BindService"></a>BindService</h2><p>bindService用于绑定一个服务（Service），使一个Activity可以使用Service暴露出去供client调用的公共方法。一般流程：</p>
<blockquote>
<p>为什么不能用Handler呢？</p>
</blockquote>
<ol>
<li><p><strong>新建Service类BindService</strong>在BindService类里新建内部类MyBinder，继承自Binder(Binder实现IBinder接口)。MyBinder提供方法返回BindService实例。</p>
<p>​</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBinder</span> <span class="keyword">extends</span> <span class="title">Binder</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> BindService <span class="title">getService</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> BindService.<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实例化Mybinder得到Mybind对象 重写onBInd方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> mybinder;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>在Activity里，实例化ServiceConnection接口的实现类，重写onServiceConnected()和onServiceDisconnected()方法</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ServiceConnection conn=<span class="keyword">new</span> ServiceConnection()&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>3.<strong>在Activity的onCreate()方法里，新建Intent，并绑定服务</strong></p>
<pre><code>Intent intent=new Intent(MainActivity.this,BindService.class); 
bindService(intent, conn,BIND_AUTO_CREATE);
</code></pre><p>4.<strong>在Activity的onDestroy()方法里，添加</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unbindService(conn);</span><br></pre></td></tr></table></figure>
<h2 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span>：调用者  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> android.app.Activity;  </span><br><span class="line"><span class="keyword">import</span> android.content.ComponentName;  </span><br><span class="line"><span class="keyword">import</span> android.content.Context;  </span><br><span class="line"><span class="keyword">import</span> android.content.Intent;  </span><br><span class="line"><span class="keyword">import</span> android.content.ServiceConnection;  </span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;  </span><br><span class="line"><span class="keyword">import</span> android.os.IBinder;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 此例的目的就是拿到MyService的引用，从而可以引用其内部的方法和变量  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalServiceActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;  </span><br><span class="line">    <span class="comment">/** Called when the activity is first created. */</span>  </span><br><span class="line">    <span class="keyword">private</span> MyService myService;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </span><br><span class="line">        setContentView(R.layout.main);  </span><br><span class="line">  </span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyService.class);  </span><br><span class="line">        bindService(intent, connection, Context.BIND_AUTO_CREATE);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> ServiceConnection connection = <span class="keyword">new</span> ServiceConnection() &#123;  </span><br><span class="line">  </span><br><span class="line">        <span class="meta">@Override</span>  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;  </span><br><span class="line">            myService = <span class="keyword">null</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="meta">@Override</span>  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;  </span><br><span class="line">            myService = ((MyService.MyBinder) service).getService();  </span><br><span class="line">            System.out.println(<span class="string">"Service连接成功"</span>);  </span><br><span class="line">            <span class="comment">// 执行Service内部自己的方法  </span></span><br><span class="line">            myService.excute();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">super</span>.onDestroy();  </span><br><span class="line">        unbindService(connection);  </span><br><span class="line">    &#125;;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="number">2</span>：服务者  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> android.app.Service;  </span><br><span class="line"><span class="keyword">import</span> android.content.Intent;  </span><br><span class="line"><span class="keyword">import</span> android.os.Binder;  </span><br><span class="line"><span class="keyword">import</span> android.os.IBinder;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IBinder binder = <span class="keyword">new</span> MyBinder();  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> binder;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBinder</span> <span class="keyword">extends</span> <span class="title">Binder</span> </span>&#123;  </span><br><span class="line">        <span class="function">MyService <span class="title">getService</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">            <span class="keyword">return</span> MyService.<span class="keyword">this</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">excute</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"通过Binder得到Service的引用来调用Service内部的方法"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="comment">// 当调用者退出(即使没有调用unbindService)或者主动停止服务时会调用  </span></span><br><span class="line">        <span class="keyword">super</span>.onDestroy();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onUnbind</span><span class="params">(Intent intent)</span> </span>&#123;  </span><br><span class="line">        <span class="comment">// 当调用者退出(即使没有调用unbindService)或者主动停止服务时会调用  </span></span><br><span class="line">        System.out.println(<span class="string">"调用者退出了"</span>);  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onUnbind(intent);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>bindService生命周期流程图</strong></p>
<p><img src="/images/Android/binder.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> 开发笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Bluetooth </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[蓝牙模块(六)低功耗蓝牙BLE-part2]]></title>
      <url>/2017/02/13/Android/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91-%E8%93%9D%E7%89%99%E6%A8%A1%E5%9D%97(%E5%85%AD)%E4%BD%8E%E5%8A%9F%E8%80%97%E8%93%9D%E7%89%99BLE-part2/</url>
      <content type="html"><![CDATA[<h2 id="低功耗蓝牙BLE"><a href="#低功耗蓝牙BLE" class="headerlink" title="低功耗蓝牙BLE"></a>低功耗蓝牙BLE</h2><p>第二部分主要介绍如何连接BLE设备，如何查看GATTserver上的Service和Characteristic</p>
<a id="more"></a>
<h3 id="连接GATT"><a href="#连接GATT" class="headerlink" title="连接GATT"></a>连接GATT</h3><p>连接一个BLE设备即连接该设备上的GATT server，需要用 <code>connectGatt()</code>方法。该方法连接上GATT服务器，它需要一个 回调mGattCallback 参数，用来把连接状态等信息返回给客户端。返回一个<code>BluetoothGatt</code>实例，这个实例可以用来进行GATT客户端操作。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mBluetoothGatt = device.connectGatt(<span class="keyword">this</span>, <span class="keyword">false</span>, mGattCallback);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span>1 a Context object</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span>2 autoConnect (boolean indicating whether to automatically connect to the BLE device as soon as it becomes available)</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span>3 a reference to a BluetoothGattCallback</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<p>mGattCallback的几个函数及其作用</p>
<p>onConnectionStateChange:检测设备与GATT连接情况变化</p>
<p>onServiceDiscovered:发现服务</p>
<p>onCharacteristicRead：</p>
<p>onCharacteristicChanged：</p>
<p>onCharacteristicWrite：</p>
<p>onDiscriptorWrite：</p>
<p>onDiscriptorRead：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> BluetoothGattCallback mGattCallback = <span class="keyword">new</span> BluetoothGattCallback() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onConnectionStateChange</span><span class="params">(BluetoothGatt gatt, <span class="keyword">int</span> status, <span class="keyword">int</span> newState)</span> </span>&#123;</span><br><span class="line">          String intentAction;</span><br><span class="line">          <span class="keyword">if</span> (newState == BluetoothProfile.STATE_CONNECTED) &#123;</span><br><span class="line">              intentAction = ACTION_GATT_CONNECTED;</span><br><span class="line">              mConnectionState = STATE_CONNECTED;</span><br><span class="line">              broadcastUpdate(intentAction);</span><br><span class="line">              Log.i(TAG, <span class="string">"Connected to GATT server."</span>);</span><br><span class="line">              <span class="comment">// Attempts to discover services after successful connection.</span></span><br><span class="line">              Log.i(TAG, <span class="string">"Attempting to start service discovery:"</span> +</span><br><span class="line">                      mBluetoothGatt.discoverServices());</span><br><span class="line"></span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (newState == BluetoothProfile.STATE_DISCONNECTED) &#123;</span><br><span class="line">              intentAction = ACTION_GATT_DISCONNECTED;</span><br><span class="line">              mConnectionState = STATE_DISCONNECTED;</span><br><span class="line">              Log.i(TAG, <span class="string">"Disconnected from GATT server."</span>);</span><br><span class="line">              broadcastUpdate(intentAction);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServicesDiscovered</span><span class="params">(BluetoothGatt gatt, <span class="keyword">int</span> status)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (status == BluetoothGatt.GATT_SUCCESS) &#123;</span><br><span class="line">              broadcastUpdate(ACTION_GATT_SERVICES_DISCOVERED);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              Log.w(TAG, <span class="string">"onServicesDiscovered received: "</span> + status);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCharacteristicRead</span><span class="params">(BluetoothGatt gatt,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       BluetoothGattCharacteristic characteristic,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       <span class="keyword">int</span> status)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (status == BluetoothGatt.GATT_SUCCESS) &#123;</span><br><span class="line">              broadcastUpdate(ACTION_DATA_AVAILABLE, characteristic);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCharacteristicChanged</span><span class="params">(BluetoothGatt gatt,</span></span></span><br><span class="line"><span class="function"><span class="params">                                          BluetoothGattCharacteristic characteristic)</span> </span>&#123;</span><br><span class="line">          broadcastUpdate(ACTION_DATA_AVAILABLE, characteristic);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure>
<h3 id="接收GATT通知"><a href="#接收GATT通知" class="headerlink" title="接收GATT通知"></a>接收GATT通知</h3><p>当设备上的某个特性（characteristic）变化时，App要被通知。以下代码完成了characteristic的通知，使用<code>setCharacteristicNotification()</code>方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCharacteristicNotification</span><span class="params">(BluetoothGattCharacteristic characteristic,</span></span></span><br><span class="line"><span class="function"><span class="params">                                              <span class="keyword">boolean</span> enabled)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mBluetoothAdapter == <span class="keyword">null</span> || mBluetoothGatt == <span class="keyword">null</span>) &#123;</span><br><span class="line">            Log.w(TAG, <span class="string">"BluetoothAdapter not initialized"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mBluetoothGatt.setCharacteristicNotification(characteristic, enabled);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// This is specific to Heart Rate Measurement.</span></span><br><span class="line">        <span class="keyword">if</span> (UUID_HEART_RATE_MEASUREMENT.equals(characteristic.getUuid())) &#123;</span><br><span class="line">            BluetoothGattDescriptor descriptor = characteristic.getDescriptor(</span><br><span class="line">                    UUID.fromString(SampleGattAttributes.CLIENT_CHARACTERISTIC_CONFIG));</span><br><span class="line">            descriptor.setValue(BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE);</span><br><span class="line">            mBluetoothGatt.writeDescriptor(descriptor);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>一旦notification完成了，connectGatt的 <code>onCharacteristicChanged()</code>回调函数即被调用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCharacteristicChanged</span><span class="params">(BluetoothGatt gatt,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    BluetoothGattCharacteristic characteristic)</span> </span>&#123;</span><br><span class="line">    broadcastUpdate(ACTION_DATA_AVAILABLE, characteristic);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 开发笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Bluetooth </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[蓝牙模块(五)低功耗蓝牙BLE-part1]]></title>
      <url>/2017/02/08/Android/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91-%E8%93%9D%E7%89%99%E6%A8%A1%E5%9D%97(%E4%BA%94)%E4%BD%8E%E5%8A%9F%E8%80%97%E8%93%9D%E7%89%99BLE-part1/</url>
      <content type="html"><![CDATA[<h2 id="低功耗蓝牙BLE"><a href="#低功耗蓝牙BLE" class="headerlink" title="低功耗蓝牙BLE"></a>低功耗蓝牙BLE</h2><p> 完成了蓝牙模块的demo，开始转向低功耗蓝牙(Bluetooth Low Energy) ，本篇主要介绍低功耗蓝牙的基本概念，如何打开、关闭以及开启扫描</p>
<a id="more"></a>
<h2 id="BLE-低功耗蓝牙-和普通蓝牙的关系"><a href="#BLE-低功耗蓝牙-和普通蓝牙的关系" class="headerlink" title="BLE(低功耗蓝牙)和普通蓝牙的关系"></a>BLE(低功耗蓝牙)和普通蓝牙的关系</h2><ol>
<li>BLE不具备和传统蓝牙BR/EDR的兼容性。它是专为小数据率、离散传输的应用而设计</li>
<li>功耗低、连接快、无需配对</li>
</ol>
<h2 id="关键概念"><a href="#关键概念" class="headerlink" title="关键概念"></a>关键概念</h2><h3 id="Generic-Attribute-Profile-GATT"><a href="#Generic-Attribute-Profile-GATT" class="headerlink" title="Generic Attribute Profile(GATT):"></a>Generic Attribute Profile(GATT):</h3><p>​    GATT配置文件是一个<strong>通用规范</strong>，用于在BLE链路上发送和接收被称为“属性(attributes)”的数据块。目前所有的BLE应用都基于GATT。 蓝牙SIG(蓝牙国际联盟)规定了许多低功耗设备的配置文件(<a href="https://www.bluetooth.org/en-us/specification/adopted-specifications" target="_blank" rel="noopener">profiles</a>)。配置文件是设备如何在特定的应用程序中工作的规格说明。注意一个设备可以实现多个配置文件。例如，一个设备可能包括心率监测仪和电量检测。</p>
<h3 id="Attribute-Protocol（ATT）"><a href="#Attribute-Protocol（ATT）" class="headerlink" title="Attribute Protocol（ATT）"></a>Attribute Protocol（ATT）</h3><p>—GATT在ATT协议基础上建立，也被称为GATT/ATT。ATT对在BLE设备上运行进行了优化，为此，它使用了尽可能少的字节。每个属性通过一个唯一的的统一标识符（UUID）来标识，每个String类型UUID使用128 bit标准格式。属性通过ATT被格式化为characteristics和services。</p>
<h3 id="Characteristic"><a href="#Characteristic" class="headerlink" title="Characteristic"></a>Characteristic</h3><p>​    一个characteristic包括一个单一变量和0-n个用来描述characteristic变量的descriptor，<strong>characteristic可以被认为是一个类型，类似于类。 Descriptor Descriptor用来描述characteristic变量的属性</strong>。例如，一个descriptor可以规定一个可读的描述，或者一个characteristic变量可接受的范围，或者一个characteristic变量特定的测量单位。</p>
<h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><p>​    service是characteristic的集合。例如，你可能有一个叫“Heart Rate Monitor(心率监测仪)”的service，它包括了很多characteristics，如“heart rate measurement(心率测量)”等。你可以在bluetooth.org 找到一个目前支持的基于GATT的配置文件和服务列表。</p>
<h2 id="角色和责任"><a href="#角色和责任" class="headerlink" title="角色和责任"></a>角色和责任</h2><p>以下是Android设备与BLE设备交互时的角色和责任：</p>
<p>中央 VS 外围设备。 适用于BLE连接本身。<strong>中央设备扫描，寻找广播；外围设备发出广播</strong>。 GATT 服务端 VS. GATT 客户端。决定了两个设备在建立连接后如何互相交流。</p>
<p>想象你有一个Android手机和一个用于活动跟踪BLE设备，手机支持中央角色，活动跟踪器支持外围（为了建立BLE连接你需要注意两件事，只支持外围设备的两方或者只支持中央设备的两方不能互相通信）。<br>当手机和运动追踪器建立连接后，他们开始向另一方传输GATT数据。哪一方作为服务器取决于他们传输数据的种类。例如，如果运动追踪器想向手机报告传感器数据，运动追踪器是服务端。如果运动追踪器更新来自手机的数据，手机会作为服务端。<br><img src="/images/Android/中央设备vs外围设备.png" alt=""></p>
<hr>
<p>主要类</p>
<p>i&gt;    BluetoothGattServer：外围设备要发送的数据</p>
<p>ii&gt;    BluetoothServerCallback：返回外围设备的状态</p>
<p>iii&gt;    BluetoothGatt：中央使用和处理数据</p>
<p>iv&gt;    BluetoothGattCallBack：返回中央设备的状态</p>
<h3 id="设备对BLE的支持"><a href="#设备对BLE的支持" class="headerlink" title="设备对BLE的支持"></a>设备对BLE的支持</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用此检查确定BLE是否支持在设备上，然后你可以有选择性禁用BLE相关的功能</span></span><br><span class="line"><span class="keyword">if</span> (!getPackageManager().hasSystemFeature(PackageManager.FEATURE_BLUETOOTH_LE)) &#123;</span><br><span class="line">    Toast.makeText(<span class="keyword">this</span>, R.string.ble_not_supported, Toast.LENGTH_SHORT).show();</span><br><span class="line">    finish();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="查找BLE设备"><a href="#查找BLE设备" class="headerlink" title="查找BLE设备"></a>查找BLE设备</h3><p>使用 <code>startLeScan()</code> 函数，该函数需要<code>BluetoothAdapter.LeScanCallback</code> 回调函数作为一个参数。必须实现这个回调函数处理返回结果。另外由于扫描非常耗电，还需要遵循以下原则：</p>
<ul>
<li><p>只要找到目标设备，就停止扫描</p>
</li>
<li><p>不要在循环里扫描，要对扫描设置时间限制。以前可用的设备可能已经移出范围，继续扫描会消耗电池电量。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Activity for scanning and displaying available BLE devices.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeviceScanActivity</span> <span class="keyword">extends</span> <span class="title">ListActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BluetoothAdapter mBluetoothAdapter;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mScanning;</span><br><span class="line">    <span class="keyword">private</span> Handler mHandler;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Stops scanning after 10 seconds.</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> SCAN_PERIOD = <span class="number">10000</span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">scanLeDevice</span><span class="params">(<span class="keyword">final</span> <span class="keyword">boolean</span> enable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (enable) &#123;</span><br><span class="line">            <span class="comment">// Stops scanning after a pre-defined scan period.</span></span><br><span class="line">            mHandler.postDelayed(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    mScanning = <span class="keyword">false</span>;</span><br><span class="line">                    mBluetoothAdapter.stopLeScan(mLeScanCallback);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, SCAN_PERIOD);</span><br><span class="line"></span><br><span class="line">            mScanning = <span class="keyword">true</span>;</span><br><span class="line">            mBluetoothAdapter.startLeScan(mLeScanCallback);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mScanning = <span class="keyword">false</span>;</span><br><span class="line">            mBluetoothAdapter.stopLeScan(mLeScanCallback);</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果只想扫描一种固定类型的外围设备，可以使用 <code>startLeScan(UUID[], BluetoothAdapter.LeScanCallback)</code>方法，提供一个<a href="https://developer.android.google.cn/reference/java/util/UUID.html" target="_blank" rel="noopener">UUID</a>组来限制你的APP提供的GATT服务</p>
<p>mLeScanCallback代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> LeDeviceListAdapter mLeDeviceListAdapter;</span><br><span class="line">...</span><br><span class="line"><span class="comment">// Device scan callback.</span></span><br><span class="line"><span class="keyword">private</span> BluetoothAdapter.LeScanCallback mLeScanCallback =</span><br><span class="line">        <span class="keyword">new</span> BluetoothAdapter.LeScanCallback() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLeScan</span><span class="params">(<span class="keyword">final</span> BluetoothDevice device, <span class="keyword">int</span> rssi,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">byte</span>[] scanRecord)</span> </span>&#123;</span><br><span class="line">        runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">               mLeDeviceListAdapter.addDevice(device);</span><br><span class="line">               mLeDeviceListAdapter.notifyDataSetChanged();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 开发笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Bluetooth </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[蓝牙模块(四)-Android与HC05蓝牙模块连接]]></title>
      <url>/2017/02/07/Android/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91-%E8%93%9D%E7%89%99%E6%A8%A1%E5%9D%97(%E5%9B%9B)Android%E4%B8%8EHC-05%E8%93%9D%E7%89%99%E6%A8%A1%E5%9D%97%E8%BF%9E%E6%8E%A5/</url>
      <content type="html"><![CDATA[<h2 id="Android与HC05蓝牙模块连接"><a href="#Android与HC05蓝牙模块连接" class="headerlink" title="Android与HC05蓝牙模块连接"></a>Android与HC05蓝牙模块连接</h2><p> 因为我们的项目最终更是要用手机和MT7697用蓝牙连接，鉴于假期手边没有MT7697，就先用arduino来尝试Android和HC-05模块的连接。</p>
<a id="more"></a>
<p>买的HC-05模块是因为这个蓝牙模块既可以做主机又可以做从机。目前在市场上hc-05模块有两种一种是有EN脚，另一种是KEY脚, 他们之间的差别在于进入AT模式的方法。</p>
<p>我买的是带EN脚的，它进入AT模式的方式是<strong>按住按钮，将EN脚置3.3V，上电</strong></p>
<p>模块状态：</p>
<ul>
<li>快闪：正常模式</li>
<li>慢闪 ，闪2s停2s：AT模式</li>
<li>每2s闪烁两下：已经连接</li>
</ul>
<h2 id="使用Arduino配置蓝牙AT指令"><a href="#使用Arduino配置蓝牙AT指令" class="headerlink" title="使用Arduino配置蓝牙AT指令"></a>使用Arduino配置蓝牙AT指令</h2><p>###步骤1 给Arduino下载程序</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LED 13</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       pinMode(LED,OUTPUT);</span><br><span class="line">       Serial.begin(<span class="number">38400</span>);<span class="comment">//这里应该和你的模块通信波特率一致</span></span><br><span class="line">       delay(<span class="number">100</span>);</span><br><span class="line">       Serial.println(<span class="string">"AT"</span>);</span><br><span class="line">       delay(<span class="number">100</span>);</span><br><span class="line">       Serial.println(<span class="string">"AT+NAME=HC05-Bluetooth"</span>);<span class="comment">//命名模块名</span></span><br><span class="line">       delay(<span class="number">100</span>);</span><br><span class="line">       Serial.println(<span class="string">"AT+ROLE=0"</span>);<span class="comment">//设置主从模式：0从机，1主机</span></span><br><span class="line">       delay(<span class="number">100</span>);</span><br><span class="line">       Serial.println(<span class="string">"AT+PSWD=1111"</span>);<span class="comment">//设置配对密码，如1234</span></span><br><span class="line">       delay(<span class="number">100</span>);</span><br><span class="line">       Serial.println(<span class="string">"AT+UART=9600,0,0"</span>);<span class="comment">//设置波特率9600，停止位1，校验位无</span></span><br><span class="line">       delay(<span class="number">100</span>);</span><br><span class="line">       Serial.println(<span class="string">"AT+RMAAD"</span>);<span class="comment">//清空配对列表</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       digitalWrite(LED, HIGH);</span><br><span class="line">       delay(<span class="number">500</span>);</span><br><span class="line">       digitalWrite(LED, LOW);</span><br><span class="line">       delay(<span class="number">500</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>###步骤2 连线：</p>
<p> RXD-TX TXD-RX VCC-VCC GND-GND <strong>EN连3.3V</strong></p>
<h3 id="步骤3："><a href="#步骤3：" class="headerlink" title="步骤3："></a>步骤3：</h3><p>按下HC-05上的按键，再给Arduino上电，让程序开始运行一次，当发现LED灯500ms闪烁时表明已经设置成功，再用手机连蓝牙模块时候会发现蓝牙名字变成了HC05-Bluetooth,需要用1111作为配对密码</p>
<h2 id="用arduino给配置蓝牙AT指令（二）"><a href="#用arduino给配置蓝牙AT指令（二）" class="headerlink" title="用arduino给配置蓝牙AT指令（二）"></a>用arduino给配置蓝牙AT指令（二）</h2><p>再网上看到一个更方便的用arduino配置蓝牙指令的方法</p>
<h3 id="步骤1-下载程序"><a href="#步骤1-下载程序" class="headerlink" title="步骤1 下载程序"></a>步骤1 下载程序</h3><h3 id="后来发现甚至直接烧录一个空的程序进去-RX接RX-amp-TX接TX，不影响进入AT模式，且也可以在串口上正常显示结果"><a href="#后来发现甚至直接烧录一个空的程序进去-RX接RX-amp-TX接TX，不影响进入AT模式，且也可以在串口上正常显示结果" class="headerlink" title="(后来发现甚至直接烧录一个空的程序进去,RX接RX  &amp; TX接TX，不影响进入AT模式，且也可以在串口上正常显示结果)"></a>(后来发现甚至直接烧录一个空的程序进去,RX接RX  &amp; TX接TX，不影响进入AT模式，且也可以在串口上正常显示结果)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  by Brandon Plumbo AKA Riftliger</span></span><br><span class="line"><span class="comment">//  original version from Martyn Currey http://www.martyncurrey.com/</span></span><br><span class="line"><span class="comment">//  HC-05 universal test sketch to enter AT-commands</span></span><br><span class="line"><span class="comment">//  Uses hardware serial to talk to the host computer and software serial for communication with the bluetooth module</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Pins</span></span><br><span class="line"><span class="comment">//  BT VCC to Arduino 5V out.</span></span><br><span class="line"><span class="comment">//  BT GND to GND</span></span><br><span class="line"><span class="comment">//  Arduino D11 to BT RX</span></span><br><span class="line"><span class="comment">//  Arduino D10 BT TX</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  When a command is entered in the serial monitor on the computer</span></span><br><span class="line"><span class="comment">//  the Arduino will relay it to the bluetooth module and display the result.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  The HC-05 modules require both CR and NL</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;SoftwareSerial.h&gt;</span></span></span><br><span class="line"><span class="function">SoftwareSerial <span class="title">BTSerial</span><span class="params">(<span class="number">10</span>, <span class="number">11</span>)</span></span>; <span class="comment">//  TX,RX</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> c = <span class="string">' '</span>;</span><br><span class="line">boolean NL = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  Serial.begin(<span class="number">9600</span>);</span><br><span class="line">  Serial.println(<span class="string">"Sketch HC-05"</span>);</span><br><span class="line">  Serial.println(<span class="string">"Arduino with HC-05 is ready"</span>);</span><br><span class="line">  Serial.println(<span class="string">"Make sure Both NL &amp; CR are set"</span>);</span><br><span class="line">  Serial.println(<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//Set to HC-05 default baud rate, found using AT+UART.  It is usually 38400.</span></span><br><span class="line">  BTSerial.begin(<span class="number">38400</span>);</span><br><span class="line">  Serial.println(<span class="string">"BTserial started at 38400"</span>);</span><br><span class="line">  Serial.println(<span class="string">""</span>);</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Read from the Bluetooth module and send to the Arduino Serial Monitor</span></span><br><span class="line">  <span class="keyword">if</span> (BTSerial.available())</span><br><span class="line">  &#123;</span><br><span class="line">    c = BTSerial.read();</span><br><span class="line">    Serial.write(c);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Read from the Serial Monitor and send to the Bluetooth module</span></span><br><span class="line">  <span class="keyword">if</span> (Serial.available())</span><br><span class="line">  &#123;</span><br><span class="line">    c = Serial.read();</span><br><span class="line">    BTSerial.write(c);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Echo the user input to the main window. The "&gt;" character indicates the user entered text.</span></span><br><span class="line">    <span class="keyword">if</span> (NL) &#123;</span><br><span class="line">      Serial.print(<span class="string">"&gt;"</span>);</span><br><span class="line">      NL = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Serial.write(c);</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">10</span>) &#123;</span><br><span class="line">      NL = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中SoftwareSerial库的作用：</p>
<p>先用的Arduino支持引脚0和1进行串行通信，而现有的SoftwareSerial库允许其他数字引脚进行串行通信</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">SoftwareSerial <span class="title">mySerial</span><span class="params">(<span class="number">2</span>, <span class="number">3</span>)</span></span>; </span><br><span class="line"><span class="comment">//  RX是数字引脚2（连接到其他设备的TX） </span></span><br><span class="line"><span class="comment">//  TX是数字引脚3（连接到其他设备的RX）</span></span><br></pre></td></tr></table></figure>
<h3 id="步骤2-连线"><a href="#步骤2-连线" class="headerlink" title="步骤2 连线"></a>步骤2 连线</h3><p><strong>RXD-11 TXD-10</strong> VCC-VCC GND-GND EN连3.3V</p>
<h3 id="步骤3"><a href="#步骤3" class="headerlink" title="步骤3"></a>步骤3</h3><p>按下HC-05上的按键，再给Arduino上电。然后打开arduino的IDE内置的串口工具，输入AT发现返回OK，即可以在命令窗口进行AT设置</p>
<p><img src="/images/Android/serial.png" alt=""></p>
<p>常用的AT指令：</p>
<table>
<thead>
<tr>
<th>AT+UART</th>
<th>设置串口参数</th>
</tr>
</thead>
<tbody>
<tr>
<td>AT+PSWD</td>
<td>设置配对码</td>
</tr>
<tr>
<td>AT+ROLE</td>
<td>设置模块角色 0 从角色，1 主角色，2 回环角色</td>
</tr>
<tr>
<td>AT+CMODE=&lt;模式&gt;</td>
<td>0–指定蓝牙地址连接模式</td>
</tr>
<tr>
<td></td>
<td>1–任意蓝牙地址连接模式</td>
</tr>
<tr>
<td></td>
<td>2–回环角色（Slave-Loop）</td>
</tr>
<tr>
<td>AT+BIND=&lt;绑定蓝牙地址&gt;</td>
<td>绑定蓝牙地址（只在指定蓝牙地址模式有效）</td>
</tr>
<tr>
<td>AT+PAIR=&lt;远程设备地址&gt;&lt;连接超时&gt;</td>
<td>设备配对</td>
</tr>
</tbody>
</table>
<h2 id="用USB-to-UART模块设置蓝牙"><a href="#用USB-to-UART模块设置蓝牙" class="headerlink" title="用USB to UART模块设置蓝牙"></a>用USB to UART模块设置蓝牙</h2><p>需要有与USB转串口模块和串口调试助手</p>
<p>设置好AT模式之后，将HC05调成从机模式，设置蓝牙连接模式为指定地址连接模式，并绑定手机地址，和手机进行通信</p>
<hr>
<h2 id="手机与蓝牙模块的连接"><a href="#手机与蓝牙模块的连接" class="headerlink" title="手机与蓝牙模块的连接"></a>手机与蓝牙模块的连接</h2><p>首先按上述方法二进入AT模式，将蓝牙模块设置成slave(AT+ROLE),连接模式设为指定地址连接(AT+CMODE),再绑定手机的MAC地址(AT+BIND)，然后要记得把<strong>EN接地</strong></p>
<p>给arduino写入实验代码，蓝牙控制arduino上的灯 如果接受到1就亮，2就不亮</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Serial.begin(<span class="number">38400</span>); <span class="comment">//一定不要忘掉是38400！！！</span></span><br><span class="line">  pinMode(<span class="number">13</span>,OUTPUT);</span><br><span class="line">  Serial.println(<span class="string">"Program start..."</span>);  </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(Serial.available()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">   <span class="keyword">char</span> c= Serial.read();</span><br><span class="line">   <span class="keyword">if</span>(c==<span class="string">'1'</span>)</span><br><span class="line">     &#123;</span><br><span class="line">       Serial.println(<span class="string">"Get 1"</span>);</span><br><span class="line">       Serial.write(<span class="string">"Serial--13--HIGH"</span>);</span><br><span class="line">       digitalWrite(<span class="number">13</span>,HIGH);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span>(c==<span class="string">'2'</span>)</span><br><span class="line">     &#123;</span><br><span class="line">       Serial.println(<span class="string">"Get 2"</span>);</span><br><span class="line">       Serial.write(<span class="string">"Serial--13--LOW"</span>);</span><br><span class="line">       digitalWrite(<span class="number">13</span>,LOW);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Serial.print</code>发送的是字符，如果你发送97，发过去的其实是9的ascii码(00111001)和7的ascii码(00110111)</p>
<p><code>Serial.write</code> 发送的是字节，是一个0-255的数字，如果你发97， 发过去的其实是97的二进制(01100001)，对应ascii表中的“a”.</p>
<p>首先尝试用蓝牙串口助手和蓝牙相连是可以正常通信的，再换之前的蓝牙demo。</p>
<blockquote>
<p>用之前的Demo一直无法连接，后来上网查到对串口操作的UUID是00001101-0000-1000-8000-00805F9B34FB，这样程序就能跑通了</p>
</blockquote>
<hr>
<h2 id="背景知识-UART"><a href="#背景知识-UART" class="headerlink" title="背景知识:UART"></a>背景知识:UART</h2><h3 id="什么是UART"><a href="#什么是UART" class="headerlink" title="什么是UART:"></a>什么是UART:</h3><p>​    通用异步收发传输器（Universal Asynchronous Receiver/Transmitter)，通常称作UART，是一种异步收发传输器，是电脑硬件的一部分。将资料由<a href="http://baike.baidu.com/view/716175.htm" target="_blank" rel="noopener">串行通信</a>与<a href="http://baike.baidu.com/view/716178.htm" target="_blank" rel="noopener">并行通信</a>间作传输转换，作为并行输入成为串行输出的芯片，通常集成于其他通讯接口的连结上。</p>
<h3 id="通信协议："><a href="#通信协议：" class="headerlink" title="通信协议："></a>通信协议：</h3><p>​    UART作为异步<a href="http://baike.baidu.com/view/2459734.htm" target="_blank" rel="noopener">串口通信协议</a>的一种，工作原理是将传输数据的每个字符一位接一位地传输，其中各位意义如下：</p>
<ul>
<li>起始位：先发出一个逻辑”0”的信号，表示传输字符的开始</li>
<li>资料位：紧接着起始位之后。资料位的个数可以是4、5、6、7、8等，构成一个字符。通常采用ASCII码。从最低位开始传送，靠时钟定位。</li>
<li><a href="http://baike.baidu.com/view/492663.htm" target="_blank" rel="noopener">奇偶校验位</a>：资料位加上这一位后，使得“1”的位数应为偶数(偶校验)或奇数(奇校验)，以此来校验资料传送的正确性。</li>
<li>停止位：它是一个字符数据的结束标志。</li>
<li>空闲位：处于逻辑“1”状态，表示当前线路上没有资料传送。</li>
<li><a href="http://baike.baidu.com/view/543280.htm" target="_blank" rel="noopener">波特</a>率：是衡量资料传送速率的指标。表示每秒钟传送的符号数（symbol）。一个符号代表的信息量（比特数）与符号的阶数有关。例如资料传送速率为120字符/秒，传输使用256阶符号，每个符号代表8bit，则波特率就是120baud，比特率是120*8=960bit/s。这两者的概念很容易搞错。</li>
</ul>
<p><a href="https://github.com/XuyangBai/Bluetooth" target="_blank" rel="noopener">Arduino_BT_Android</a></p>
]]></content>
      
        <categories>
            
            <category> 开发笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Bluetooth </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Servlet & JSP简介]]></title>
      <url>/2017/02/06/Servlet&amp;JSP%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<h2 id="Servlet-amp-JSP"><a href="#Servlet-amp-JSP" class="headerlink" title="Servlet &amp; JSP"></a>Servlet &amp; JSP</h2><p>课堂助手项目，要开发一个Web应用。采用MUI框架开发前端，用Servlet和JSP做后端，以下为《 Head First Servlet &amp; JSP 》 前两章内容。</p>
<a id="more"></a>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ul>
<li><p><strong>Web服务器</strong>：如Apache等，Web服务器接受客户请求，然后返回一些结果</p>
</li>
<li><p><strong>Web客户端</strong>：Web客户端是指浏览器应用，其允许用户请求服务器上的某个资源，并且解释HTML代码，向用户显示的请求结果。</p>
<p><img src="/images/JSP/client&amp;server.png" alt=""></p>
</li>
<li><p><strong>HTML</strong>：超文本标记语言，告诉浏览器如何把内容呈现给用户</p>
</li>
<li><p><strong>HTTP协议</strong>：是Web上客户端和服务器之间通信所用的协议，HTTP协议是TCP/IP的上层协议，依赖于TCP/IP协议，使用一种请求/响应模式，客户做出一个HTTP请求，Web服务器返回HTTP响应</p>
</li>
<li><p><strong>TCP协议</strong>：负责确保一个网络节点向另一个网络节点发送的文件能够作为一个完整的文件到达目的地，尽管在具体传送过程中可能会吧这个文件切分成小块</p>
</li>
<li><p><strong>IP协议</strong>：一个底层协议，负责把数据块沿路移动（路由）到目的地</p>
</li>
<li><p><strong>Http请求</strong>：包括URL，HTTP方法，表单参数内容等。最常用的为GET和POST</p>
<p>​  <img src="/images/JSP/httpget.png" alt=""></p>
</li>
</ul>
<p>  <img src="/images/JSP/httppost.png" alt=""></p>
<p>  post请求可以向服务器做很复杂的请求，其参数放在消息体中，长度不像GET那样受到限制，另一个区别就是安全性</p>
<ul>
<li><p><strong>Http响应</strong>：包括状态码、内容类型(MIME类型)、响应实际内容</p>
<p><img src="/images/JSP/http响应.png" alt=""></p>
<p>综上，我们用浏览器访问一个网站时候的过程就是</p>
</li>
</ul>
<p>用户键入一个URL–&gt;浏览器创建一个GET请求–&gt;HTTP GET发送到服务器–&gt;服务器找到页面之后生成HTTP响应–&gt;HTTP响应被发送到浏览器–&gt;浏览器显示HTML</p>
<blockquote>
<p>URL: Uniform Resource Locators 统一资源定位符，Web上每个资源都有唯一的位置</p>
</blockquote>
<p><a href="http://www.wickedlysmart.com:80/beeradvice/select/beer1.html" target="_blank" rel="noopener">http://www.wickedlysmart.com:80/beeradvice/select/beer1.html</a></p>
<p>(协议)://(服务器ip地址)[:端口]/(资源所在服务器上的路径)/(资源)</p>
<p>如果这是一个GET请求，在URL后面会有<code>?key/value</code> 各个参数之间用&amp;分隔开</p>
<p>  <img src="/images/JSP/port.png" alt="常用端口号"></p>
<blockquote>
<p>Web服务器擅长提供静态HTML页面，如果需要的页面中有动态创建的数据，就需要辅助应用于服务器写作。（通常称为CGI，公共网管接口）。这样Servlet（Java代码）和JSP应运而生，因为把HTML写到println()中很容易出错，所以JSP把JAVA放在HTML页面中</p>
</blockquote>
<hr>
<h2 id="Web应用体系结构"><a href="#Web应用体系结构" class="headerlink" title="Web应用体系结构"></a>Web应用体系结构</h2><p><strong>什么是容器：</strong></p>
<p>servlet没有main()方法。他们受控于另一个JAVA应用，这个应用称为容器（Container），Tomcat就是一个容器。Web服务器应用（如Apache）得到一个指向servlet的请求时，服务器不是把请求交给servlet本身，而是交给部署该servlet的容器。其过程是：</p>
<ol>
<li>用户点击一个URL，指向一个Servlet </li>
<li>容器创建两个对象 HttpServletResponse和HttpServletRequest</li>
<li>容器根据请求中的URL找到对应的Servlet，为这个请求创建一个线程，调用servlet中的service方法，把请求和响应对象作为参数传递过去</li>
<li>service()方法根据客户发出的Http方法（GET POST）确定调用doGet()还是doPost()</li>
<li>servlet使用响应对象把响应写给用户，响应通过容器传回</li>
<li>Service方法结束，撤销线程</li>
</ol>
<p><strong>容器能做什么：</strong></p>
<ol>
<li>生命周期管理</li>
<li>多线程支持</li>
<li>声明方式实现安全</li>
<li>JSP支持</li>
</ol>
<p><strong>容器如何找到servlet：</strong></p>
<p>使用部署描述文件（web.xml）把URL映射到servlet</p>
<p><servlet>把内部名映射到完全限定类名</servlet></p>
<p><servlet-mapping>把内部名映射到公共URL名</servlet-mapping></p>
<p>  <img src="/images/JSP/webxml.png" alt="常用端口号"></p>
<h3 id="MVC模式"><a href="#MVC模式" class="headerlink" title="MVC模式"></a>MVC模式</h3><p>模型-视图-控制器设计模式，可以实现业务逻辑和显示的分离</p>
<pre><code>![常用端口号](/images/JSP/MVC.png)
</code></pre><p>例：啤酒推荐Web应用</p>
<p><img src="/images/JSP/beer.png" alt="eg"></p>
<p>form.html放在tomcat/webapps/Beer/中</p>
<p>部署文件：web.xml放在tomcat/webapps/Beer/WEB_INF/中</p>
<p>Servet：BeerSelect.java放在Beer/WEB-INF/classes/com/example/web/下</p>
<p>模型：BeerExpert.java放在Beer/WEB-INF/classes/com/example/model下</p>
<p>JSP：result.jsp放在webapps/Beer/下</p>
<hr>
<h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><h3 id="Servlet的生命周期"><a href="#Servlet的生命周期" class="headerlink" title="Servlet的生命周期"></a>Servlet的生命周期</h3><p>servlet的生命周期很简答，只有一个主要的状态–初始化。如果servlet没有初始化，则要么正在初始化（运行init）、正在撤销（运行destroy） 要么就是还不存在</p>
<p><img src="/images/JSP/servlet生命周期.png" alt="eg"></p>
<p>所以servlet只有一个实例，对于多个请求，servlet会分配多个线程来处理。</p>
<p><img src="/images/JSP/servlet多线程.png" alt="eg"></p>
<h3 id="HttpServletRequest发送和使用参数"><a href="#HttpServletRequest发送和使用参数" class="headerlink" title="HttpServletRequest发送和使用参数"></a>HttpServletRequest发送和使用参数</h3><p>在html中添加表单</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"UserLoginServlet"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span> </span><br><span class="line">		</span><br><span class="line">		用户名<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">		密码<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>  /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"登录"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在servelt中使用以下方法来获得参数</p>
<p><code>String one = request.getParameter(&quot;paramname&quot;)</code></p>
<p>如果参数含有多个值（复选框）</p>
<p><code>String[] ones = request.getParameterValues(&quot;paramname&quot;)</code> </p>
<h3 id="HttpServletResponse"><a href="#HttpServletResponse" class="headerlink" title="HttpServletResponse"></a>HttpServletResponse</h3><p>大多数情况下适用响应知识为了向客户发挥数据，会对响应调用两个方法<code>serContentType()和getWrite()</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置输出内容类型</span></span><br><span class="line">response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);	</span><br><span class="line"><span class="comment">//常用的MIME类型 text/html  application/pdf(java jar x-zip)  video/quicktime  image/jpeg</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果希望向客户发送一个jar</span></span><br><span class="line">response.setContentType(<span class="string">"application/jar"</span>);	</span><br><span class="line">ServletContext ctx=getServletContext();</span><br><span class="line">InputStream is= ctx.getResourceAsStream(<span class="string">"/bookCode.jar"</span>);</span><br><span class="line">OutputStream os= response.getOutputStream();</span><br><span class="line"><span class="keyword">int</span> read=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">byte</span>[] bytes= <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">while</span>((read = is.read(bytes))! = -<span class="number">1</span>)&#123;</span><br><span class="line">  os.write(bytes,<span class="number">0</span>,read);</span><br><span class="line">&#125;</span><br><span class="line">os.flush();</span><br><span class="line">os.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出 ServletOutputStream用于输出字节 PrintWrite用于输出字符数据</span></span><br><span class="line">OutputStream os= response.getOutputStream();</span><br><span class="line">PrinterWriter out = response.getWrite();</span><br><span class="line"><span class="comment">//write()方法用于os  println()方法用于out</span></span><br><span class="line">os.write(str);</span><br><span class="line">out.println(str);</span><br></pre></td></tr></table></figure>
<h3 id="重定向："><a href="#重定向：" class="headerlink" title="重定向："></a>重定向：</h3><p>response.sendRedirect(“<a href="http://www.nba.com" target="_blank" rel="noopener">http://www.nba.com</a>“)  </p>
<p>在重定向中可以使用相对URL</p>
<p>假设原来键入的是<code>http://www.china.nba.com/myApp/cool</code></p>
<p>使用<code>sendRedirect(&quot;foo/stuff.html&quot;)</code>之后(<strong>注意这里没有斜线</strong>)，实际的URL会是</p>
<p><code>http://www.china.nba.com/myApp/cool/foo/stuff.html</code></p>
<h3 id="请求分配"><a href="#请求分配" class="headerlink" title="请求分配"></a>请求分配</h3><p>请求分配和重定向的差别是 重定向是让客户来完成工作，而请求分配是让服务器上的某某来完成任务。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RequestDispatcher view = request.getRequestDispatcher(<span class="string">"result.jsp"</span>);</span><br><span class="line">view.forward(request,response);</span><br></pre></td></tr></table></figure>
<p>session？</p>
<p>attribute？来回传递</p>
]]></content>
      
        
        <tags>
            
            <tag> JSP </tag>
            
            <tag> Html </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[蓝牙模块(三)Demo补充知识]]></title>
      <url>/2017/02/04/Android/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91-%E8%93%9D%E7%89%99%E6%A8%A1%E5%9D%97(%E4%B8%89)Demo%E8%A1%A5%E5%85%85%E7%9F%A5%E8%AF%86/</url>
      <content type="html"><![CDATA[<h2 id="蓝牙模块Demo补充知识"><a href="#蓝牙模块Demo补充知识" class="headerlink" title="蓝牙模块Demo补充知识"></a>蓝牙模块Demo补充知识</h2><p>startActivityForResult 获取activity的结果 &amp; Thread线程 &amp;  handler的使用</p>
<a id="more"></a>
<h3 id="1-如何获取Activity的结果"><a href="#1-如何获取Activity的结果" class="headerlink" title="1.如何获取Activity的结果"></a>1.如何获取Activity的结果</h3><p>在这个App中的MainActivity 我调用了DeviceListActivity，并得到了用户选择的蓝牙设备。这个过程是通过调用<a href="https://developer.android.google.cn/reference/android/app/Activity.html#startActivityForResult(android.content.Intent, int" target="_blank" rel="noopener">startActivityForResult()</a>) 实现的，比普通的 <code>startActivity()</code>多一个请求代码，同时在响应的Activity中药设计返回结果，作为另一个Intent对象发送结果。我在MainActivity中使用 <code>onActivityResult()</code> 回调中接收它</p>
<p> <code>startActivityForResult()</code>  两个参数，第一个为Intent，第二个是请求代码</p>
<p> <code>onActivityResult()</code> 三个参数，第一个是请求代码，第二个是Activity指定的结果代码（操作成功是RESULT_OK，操作失败是RESULT_CANCELED），第三个参数是传递结果数据的Intent</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义了三个常量作为请求代码requestCode，下面有三个对应的startActivityForResult()</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REQUEST_ENABLE_BT = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REQUEST_CONNECT_DEVICE = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REQUEST_DISCOVERABLE = <span class="number">3</span> ;</span><br><span class="line"></span><br><span class="line">Intent enableIntent = <span class="keyword">new</span> Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);</span><br><span class="line">startActivityForResult(enableIntent, REQUEST_ENABLE_BT);</span><br><span class="line"></span><br><span class="line">Intent serverIntent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, DeviceListActivity.class);</span><br><span class="line">startActivityForResult(serverIntent, REQUEST_CONNECT_DEVICE);</span><br><span class="line"></span><br><span class="line">Intent discoveryIntent = <span class="keyword">new</span> Intent(BluetoothAdapter.ACTION_REQUEST_DISCOVERABLE);</span><br><span class="line">discoveryIntent.putExtra(BluetoothAdapter.EXTRA_DISCOVERABLE_DURATION, <span class="number">300</span>);</span><br><span class="line">startActivityForResult(discoveryIntent, REQUEST_DISCOVERABLE);</span><br><span class="line"></span><br><span class="line"><span class="comment">//接收startActivityForResult的结果</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (requestCode) &#123;</span><br><span class="line">            <span class="keyword">case</span> REQUEST_CONNECT_DEVICE:</span><br><span class="line">                <span class="comment">// When DeviceListActivity returns with a device to connect</span></span><br><span class="line">                <span class="keyword">if</span> (resultCode == Activity.RESULT_OK) &#123;</span><br><span class="line">                    <span class="comment">//do something</span></span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                  <span class="comment">//do something </span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> REQUEST_ENABLE_BT:</span><br><span class="line">            	<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> REQUEST_DISCOVERABLE:</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-Thread线程"><a href="#2-Thread线程" class="headerlink" title="2. Thread线程"></a>2. Thread线程</h3><p>​    线程有两种创建方式</p>
<ul>
<li><p>扩展Java.lang.Thread类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrimeThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">         <span class="keyword">long</span> minPrime;</span><br><span class="line">         PrimeThread(<span class="keyword">long</span> minPrime) &#123;</span><br><span class="line">             <span class="keyword">this</span>.minPrime = minPrime;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">             <span class="comment">// compute primes larger than minPrime</span></span><br><span class="line">              . . .</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//以下代码用来创建该线程并启动</span></span><br><span class="line">PrimeThread p = <span class="keyword">new</span> PrimeThread(<span class="number">143</span>);</span><br><span class="line">p.start();</span><br></pre></td></tr></table></figure>
</li>
<li><p>实现Runnable接口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrimeRun</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">         <span class="keyword">long</span> minPrime;</span><br><span class="line">         PrimeRun(<span class="keyword">long</span> minPrime) &#123;</span><br><span class="line">             <span class="keyword">this</span>.minPrime = minPrime;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">             <span class="comment">// compute primes larger than minPrime</span></span><br><span class="line">              . . .</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> <span class="comment">//以下代码用来创建该线程并启动</span></span><br><span class="line">PrimeRun p = <span class="keyword">new</span> PrimeRun(<span class="number">143</span>);</span><br><span class="line"><span class="keyword">new</span> Thread(p).start();</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="3-Handler的使用"><a href="#3-Handler的使用" class="headerlink" title="3.Handler的使用"></a>3.Handler的使用</h3><p>因为为了良好的用户体验Android开发一般有这两个原则：</p>
<ul>
<li><p>耗时的操作不能在执行主线程</p>
</li>
<li><p>UI界面只能在主线程中更新</p>
</li>
</ul>
<p>在这次开发中当建立起蓝牙连接之后，管理连接的子线程应保持工作，同时主线程又要实时更新UI界面让用户能看到对话内容，所以应当采用Thread+Handler的异步处理方式，让主线程监听子线程发送来的消息。</p>
<p>子线程代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在子线程中每更新一次状态，都向主线程发送一个消息  </span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"状态改变"</span> + mState + <span class="string">" -&gt; "</span> + state);</span><br><span class="line">        mState = state;</span><br><span class="line">        <span class="comment">// Give the new state to the Handler so the UI Activity can update</span></span><br><span class="line">        mHandler.obtainMessage(Constants.MESSAGE_STATE_CHANGE, state, -<span class="number">1</span>).sendToTarget();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//管理连接线程 的run函数， 不断的向主线程返回用户发送的消息</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> bytes;</span><br><span class="line">            <span class="comment">// Keep listening to the InputStream while connected</span></span><br><span class="line">            <span class="keyword">while</span> (mState == STATE_CONNECTED) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// Read from the InputStream</span></span><br><span class="line">                    bytes = mmInStream.read(buffer);</span><br><span class="line">                    mHandler.obtainMessage(Constants.MESSAGE_READ, bytes, -<span class="number">1</span>, buffer)</span><br><span class="line">                            .sendToTarget();</span><br><span class="line">                    <span class="comment">// Send the obtained bytes to the UI Activity</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    connectionLost();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>主线程接受消息的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 获得从BluetoothChatServer返回的信息    */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Handler mHandler = <span class="keyword">new</span> Handler() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">switch</span> (msg.what) &#123; <span class="comment">//根据消息类型做不同的处理</span></span><br><span class="line">                <span class="keyword">case</span> Constants.MESSAGE_STATE_CHANGE:</span><br><span class="line">                    <span class="keyword">switch</span> (msg.arg1) &#123;</span><br><span class="line">                        <span class="keyword">case</span> BluetoothChatServer.STATE_CONNECTED:</span><br><span class="line">                            <span class="comment">//蓝牙连接已建立</span></span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> BluetoothChatServer.STATE_CONNECTING:</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> BluetoothChatServer.STATE_LISTEN:</span><br><span class="line">                        <span class="keyword">case</span> BluetoothChatServer.STATE_NONE:</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> Constants.MESSAGE_WRITE:</span><br><span class="line">                    <span class="keyword">byte</span>[] writeBuf = (<span class="keyword">byte</span>[]) msg.obj;</span><br><span class="line">                    String writeMessage = <span class="keyword">new</span> String(writeBuf);</span><br><span class="line">                    ChatTV.append(<span class="string">"Me:  "</span> + writeMessage+<span class="string">"\n"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> Constants.MESSAGE_READ:</span><br><span class="line">                    <span class="keyword">byte</span>[] readBuf = (<span class="keyword">byte</span>[]) msg.obj;</span><br><span class="line">                    String readMessage = <span class="keyword">new</span> String(readBuf, <span class="number">0</span>, msg.arg1);</span><br><span class="line">                    ChatTV.append(<span class="string">"Him:     "</span> + readMessage+ <span class="string">"\n"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> Constants.MESSAGE_DEVICE_NAME:</span><br><span class="line">                    String mConnectedDeviceName = msg.getData().getString(Constants.DEVICE_NAME);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> Constants.MESSAGE_TOAST:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>
<h3 id="4-Acticity菜单机制"><a href="#4-Acticity菜单机制" class="headerlink" title="4.Acticity菜单机制"></a>4.Acticity菜单机制</h3><p>Activity有一套机制实现对菜单的管理</p>
<ul>
<li><p><code>public boolean onCreateOptionsMenu(Menu menu)</code> 初始化菜单</p>
</li>
<li><p><code>public boolean onPrepareOptionsMenu(Menu menu)</code> 在菜单显示前被调用</p>
</li>
<li><p><code>public void onOptionsMenuClosed(Menu menu)</code> 在菜单关闭前被调用（菜单关闭有三种情形，menu按钮被再次点击，back按钮被点击或者用户选择了某个菜单项）</p>
</li>
<li><p><code>public boolean onOptionsItemSelected(MenuItem item)</code> 菜单项被点击时候调用</p>
</li>
</ul>
<p><strong>添加菜单：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//调用Activity的getMenuInflater()得到一个MenuInflater,使用inflate方法来把布局文件中的定义的菜单 加载给 第二个参数所对应的menu对象</span></span><br><span class="line">    getMenuInflater().inflate(R.menu.main, menu);</span><br><span class="line">  <span class="comment">//根据当前扫描状态决定目录项谁可见谁不可见</span></span><br><span class="line">    <span class="keyword">if</span> (!mScanning) &#123;</span><br><span class="line">        menu.findItem(R.id.menu_stop).setVisible(<span class="keyword">false</span>);</span><br><span class="line">        menu.findItem(R.id.menu_scan).setVisible(<span class="keyword">true</span>);</span><br><span class="line">        menu.findItem(R.id.menu_refresh).setActionView(<span class="keyword">null</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        menu.findItem(R.id.menu_stop).setVisible(<span class="keyword">true</span>);</span><br><span class="line">        menu.findItem(R.id.menu_scan).setVisible(<span class="keyword">false</span>);</span><br><span class="line">        menu.findItem(R.id.menu_refresh).setActionView(</span><br><span class="line">                R.layout.actionbar_indeterminate_progress);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>并需要在res目录下新建一个menu文件夹，并创建布局文件main.xml</p>
<p><strong>菜单项目监听：</strong></p>
<p>只要菜单中的菜单项被点击，都会触发onOptionsItemSelected(MenuItem item)<br>    item参数即为被点击的菜单项，那么需要在此方法内判断哪个Item被点击了，从而实现不同的操作。 对于两种不同的添加菜单方法，判断的方法有一点区别，但本质是一样的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (item.getItemId()) &#123;</span><br><span class="line">        <span class="keyword">case</span> R.id.menu_scan:</span><br><span class="line">            mLeDeviceListAdapter.clear();</span><br><span class="line">            scanLeDevice(<span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> R.id.menu_stop:</span><br><span class="line">            scanLeDevice(<span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 开发笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Bluetooth </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[安卓开发-Activity的生命周期]]></title>
      <url>/2017/02/03/Android/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91-Activity%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      <content type="html"><![CDATA[<p>##Acitivity的生命周期</p>
<p>因为看到例程中得<code>onCreate() onStart() onResume()</code>这些方法，不知道是作什么用的，所以查了一下发现和Acitivity 的生命周期有关系。</p>
<a id="more"></a>
<p>下图说明的很清楚</p>
<p><img src="/images/Android/activity.jpg" alt="Activity的生命周期"></p>
<p>1.启动Activity：系统会先调用onCreate方法，然后调用onStart方法，最后调用onResume，Activity进入运行状态。</p>
<p>2.当前Activity被其他Activity覆盖其上或被锁屏：系统会调用onPause方法，暂停当前Activity的执行。</p>
<p>3.当前Activity由被覆盖状态回到前台或解锁屏：系统会调用onResume方法，再次进入运行状态。</p>
<p>4.当前Activity转到新的Activity界面或按Home键回到主屏，自身退居后台：系统会先调用onPause方法，然后调用onStop方法，进入停滞状态。</p>
<p>5.用户后退回到此Activity：系统会先调用onRestart方法，然后调用onStart方法，最后调用onResume方法，再次进入运行状态。</p>
<p>6.当前Activity处于被覆盖状态或者后台不可见状态，即第2步和第4步，系统内存不足，杀死当前Activity，而后用户退回当前Activity：再次调用onCreate方法、onStart方法、onResume方法，进入运行状态。</p>
<p>7.用户退出当前Activity：系统先调用onPause方法，然后调用onStop方法，最后调用onDestory方法，结束当前Activity。</p>
]]></content>
      
        <categories>
            
            <category> 开发笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[蓝牙模块(二)]]></title>
      <url>/2017/02/03/Android/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91-%E8%93%9D%E7%89%99%E6%A8%A1%E5%9D%97(%E4%BA%8C)/</url>
      <content type="html"><![CDATA[<h2 id="蓝牙模块-二"><a href="#蓝牙模块-二" class="headerlink" title="蓝牙模块(二)"></a>蓝牙模块(二)</h2><p> 第二节介绍如何连接蓝牙设备，实现设备之间数据的传输</p>
<a id="more"></a>
<h3 id="设备连接"><a href="#设备连接" class="headerlink" title="设备连接"></a>设备连接</h3><p>要在两台设备上的应用之间创建连接，必须同时实现服务器端和客户端机制，因为其中一台设备必须开放服务器套接字，而另一台设备必须发起连接（使用服务器设备的 MAC 地址发起连接）。 当服务器和客户端在同一 RFCOMM 通道上分别拥有已连接的 <code>BluetoothSocket</code> 时，二者将被视为彼此连接</p>
<h3 id="服务器线程"><a href="#服务器线程" class="headerlink" title="服务器线程"></a>服务器线程</h3><ol>
<li><p>调用<code>listenUsingRfcommWithServiceRecord(String, UUID)</code> 获取 <code>BluetoothServerSocket</code> </p>
<p>通用唯一标识符 (UUID) 是用于唯一标识信息的字符串 ID 的 128 位标准化格式。每个uuid对应一种service，在蓝牙4.0的datasheet中有定义UUID的格式，哪个bit代表什么功能都有清楚定义，而且有很多常用的服务已经根据datasheet定义好了值，所以你上网会查到UUID表；不过，理论上，只要两台设备UUID是一致的，就能建立socket。统一格式，只是提高设备间的兼容性，避免不同service碰巧被定义为相同的uuid</p>
</li>
<li><p>通过<code>accept()</code>开始侦听连接请求， 操作成功后，<code>accept()</code> 将会返回已连接的 <code>BluetoothSocket</code>。</p>
</li>
<li><p><code>accept()</code>成功后必须关闭连接，调用 <code>close()</code></p>
<blockquote>
<p>注：因为<code>accept()</code> 是阻塞调用，所以调用不应在主 Activity UI 线程中执行，而是在线程中完成</p>
</blockquote>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">AcceptThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BluetoothServerSocket mmServerSocket;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AcceptThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Use a temporary object that is later assigned to mmServerSocket,</span></span><br><span class="line">        <span class="comment">// because mmServerSocket is final</span></span><br><span class="line">        BluetoothServerSocket tmp = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// MY_UUID is the app's UUID string, also used by the client code</span></span><br><span class="line">            tmp = mBluetoothAdapter.listenUsingRfcommWithServiceRecord(NAME, MY_UUID);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123; &#125;</span><br><span class="line">        mmServerSocket = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        BluetoothSocket socket = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// Keep listening until exception occurs or a socket is returned</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                socket = mmServerSocket.accept();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// If a connection was accepted</span></span><br><span class="line">            <span class="keyword">if</span> (socket != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// Do work to manage the connection (in a separate thread)</span></span><br><span class="line">                manageConnectedSocket(socket);</span><br><span class="line">                mmServerSocket.close();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Will cancel the listening socket, and cause the thread to finish */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mmServerSocket.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="客户端线程"><a href="#客户端线程" class="headerlink" title="客户端线程"></a>客户端线程</h3><ol>
<li><p>使用 <code>BluetoothDevice</code>, 通过调用 <code>createRfcommSocketToServiceRecord(UUID)</code> 获取 <code>BluetoothSocket</code> 这里传递的UUID必须和服务器设备使用的UUID相同</p>
</li>
<li><p>通过调用 <code>connect()</code> 发起连接，与<code>accept()</code>类似， <code>connect()</code> 也为阻塞调用，因此该连接过程应始终在主 Activity 线程以外的线程中执行</p>
<blockquote>
<p>注：在调用 <code>connect()</code> 时，应始终确保设备未在执行设备发现。 如果正在进行发现操作，则会大幅降低连接尝试的速度，并增加连接失败的可能性。</p>
</blockquote>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BluetoothSocket mmSocket;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BluetoothDevice mmDevice;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConnectThread</span><span class="params">(BluetoothDevice device)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Use a temporary object that is later assigned to mmSocket,</span></span><br><span class="line">        <span class="comment">// because mmSocket is final</span></span><br><span class="line">        BluetoothSocket tmp = <span class="keyword">null</span>;</span><br><span class="line">        mmDevice = device;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Get a BluetoothSocket to connect with the given BluetoothDevice</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// MY_UUID is the app's UUID string, also used by the server code</span></span><br><span class="line">            tmp = device.createRfcommSocketToServiceRecord(MY_UUID);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123; &#125;</span><br><span class="line">        mmSocket = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Cancel discovery because it will slow down the connection</span></span><br><span class="line">        mBluetoothAdapter.cancelDiscovery();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// Connect the device through the socket. This will block</span></span><br><span class="line">            <span class="comment">// until it succeeds or throws an exception</span></span><br><span class="line">            mmSocket.connect();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException connectException) &#123;</span><br><span class="line">            <span class="comment">// Unable to connect; close the socket and get out</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                mmSocket.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException closeException) &#123; &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Do work to manage the connection (in a separate thread)</span></span><br><span class="line">        manageConnectedSocket(mmSocket);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Will cancel an in-progress connection, and close the socket */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mmSocket.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="管理连接线程"><a href="#管理连接线程" class="headerlink" title="管理连接线程"></a>管理连接线程</h3><p>在成功连接两台（或更多台）设备后，每台设备都会有一个已连接的 <code>BluetoothSocket</code>利用 <code>BluetoothSocket</code>，传输任意数据的一般过程非常简单：</p>
<ol>
<li><p>获取 <code>InputStream</code> 和 <code>OutputStream</code>，二者分别通过<code>socket</code>套接字以及 <code>getInputStream()</code> 和 <code>getOutputStream()</code> 来处理数据传输。</p>
</li>
<li><p>使用 <code>read(byte[])</code> 和 <code>write(byte[])</code> 读取数据并写入到流式传输。</p>
<p><code>read(byte[])</code>函数从输入流input stream 中读取数据并存入byte中，返回实际存了多少字节(int)</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectedThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BluetoothSocket mmSocket;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> InputStream mmInStream;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> OutputStream mmOutStream;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConnectedThread</span><span class="params">(BluetoothSocket socket)</span> </span>&#123;</span><br><span class="line">        mmSocket = socket;</span><br><span class="line">        InputStream tmpIn = <span class="keyword">null</span>;</span><br><span class="line">        OutputStream tmpOut = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Get the input and output streams, using temp objects because</span></span><br><span class="line">        <span class="comment">// member streams are final</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            tmpIn = socket.getInputStream();</span><br><span class="line">            tmpOut = socket.getOutputStream();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123; &#125;</span><br><span class="line"></span><br><span class="line">        mmInStream = tmpIn;</span><br><span class="line">        mmOutStream = tmpOut;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];  <span class="comment">// buffer store for the stream</span></span><br><span class="line">        <span class="keyword">int</span> bytes; <span class="comment">// bytes returned from read()</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Keep listening to the InputStream until an exception occurs</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// Read from the InputStream</span></span><br><span class="line">                bytes = mmInStream.read(buffer);</span><br><span class="line">                <span class="comment">// Send the obtained bytes to the UI activity</span></span><br><span class="line">                mHandler.obtainMessage(MESSAGE_READ, bytes, -<span class="number">1</span>, buffer)</span><br><span class="line">                        .sendToTarget();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Call this from the main activity to send data to the remote device */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mmOutStream.write(bytes);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Call this from the main activity to shutdown the connection */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mmSocket.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>因为之前也有过做Android应用的经历，所以这次没有采用从头学起的模式，而是直接看的Google Developer蓝牙部分的教程和API文档，遇到问题再上网去查。之前自己的想法是一个手机建立起Server，另一个手机建立起Client，因为两个手机同时调试比较麻烦，一直没有调试通过，也没有找到connect()连不上的原因。后来看了Google Developer提供的实例程序，确实自己的代码在很多地方都存在问题，一是我没有用线程Thread，原先想法是在界面上设置两个Button，一个开启Server，一个开启Client，这样就是两个手机之间的连接我必须事先知道其中一个MAC地址且要写死在程序中，这样在我们的项目中确实可以，但是对于一个蓝牙聊天软件来说有些奇怪，用户并不关心谁是Server谁是Client，他们只需要选择一个要连接的对象就可以了。所以后来我采用了和示例程序一样的方式用线程来实现。二是没有用Handler,没有用startActivityForResult这些方法，代码很乱。后来边看边改自己的代码终于完成了这个demo。实现的功能有</p>
<ol>
<li>开启关闭蓝牙，显示本机蓝牙信息</li>
<li>搜索蓝牙设备，显示已经连接的设备和新发现的设备</li>
<li>使本机开放检测</li>
<li>选择一个已经连接的设备进行聊天，聊天内容显示在下面的聊天框中</li>
</ol>
<p>界面设计的比较简陋，但是熟悉蓝牙模块的目的是达到了。明天Arduino和蓝牙模块应该也要到了，先试试Arduino和手机的蓝牙连接，然后开始转到蓝牙低功耗。demo程序的代码：</p>
]]></content>
      
        <categories>
            
            <category> 开发笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Bluetooth </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[蓝牙模块(一)]]></title>
      <url>/2017/02/01/Android/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91-%E8%93%9D%E7%89%99%E6%A8%A1%E5%9D%97(%E4%B8%80)/</url>
      <content type="html"><![CDATA[<h2 id="蓝牙模块-一"><a href="#蓝牙模块-一" class="headerlink" title="蓝牙模块(一)"></a>蓝牙模块(一)</h2><p> 因为<em>AVD</em>上没<em>有蓝牙</em>适配器,会直接报nullPointer 所以需要调试蓝牙相关的程序一定要用真机,好麻烦= = 第一节主要是蓝牙核心类BluetoothAdapter的介绍，以及如何开启、关闭蓝牙，如何扫描蓝牙设备，获取当前已配对的蓝牙设备信息。</p>
<a id="more"></a>
<p>###蓝牙操作的核心类 BluetoothAdapter</p>
<p>在使用这个类的时候需要两个权限，在AndroidManifest.xml中添加以下代码</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.BLUETOOTH"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.BLUETOOTH_ADMIN"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="蓝牙相关广播"><a href="#蓝牙相关广播" class="headerlink" title="蓝牙相关广播"></a>蓝牙相关广播</h3><table>
<thead>
<tr>
<th><strong>ACTION_STATE_CHANGED</strong></th>
<th>蓝牙状态发生改变</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>ACTION_SCAN_MODE_CHANGED    </strong></td>
<td>蓝牙扫描模式改变</td>
</tr>
<tr>
<td><strong>ACTION_DISCOVERY_STARTED</strong></td>
<td>蓝牙扫描过程开始</td>
</tr>
<tr>
<td><strong>ACTION_DISCOVERY_FINISHED</strong></td>
<td>蓝牙扫描过程结束</td>
</tr>
<tr>
<td><strong>ACTION_LOCAL_NAME_CHANGED</strong></td>
<td>蓝牙名字变化</td>
</tr>
<tr>
<td><strong>ACTION_REQUEST_DISCOVERABLE</strong></td>
<td>用户选择蓝牙是否能被扫描</td>
</tr>
<tr>
<td><strong>ACTION_REQUEST_ENABLE</strong></td>
<td>请求用户选择是否打开蓝牙</td>
</tr>
<tr>
<td><strong>ACTION_FOUND</strong></td>
<td>蓝牙扫描时，扫描到任一远程蓝牙设备时，会发送此广播</td>
</tr>
</tbody>
</table>
<p>蓝牙状态</p>
<table>
<thead>
<tr>
<th>STATE_CONNECTED</th>
<th>=2 已连接</th>
</tr>
</thead>
<tbody>
<tr>
<td>STATE_CONNECTING</td>
<td>=1 正在连接</td>
</tr>
<tr>
<td>STATE_DISCONNECTED</td>
<td>=0 未连接</td>
</tr>
<tr>
<td>STATE_DISCONNETING</td>
<td>=3 正在断开连接</td>
</tr>
<tr>
<td>STATE_OFF</td>
<td>= 10 蓝牙未开启</td>
</tr>
<tr>
<td>STATE_ON</td>
<td>= 12 蓝牙已开启</td>
</tr>
<tr>
<td>STATE_TURNING_OFF</td>
<td>=13 蓝牙正在关闭</td>
</tr>
<tr>
<td>STATE_TURNING_ON</td>
<td>=11 蓝牙正在开启</td>
</tr>
</tbody>
</table>
<h3 id="蓝牙扫描状态"><a href="#蓝牙扫描状态" class="headerlink" title="蓝牙扫描状态"></a>蓝牙扫描状态</h3><table>
<thead>
<tr>
<th>SCAN_MODE_CONNECTABLE</th>
<th>=21 对于过去已经连过的蓝牙设备connectable，但是以前未连接过的设备 not discoverable</th>
</tr>
</thead>
<tbody>
<tr>
<td>SCAN_MODE_CONNECTABLE_DISCOVERABLE</td>
<td>=23 对于素有设备都connectable和discoverable</td>
</tr>
<tr>
<td>SCAN_MODE_NONE</td>
<td>=20 所有设备都 neither discoverable nor connectable</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="获取核心类"><a href="#获取核心类" class="headerlink" title="获取核心类"></a>获取核心类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();</span><br><span class="line"><span class="comment">//如果机器不支持蓝牙 则getDefaultAdapter()方法会返回NULL</span></span><br></pre></td></tr></table></figure>
<h3 id="配置本机蓝牙模块"><a href="#配置本机蓝牙模块" class="headerlink" title="配置本机蓝牙模块"></a>配置本机蓝牙模块</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打开系统的蓝牙设置面板  </span></span><br><span class="line">Intent intent = <span class="keyword">new</span> Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);  </span><br><span class="line">startActivityForResult(intent, <span class="number">0x1</span>); </span><br><span class="line"><span class="comment">//直接打开（关闭）蓝牙</span></span><br><span class="line">mBluetoothAdapter.enable();<span class="comment">//disable()</span></span><br><span class="line"><span class="comment">//判断蓝牙是否打开</span></span><br><span class="line"><span class="keyword">boolean</span> result = mBluetoothAdapter.isEnabled();</span><br><span class="line"><span class="comment">//打开本机的蓝牙发现功能（默认打开120秒，可以将时间最多延长至300秒）  </span></span><br><span class="line">Intent discoveryIntent = <span class="keyword">new</span> Intent(BluetoothAdapter.ACTION_REQUEST_DISCOVERABLE);  </span><br><span class="line">discoverableIntent.putExtra(BluetoothAdapter.EXTRA_DISCOVERABLE_DURATION, <span class="number">300</span>);<span class="comment">//设置持续时间（最多300秒）</span></span><br></pre></td></tr></table></figure>
<h3 id="查看当前已经配对的设备"><a href="#查看当前已经配对的设备" class="headerlink" title="查看当前已经配对的设备"></a>查看当前已经配对的设备</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">String str=<span class="string">""</span>;</span><br><span class="line"><span class="comment">//getBondedDevices()方法返回当前已经配对的蓝牙设备对象</span></span><br><span class="line">Set&lt;BluetoothDevice&gt; pairedDevices = mBluetoothAdapter.getBondedDevices();</span><br><span class="line">Iterator&lt;BluetoothDevice&gt; iterator = pairedDevices.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">    BluetoothDevice bd = iterator.next();</span><br><span class="line">    str= str+<span class="string">"Name : "</span>+ bd.getName()+ <span class="string">"\t Address:"</span> + bd.getAddress() + <span class="string">" \n"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="搜索设备"><a href="#搜索设备" class="headerlink" title="搜索设备"></a>搜索设备</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断是否在搜索设备,返回boolean</span></span><br><span class="line">mBluetoothAdapter.isDiscovering()</span><br><span class="line"></span><br><span class="line"><span class="comment">//开始搜索设备</span></span><br><span class="line">mBluetoothAdapter.startDiscovery();</span><br><span class="line"><span class="comment">//停止搜索设备</span></span><br><span class="line">mBluetoothAdapter.cancelDiscovery();</span><br><span class="line"></span><br><span class="line"><span class="comment">//建立广播接收器 接收蓝牙状态广播</span></span><br><span class="line"><span class="keyword">final</span> BroadcastReceiver mReceiver = <span class="keyword">new</span> BroadcastReceiver() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;                   </span><br><span class="line">       String action = intent.getAction();                  </span><br><span class="line">      </span><br><span class="line">       <span class="keyword">if</span> (BluetoothDevice.ACTION_FOUND.equals(action)) &#123;</span><br><span class="line">           <span class="comment">// Get the BluetoothDevice object from the Intent  </span></span><br><span class="line">           BluetoothDevice device =  intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);  </span><br><span class="line">           <span class="comment">// Add the name and address to an array adapter to show  in a ListView  </span></span><br><span class="line">           mArrayAdapter.add(device.getName() + <span class="string">"\n"</span> + device.getAddress());    </span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Register the BroadcastReceiver      </span></span><br><span class="line">IntentFilter filter = <span class="keyword">new</span> IntentFilter(BluetoothDevice.ACTION_FOUND);  </span><br><span class="line">registerReceiver(mReceiver, filter); <span class="comment">// Don't forget to unregister  during onDestroy</span></span><br></pre></td></tr></table></figure>
<p>### </p>
<hr>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>在开发中还经常用到的</p>
<ol>
<li><p>android.util.Log常用方法有以下几个信息输出的方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Log.v(TAG,str)	<span class="comment">//verbose啰嗦,所有信息都会输出</span></span><br><span class="line">Log.d(TAG,str) <span class="comment">//debug调试</span></span><br><span class="line">Log.i(TAG,str) <span class="comment">//info</span></span><br><span class="line">Log.w(TAG,str) <span class="comment">//warn</span></span><br><span class="line">Log.e(TAG,str) <span class="comment">//error</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      
        <categories>
            
            <category> 开发笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Bluetooth </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[安卓开发-Get Start]]></title>
      <url>/2017/02/01/Android/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91-Get_Start/</url>
      <content type="html"><![CDATA[<p>科教玩具的项目需要有APP来实现实验数据的可视化，我、椿哥、佘琛负责软件开发，我们三个人又分三部分工作：基本界面、蓝牙、可视化。我负责蓝牙部分。之前用Ecllipse写过一个APP，但是旭神一直说Eclipse是很落后的技术了。这次用Android Studio来开发！以下便是开发过程的一些记录。我主要参考的教程是<a href="https://developer.android.google.cn" target="_blank" rel="noopener">https://developer.android.google.cn</a></p>
<a id="more"></a>
<hr>
<h3 id="前期工作"><a href="#前期工作" class="headerlink" title="前期工作"></a>前期工作</h3><ol>
<li>安装Android Studio</li>
<li>下载AVD（ <a href="https://developer.android.google.cn/tools/devices/index.html" target="_blank" rel="noopener">Android Virtual Device</a> ）<br>​<h3 id="新建第一个Project"><a href="#新建第一个Project" class="headerlink" title="新建第一个Project"></a>新建第一个Project</h3></li>
</ol>
<ul>
<li><strong>app &gt; java &gt; com.example.myfirstapp &gt; MainActivity.java</strong>：此文件包含之前创建的Activity的类定义</li>
<li><strong>app &gt; res &gt; layout &gt; activity_main.xml</strong>：此文件用来定义Activity的布局</li>
<li><strong>app &gt; manifests &gt; AndroidManifest.xml</strong>：此<a href="https://developer.android.google.cn/guide/topics/manifest/manifest-intro.html" target="_blank" rel="noopener">清单文件</a>描述应用的基本特性并定义每个组件</li>
<li><strong>Gradle Scripts &gt; build.gradle</strong>： 暂时不知道这个gradle的用处，以后再补充</li>
</ul>
<hr>
<h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><p>Android 应用的图形界面使用 <code>View</code> 对象和 <code>ViewGroup</code> 对象层次结构而构建。<code>View</code> 对象通常为<a href="https://developer.android.google.cn/guide/topics/ui/controls/button.html" target="_blank" rel="noopener">按钮</a>或<a href="https://developer.android.google.cn/guide/topics/ui/controls/text.html" target="_blank" rel="noopener">文本字段</a>之类的 UI 小部件。而 <code>ViewGroup</code> 对象则为不可见的视图容器，它们定义子视图的布局，比如是网格布局还是垂直列表布局</p>
<h3 id="创建线性布局"><a href="#创建线性布局" class="headerlink" title="创建线性布局"></a>创建线性布局</h3><p>修改<strong>app &gt; res &gt; layout &gt; activity_main.xml</strong>文件来定义Activity的布局</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">EditText</span> <span class="attr">android:id</span>=<span class="string">"@+id/edit_message"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:hint</span>=<span class="string">"@string/edit_message"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">     <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">android:text</span>=<span class="string">"@string/button_send"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>代码解释：</p>
<ul>
<li><p><code>LinearLayout</code> 是一个视图组（<code>ViewGroup</code> 的子类），它会按照 <a href="https://developer.android.google.cn/reference/android/widget/LinearLayout.html#attr_android:orientation" target="_blank" rel="noopener"><code>android:orientation</code></a> 属性的指定，将子视图设置为垂直或水平方向布局。<code>LinearLayout</code> 的每个子视图都会按照它们各自在 XML 中的出现顺序显示在屏幕上。</p>
</li>
<li><p><a href="https://developer.android.google.cn/reference/android/view/View.html#attr_android:layout_width" target="_blank" rel="noopener"><code>android:layout_width</code></a> 和 <a href="https://developer.android.google.cn/reference/android/view/View.html#attr_android:layout_height" target="_blank" rel="noopener"><code>android:layout_height</code></a> 则是所有视图的必备属性，用于指定它们的尺寸。<code>&quot;wrap_content&quot;</code> 是指定根据需要缩放视图，使其适合视图的内容。<code>&quot;match_parent&quot;</code>是匹配父<code>Linearlayout</code>的大小</p>
<p> <strong><code>&lt;EditText&gt;</code> 中的属性</strong></p>
</li>
<li><p><code>android:id</code>是示图的标识符，XML引用任何资源对象时，都需要用@符号，第一次定义资源时的时候要在资源类型之前加+号。</p>
</li>
<li><p><code>android:hint</code>文本框为空是现实的默认字符串</p>
<p><img src="/images/Android/edittext_wrap.png" alt=""></p>
</li>
</ul>
<h3 id="添加字符串资源"><a href="#添加字符串资源" class="headerlink" title="添加字符串资源"></a>添加字符串资源</h3><p>在 <strong>res &gt; values &gt; strings.xml</strong> 中添加字符串资源</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"app_name"</span>&gt;</span>My First App<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"edit_message"</span>&gt;</span>Enter a message<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"button_send"</span>&gt;</span>Send<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>对于用户界面中的文本，务必将每个字符串都指定为资源。 字符串资源允许您在单一位置管理所有 UI 文本，从而简化文本的查找和更新。 此外，将字符串外部化还可让您为每个字符串资源提供替代定义，从而将您的应用本地化为不同的语言。</p>
<h3 id="使输入框填满屏幕宽度"><a href="#使输入框填满屏幕宽度" class="headerlink" title="使输入框填满屏幕宽度"></a>使输入框填满屏幕宽度</h3><p>在 <code>activity_main.xml</code> 中，修改 <code>&lt;EditText&gt;</code> ，使这些属性如下所示：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">EditText</span> <span class="attr">android:id</span>=<span class="string">"@+id/edit_message"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:hint</span>=<span class="string">"@string/edit_message"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>所有视图的默认 weight 值都为 0，所以如果您仅将一个视图的 weight 值指定为大于 0，那么等到其他所有视图都获得所需空间后，该视图便会填满所有剩余空间。</p>
<p><img src="/images/Android/edittext_gravity.png" alt=""></p>
<p><code>EditText</code> 小部件获得了布局的所有 weight，因此它填满了 <code>LinearLayout</code> 中的剩余空间。</p>
<hr>
<h2 id="启动另一个Activity"><a href="#启动另一个Activity" class="headerlink" title="启动另一个Activity"></a>启动另一个Activity</h2><h3 id="1响应send按钮"><a href="#1响应send按钮" class="headerlink" title="1响应send按钮"></a>1响应send按钮</h3><p>在文件 <strong>res &gt; layout &gt; activity_main.xml</strong> 中，将 <a href="https://developer.android.google.cn/reference/android/view/View.html#attr_android:onClick" target="_blank" rel="noopener"><code>android:onClick</code></a> 属性添加到 <code>&lt;Button&gt;</code> 元素</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:text</span>=<span class="string">"@string/button_send"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:onClick</span>=<span class="string">"sendMessage"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>每次用户点击button时都会提示系统调用Activity中的sendMessage()方法</p>
<h3 id="2构建一个Intent"><a href="#2构建一个Intent" class="headerlink" title="2构建一个Intent"></a>2构建一个Intent</h3><p>在 <code>MainActivity.java</code> 中，将如下所示代码添加到 <code>sendMessage()</code>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String EXTRA_MESSAGE = <span class="string">"com.example.myfirstapp.MESSAGE"</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Called when the user clicks the Send button */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, DisplayMessageActivity.class);</span><br><span class="line">        EditText editText = (EditText) findViewById(R.id.edit_message);</span><br><span class="line">        String message = editText.getText().toString();</span><br><span class="line">        intent.putExtra(EXTRA_MESSAGE, message);</span><br><span class="line">        startActivity(intent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Intent</code> 构造函数采用两个参数：</p>
<ul>
<li><p><code>Context</code> 是第一个参数（之所以使用 <code>this</code> ，是因为 <code>Activity</code> 类是 <code>Context</code> 的子类）</p>
</li>
<li><p>应用组件的 <code>Class</code>，系统应将 <code>Intent</code>（在本例中，为应启动的 Activity）传递至该类。</p>
<p><code>putExtra()</code> 方法将 <code>EditText</code> 的值添加到 Intent<br><code>startActivity()</code> 方法将启动 <code>Intent</code> 指定的 <code>DisplayMessageActivity</code> 实例</p>
</li>
</ul>
<h3 id="3创建第二个Activity"><a href="#3创建第二个Activity" class="headerlink" title="3创建第二个Activity"></a>3创建第二个Activity</h3><p>在<code>DisplayMessageActivity.java</code> 中，向onCreate()方法添加如下代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">   setContentView(R.layout.activity_display_message);</span><br><span class="line"></span><br><span class="line">   Intent intent = getIntent();</span><br><span class="line">   String message = intent.getStringExtra(MainActivity.EXTRA_MESSAGE);</span><br><span class="line">   TextView textView = <span class="keyword">new</span> TextView(<span class="keyword">this</span>);</span><br><span class="line">   textView.setTextSize(<span class="number">40</span>);</span><br><span class="line">   textView.setText(message);</span><br><span class="line"></span><br><span class="line">   ViewGroup layout = (ViewGroup) findViewById(R.id.activity_display_message);</span><br><span class="line">   layout.addView(textView);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用 <code>getIntent()</code> 采集启动 Activity 的 intent。无论用户如何导航到目的地，每个 <code>Activity</code> 都由一个<code>Intent</code> 调用。 调用 <code>getStringExtra()</code> 将检索第一个 Activity 中的数据</p>
<hr>
<p>至此第一个应用就完成了，当应用打开后，请在文本字段键入消息，然后点击 <strong>Send</strong>。第二个 Activity 将替换屏幕中的第一个 Activity，并显示在第一个 Activity 中输入的消息。</p>
]]></content>
      
        <categories>
            
            <category> 开发笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mathjax-in-hexo]]></title>
      <url>/2017/01/27/mathjax-in-hexo/</url>
      <content type="html"><![CDATA[<h2 id="Hexo中的数学表达式"><a href="#Hexo中的数学表达式" class="headerlink" title="Hexo中的数学表达式"></a>Hexo中的数学表达式</h2><p>$e^{i\pi}=1$</p>
<a id="more"></a>
<p><img src="" alt=""></p>
<p>经过网上的一番搜索大致得到以下几种方法</p>
<!--more-->
<ol>
<li><p>使用hexo-math插件</p>
<p>这个方法原本是很可行的，但是不知道怎么被我搞的只有其中一篇文章里面的公式可以正常显示，其他的文章都不可以了。</p>
</li>
<li><p>使用pandoc和hexo的插件 hexo-renderer-pandoc</p>
<p>但是这个方法github主页上的介绍太过简略，我尝试了很多次都无法正常显示公式，而且hexo server的时候也不报错，故放弃</p>
</li>
<li><p>使用hexo-renderer-kramed插件，这个渲染插件针对MathJax支持进行了改进</p>
<p>非常感谢 <a href="http://2wildkids.com/" target="_blank" rel="noopener">林肯先生</a> 的帮助~</p>
</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> hexo </tag>
            
            <tag> math </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Intro-to-hexo]]></title>
      <url>/2017/01/25/intro-to-hexo/</url>
      <content type="html"><![CDATA[<h3 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a>Hexo简介</h3><p>Hexo是一个简单的，轻量的，基于Node的一个静态博客框架，可以方便的生成静态网页。</p>
<p>A fast, simple &amp; powerfu blog framework, powered by Node.js</p>
<a id="more"></a>
<h3 id="Hexo的安装"><a href="#Hexo的安装" class="headerlink" title="Hexo的安装"></a>Hexo的安装</h3><ol>
<li>安装Git</li>
<li>安装Node.js 添加到系统路径</li>
<li>使用npm安装hexo<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="Hexo命令"><a href="#Hexo命令" class="headerlink" title="Hexo命令"></a>Hexo命令</h3><ol>
<li>help:查看帮助信息</li>
<li>init [文件夹名字]:创建一个hexo项目，不指定文件夹名，则在当前目录创建</li>
<li><p>启动服务 在浏览器中方位<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>
</li>
<li><p>新建一篇文章 layout默认是post</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>
<p>发表的文章会全部显示，如果文章很长，就只要显示文章的摘要就行了。在需要显示摘要的地方添加如下代码即可<code>：&lt;!--more--&gt;</code></p>
</li>
</ol>
<h3 id="Hexo-demo下的目录与文件"><a href="#Hexo-demo下的目录与文件" class="headerlink" title="Hexo-demo下的目录与文件"></a>Hexo-demo下的目录与文件</h3><ul>
<li>scaffolds: 模板文件夹，默认三种布局 post page draft</li>
<li>source: 存放用户资源</li>
<li>themes:主题文件夹</li>
<li>_config.yml:全局的配置文件</li>
</ul>
<h3 id="发布到github"><a href="#发布到github" class="headerlink" title="发布到github"></a>发布到github</h3><ol>
<li>配置deplot指令</li>
<li><p>安装hexo-deployer-git包</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git -S</span><br></pre></td></tr></table></figure>
</li>
<li><p>利用hexo d指令发布到github</p>
</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Stay Hungry , Stay Foolish]]></title>
      <url>/2017/01/25/Foolish/</url>
      <content type="html"><![CDATA[<p>这是我的个人博客,一个并不聪明但是不断向前的IT小白</p>
<a id="more"></a>
<p>20岁是最好的年纪，保持一颗积极的心，Keep Moving</p>
<p>$E^2=mc^2$</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hard_word</span><br><span class="line">print(<span class="string">"bright future"</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/01/24/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
